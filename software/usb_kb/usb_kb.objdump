
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011dac memsz 0x00011dac flags r-x
    LOAD off    0x00012dcc vaddr 0x08011dcc paddr 0x080138b8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000153a4 vaddr 0x080153a4 paddr 0x080153a4 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011198  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  08011354  08011354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  08011dcc  080138b8  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  080153a4  080153a4  000153a4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000148b8  2**0
                  CONTENTS
  7 .sdram        00000000  08015504  08015504  000148b8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000148b8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d28  00000000  00000000  000148e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002365a  00000000  00000000  00015608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008f1f  00000000  00000000  00038c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b15f  00000000  00000000  00041b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022cc  00000000  00000000  0004cce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003340  00000000  00000000  0004efac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  000522ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00069038  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001370  00000000  00000000  00069078  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d77e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006d781  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d78d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d78e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d78f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d793  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d797  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d79b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d7a6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d7b1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006d7bc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003b  00000000  00000000  0006d7c7  2**0
                  CONTENTS, READONLY
 30 .jdi          00004442  00000000  00000000  0006d802  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006d61b  00000000  00000000  00071c44  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08011354 l    d  .rodata	00000000 .rodata
08011dcc l    d  .rwdata	00000000 .rwdata
080153a4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08015504 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
080153a4 l     O .bss	00000002 ctl_reg.3318
080153a6 l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011b12 l     O .rodata	00000010 zeroes.4181
08011b22 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080045c8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08006170 l     F .text	00000008 __fp_lock
08006178 l     F .text	00000008 __fp_unlock
0800618c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011dcc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08012210 l     O .rwdata	00000020 lc_ctype_charset
080121f0 l     O .rwdata	00000020 lc_message_charset
08012230 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011b54 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
080096bc l     F .text	000000fc __sprint_r.part.0
08011c88 l     O .rodata	00000010 blanks.4125
08011c78 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800c1c0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800eb10 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800ec38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800ec64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800ed6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800ee68 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800ef4c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800f130 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080138a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800f3e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800f534 l     F .text	00000038 alt_dev_reg
08012818 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800f810 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800fa14 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080102e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08010780 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080108d8 l     F .text	00000050 alt_get_errno
08010928 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08008cfc g     F .text	00000074 _mprec_log10
08008de8 g     F .text	0000008c __any_on
0800b0e8 g     F .text	00000054 _isatty_r
08011b60 g     O .rodata	00000028 __mprec_tinytens
0800f078 g     F .text	00000078 alt_main
08002214 g     F .text	000000b8 _puts_r
08015404 g     O .bss	00000100 alt_irq
0800b13c g     F .text	0000005c _lseek_r
080138b8 g       *ABS*	00000000 __flash_rwdata_start
0800d530 g     F .text	00000084 .hidden __eqdf2
08015504 g       *ABS*	00000000 __alt_heap_start
080021d8 g     F .text	0000003c printf
0800b364 g     F .text	0000009c _wcrtomb_r
080095b4 g     F .text	0000005c __sseek
080064d4 g     F .text	00000010 __sinit
0800b1f4 g     F .text	00000154 __swbuf_r
08006f4c g     F .text	0000007c _setlocale_r
0800632c g     F .text	00000078 __sfmoreglue
0800f110 g     F .text	00000020 __malloc_unlock
080020b0 g     F .text	00000080 UsbGetRetryCnt
08007bac g     F .text	0000015c memmove
080001f8 g     F .text	00000050 IO_init
080064bc g     F .text	00000018 _cleanup
08007e2c g     F .text	000000a8 _Balloc
0800d5b4 g     F .text	000000e0 .hidden __gtdf2
08010d18 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800b090 g     F .text	00000058 _fstat_r
080153c0 g     O .bss	00000004 errno
08009530 g     F .text	00000008 __seofread
080153c8 g     O .bss	00000004 alt_argv
0801b878 g       *ABS*	00000000 _gp
0800f3b4 g     F .text	00000030 usleep
08012698 g     O .rwdata	00000180 alt_fd_list
08010d38 g     F .text	00000090 alt_find_dev
08007a74 g     F .text	00000138 memcpy
08006180 g     F .text	0000000c _cleanup_r
0800e938 g     F .text	000000d0 .hidden __floatsidf
08010860 g     F .text	00000078 alt_io_redirect
0800d694 g     F .text	000000e0 .hidden __ltdf2
08011354 g       *ABS*	00000000 __DTOR_END__
080022cc g     F .text	00000014 puts
08009414 g     F .text	00000074 __fpclassifyd
08008c58 g     F .text	000000a4 __ratio
0800abf4 g     F .text	00000024 __vfiprintf_internal
0800fc10 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
080021ac g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800c2dc g     F .text	00000008 .hidden __udivsi3
0800edbc g     F .text	000000ac isatty
08011bb0 g     O .rodata	000000c8 __mprec_tens
08006fc8 g     F .text	0000000c __locale_charset
080153bc g     O .bss	00000004 __malloc_top_pad
08001750 g     F .text	00000264 UsbGetConfigDesc2
08013880 g     O .rwdata	00000004 __mb_cur_max
08006ff8 g     F .text	0000000c _localeconv_r
08008254 g     F .text	0000003c __i2b
08006938 g     F .text	000004a4 __sfvwrite_r
08009488 g     F .text	00000054 _sbrk_r
0800b198 g     F .text	0000005c _read_r
080138a0 g     O .rwdata	00000004 alt_max_fd
0800ada0 g     F .text	00000100 _fclose_r
08006140 g     F .text	00000030 fflush
080153b8 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c314 g     F .text	0000089c .hidden __adddf3
08008a00 g     F .text	0000011c __b2d
0800bba4 g     F .text	0000061c .hidden __umoddi3
0800ef9c g     F .text	000000dc lseek
08013878 g     O .rwdata	00000004 _global_impure_ptr
08008e74 g     F .text	000005a0 _realloc_r
08015504 g       *ABS*	00000000 __bss_end
08010690 g     F .text	000000f0 alt_iic_isr_register
08010c14 g     F .text	00000104 alt_tick
0800b564 g     F .text	00000640 .hidden __udivdi3
0800aeb4 g     F .text	00000184 _fputwc_r
08011b88 g     O .rodata	00000028 __mprec_bigtens
08008038 g     F .text	00000104 __s2b
0800ea08 g     F .text	000000a4 .hidden __floatunsidf
080087a8 g     F .text	00000060 __mcmp
080011b0 g     F .text	000000fc UsbSetAddress
080064f4 g     F .text	00000018 __fp_lock_all
08010644 g     F .text	0000004c alt_ic_irq_enabled
08010b7c g     F .text	00000098 alt_alarm_stop
080153d0 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08012670 g     O .rwdata	00000028 alt_dev_null
080102cc g     F .text	0000001c alt_dcache_flush_all
0800813c g     F .text	00000068 __hi0bits
080002b4 g     F .text	00000068 IO_read
0800e8b0 g     F .text	00000088 .hidden __fixdfsi
080138b8 g       *ABS*	00000000 __ram_rwdata_end
08013898 g     O .rwdata	00000008 alt_dev_list
0800f434 g     F .text	00000100 write
08011dcc g       *ABS*	00000000 __ram_rodata_end
0800ecb4 g     F .text	000000b8 fstat
0800d694 g     F .text	000000e0 .hidden __ledf2
08002130 g     F .text	0000007c UsbPrintMem
08008520 g     F .text	00000140 __pow5mult
080097d0 g     F .text	00001424 ___vfiprintf_internal_r
080153b0 g     O .bss	00000004 __nlocale_changed
0800c2e4 g     F .text	00000008 .hidden __umodsi3
08015504 g       *ABS*	00000000 end
0800f74c g     F .text	000000c4 altera_avalon_jtag_uart_init
08011354 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800eaac g     F .text	00000064 .hidden __clzsi2
0800fe1c g     F .text	00000218 altera_avalon_jtag_uart_write
080064e4 g     F .text	00000004 __sfp_lock_acquire
0800798c g     F .text	000000e8 memchr
08002378 g     F .text	000020fc ___vfprintf_internal_r
08001ab0 g     F .text	000000fc UsbClassRequest
08006648 g     F .text	000002f0 _free_r
08006fd4 g     F .text	00000010 __locale_mb_cur_max
0801118c g     F .text	00000194 __call_exitprocs
080153ac g     O .bss	00000004 __mlocale_changed
08013884 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
080153d4 g     O .bss	00000004 _alt_tick_rate
08008660 g     F .text	00000148 __lshift
080153d8 g     O .bss	00000004 _alt_nticks
0800f180 g     F .text	00000104 read
0800f5a0 g     F .text	00000048 alt_sys_init
08011078 g     F .text	00000114 __register_exitproc
08008290 g     F .text	00000290 __multiply
0800fabc g     F .text	00000068 altera_avalon_jtag_uart_close
0800c2ec g     F .text	00000028 .hidden __mulsi3
08011dcc g       *ABS*	00000000 __ram_rwdata_start
08011354 g       *ABS*	00000000 __ram_rodata_start
080153dc g     O .bss	00000028 __malloc_current_mallinfo
08008b1c g     F .text	0000013c __d2b
080012ac g     F .text	00000144 UsbGetDeviceDesc1
0800f5e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08010edc g     F .text	000000d4 alt_get_fd
08010174 g     F .text	00000158 alt_busy_sleep
0800ac74 g     F .text	00000054 _close_r
08010ffc g     F .text	0000007c memcmp
0800f6a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08015504 g       *ABS*	00000000 __alt_stack_base
0800f6f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08004498 g     F .text	00000130 __swsetup_r
0800cbb0 g     F .text	00000980 .hidden __divdf3
080063a4 g     F .text	00000118 __sfp
08008d70 g     F .text	00000078 __copybits
08012268 g     O .rwdata	00000408 __malloc_av_
080064f0 g     F .text	00000004 __sinit_lock_release
0800d774 g     F .text	0000086c .hidden __muldf3
080094dc g     F .text	00000054 __sread
0800202c g     F .text	00000084 UsbWaitTDListDone
08010dc8 g     F .text	00000114 alt_find_file
08010338 g     F .text	000000a4 alt_dev_llist_insert
0800f0f0 g     F .text	00000020 __malloc_lock
0800f304 g     F .text	000000b0 sbrk
08005f18 g     F .text	00000228 _fflush_r
0800acc8 g     F .text	000000d8 _calloc_r
080153a4 g       *ABS*	00000000 __bss_start
08007d08 g     F .text	00000124 memset
0800031c g     F .text	00000d4c main
080153cc g     O .bss	00000004 alt_envp
080153b4 g     O .bss	00000004 __malloc_max_total_mem
0800f648 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080019b4 g     F .text	000000fc UsbSetConfig
0800b348 g     F .text	0000001c __swbuf
08009610 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800aea0 g     F .text	00000014 fclose
080047f0 g     F .text	00001728 _dtoa_r
080071e4 g     F .text	000007a8 _malloc_r
0800b4d8 g     F .text	00000030 __ascii_wctomb
080138a4 g     O .rwdata	00000004 alt_errno
08006ddc g     F .text	000000b8 _fwalk
0800c22c g     F .text	00000054 .hidden __divsi3
08006524 g     F .text	00000124 _malloc_trim_r
08001bac g     F .text	00000144 UsbGetHidDesc
08011354 g       *ABS*	00000000 __CTOR_END__
08009618 g     F .text	000000a4 strcmp
08011354 g       *ABS*	00000000 __flash_rodata_start
08011354 g       *ABS*	00000000 __DTOR_LIST__
0800d530 g     F .text	00000084 .hidden __nedf2
080010bc g     F .text	00000044 UsbRead
0800f56c g     F .text	00000034 alt_irq_init
0800f284 g     F .text	00000080 alt_release_fd
08011c98 g     O .rodata	00000100 .hidden __clz_tab
080153a8 g     O .bss	00000004 _PathLocale
08010fb0 g     F .text	00000014 atexit
0800ac18 g     F .text	0000005c _write_r
08007004 g     F .text	0000001c setlocale
0801387c g     O .rwdata	00000004 _impure_ptr
080153c4 g     O .bss	00000004 alt_argc
08010438 g     F .text	0000005c _do_dtors
08006ff0 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
080089a0 g     F .text	00000060 __ulp
0800650c g     F .text	00000018 __fp_unlock_all
08013890 g     O .rwdata	00000008 alt_fs_list
08001cf0 g     F .text	0000033c UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
08007020 g     F .text	0000000c localeconv
080104b0 g     F .text	00000050 alt_ic_isr_register
080138b8 g       *ABS*	00000000 _edata
08015504 g       *ABS*	00000000 _end
08001068 g     F .text	00000054 UsbWrite
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800fb24 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080105a0 g     F .text	000000a4 alt_ic_irq_disable
08009538 g     F .text	0000007c __swrite
08013888 g     O .rwdata	00000004 __malloc_trim_threshold
08006fe4 g     F .text	0000000c __locale_msgcharset
08010fc4 g     F .text	00000038 exit
08006e94 g     F .text	000000b8 _fwalk_reent
08008808 g     F .text	00000198 __mdiff
0800c280 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080064e8 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08000248 g     F .text	0000006c IO_write
08011320 g     F .text	00000034 _exit
08010034 g     F .text	00000140 alt_alarm_start
0800702c g     F .text	000001b8 __smakebuf_r
080022e0 g     F .text	00000098 strlen
08010a1c g     F .text	00000160 open
0800d5b4 g     F .text	000000e0 .hidden __gedf2
0801388c g     O .rwdata	00000004 __wctomb
080097b8 g     F .text	00000018 __sprint_r
08010494 g     F .text	0000001c alt_icache_flush_all
080138ac g     O .rwdata	00000004 alt_priority_mask
08010500 g     F .text	000000a0 alt_ic_irq_enable
08004474 g     F .text	00000024 __vfprintf_internal
0800b508 g     F .text	0000005c _wctomb_r
0800dfe0 g     F .text	000008d0 .hidden __subdf3
080081a4 g     F .text	000000b0 __lo0bits
080015c4 g     F .text	0000018c UsbGetConfigDesc1
080138b0 g     O .rwdata	00000008 alt_alarm_list
080103dc g     F .text	0000005c _do_ctors
08001100 g     F .text	000000b0 UsbSoftReset
0800b400 g     F .text	000000d8 wcrtomb
0800eb60 g     F .text	000000d8 close
080013f0 g     F .text	000001d4 UsbGetDeviceDesc2
0800eecc g     F .text	00000080 alt_load
0800b038 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
080064ec g     F .text	00000004 __sinit_lock_acquire
08007efc g     F .text	0000013c __multadd
08007ed4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	10950104 	addi	r2,r2,21508
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	10950104 	addi	r2,r2,21508
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6ae1e14 	ori	gp,gp,47224
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	1094e914 	ori	r2,r2,21412

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d54114 	ori	r3,r3,21764

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800eecc0 	call	800eecc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800f0780 	call	800f078 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
 80001f8:	deffff04 	addi	sp,sp,-4
 80001fc:	df000015 	stw	fp,0(sp)
 8000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
 8000204:	00801804 	movi	r2,96
 8000208:	00c00044 	movi	r3,1
 800020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 8000210:	00800c04 	movi	r2,48
 8000214:	00c00044 	movi	r3,1
 8000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 800021c:	00800804 	movi	r2,32
 8000220:	00c00044 	movi	r3,1
 8000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 8000228:	00801404 	movi	r2,80
 800022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 8000230:	00801004 	movi	r2,64
 8000234:	10000015 	stw	zero,0(r2)
}
 8000238:	e037883a 	mov	sp,fp
 800023c:	df000017 	ldw	fp,0(sp)
 8000240:	dec00104 	addi	sp,sp,4
 8000244:	f800283a 	ret

08000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 8000248:	defffd04 	addi	sp,sp,-12
 800024c:	df000215 	stw	fp,8(sp)
 8000250:	df000204 	addi	fp,sp,8
 8000254:	2007883a 	mov	r3,r4
 8000258:	2805883a 	mov	r2,r5
 800025c:	e0fffe05 	stb	r3,-8(fp)
 8000260:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_cs = 0;
 8000264:	00801804 	movi	r2,96
 8000268:	10000005 	stb	zero,0(r2)
	*otg_hpi_address = Address;
 800026c:	00801404 	movi	r2,80
 8000270:	e0fffe03 	ldbu	r3,-8(fp)
 8000274:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
 8000278:	00801004 	movi	r2,64
 800027c:	e0ffff0b 	ldhu	r3,-4(fp)
 8000280:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
 8000284:	00800804 	movi	r2,32
 8000288:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
 800028c:	00800804 	movi	r2,32
 8000290:	00c00044 	movi	r3,1
 8000294:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 8000298:	00801804 	movi	r2,96
 800029c:	00c00044 	movi	r3,1
 80002a0:	10c00005 	stb	r3,0(r2)


}
 80002a4:	e037883a 	mov	sp,fp
 80002a8:	df000017 	ldw	fp,0(sp)
 80002ac:	dec00104 	addi	sp,sp,4
 80002b0:	f800283a 	ret

080002b4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 80002b4:	defffd04 	addi	sp,sp,-12
 80002b8:	df000215 	stw	fp,8(sp)
 80002bc:	df000204 	addi	fp,sp,8
 80002c0:	2005883a 	mov	r2,r4
 80002c4:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_cs = 0;
 80002c8:	00801804 	movi	r2,96
 80002cc:	10000005 	stb	zero,0(r2)
	*otg_hpi_address = Address;
 80002d0:	00801404 	movi	r2,80
 80002d4:	e0ffff03 	ldbu	r3,-4(fp)
 80002d8:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
 80002dc:	00800c04 	movi	r2,48
 80002e0:	10000005 	stb	zero,0(r2)

	temp = *otg_hpi_data;
 80002e4:	00801004 	movi	r2,64
 80002e8:	10800017 	ldw	r2,0(r2)
 80002ec:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
 80002f0:	00800c04 	movi	r2,48
 80002f4:	00c00044 	movi	r3,1
 80002f8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 80002fc:	00801804 	movi	r2,96
 8000300:	00c00044 	movi	r3,1
 8000304:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	return temp;
 8000308:	e0bffe0b 	ldhu	r2,-8(fp)
}
 800030c:	e037883a 	mov	sp,fp
 8000310:	df000017 	ldw	fp,0(sp)
 8000314:	dec00104 	addi	sp,sp,4
 8000318:	f800283a 	ret

0800031c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 800031c:	defff904 	addi	sp,sp,-28
 8000320:	dfc00615 	stw	ra,24(sp)
 8000324:	df000515 	stw	fp,20(sp)
 8000328:	df000504 	addi	fp,sp,20
	IO_init();
 800032c:	80001f80 	call	80001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 8000330:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 8000334:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 8000338:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 800033c:	01020074 	movhi	r4,2049
 8000340:	2104d504 	addi	r4,r4,4948
 8000344:	80022cc0 	call	80022cc <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 8000348:	80011000 	call	8001100 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 800034c:	01005104 	movi	r4,324
 8000350:	000b883a 	mov	r5,zero
 8000354:	80010680 	call	8001068 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8000358:	01302414 	movui	r4,49296
 800035c:	017fffd4 	movui	r5,65535
 8000360:	80010680 	call	8001068 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 8000364:	01006d04 	movi	r4,436
 8000368:	01409604 	movi	r5,600
 800036c:	80010680 	call	8001068 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 8000370:	00811004 	movi	r2,1088
 8000374:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 8000378:	e0bffb0b 	ldhu	r2,-20(fp)
 800037c:	01005084 	movi	r4,322
 8000380:	100b883a 	mov	r5,r2
 8000384:	80010680 	call	8001068 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 8000388:	00808404 	movi	r2,528
 800038c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 8000390:	e0bffe0b 	ldhu	r2,-8(fp)
 8000394:	01302314 	movui	r4,49292
 8000398:	100b883a 	mov	r5,r2
 800039c:	80010680 	call	8001068 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 80003a0:	01007104 	movi	r4,452
 80003a4:	000b883a 	mov	r5,zero
 80003a8:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 80003ac:	01007184 	movi	r4,454
 80003b0:	000b883a 	mov	r5,zero
 80003b4:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 80003b8:	01007204 	movi	r4,456
 80003bc:	000b883a 	mov	r5,zero
 80003c0:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80003c4:	01007284 	movi	r4,458
 80003c8:	000b883a 	mov	r5,zero
 80003cc:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80003d0:	01007304 	movi	r4,460
 80003d4:	000b883a 	mov	r5,zero
 80003d8:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80003dc:	01007384 	movi	r4,462
 80003e0:	000b883a 	mov	r5,zero
 80003e4:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80003e8:	01007404 	movi	r4,464
 80003ec:	000b883a 	mov	r5,zero
 80003f0:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80003f4:	01007484 	movi	r4,466
 80003f8:	000b883a 	mov	r5,zero
 80003fc:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 8000400:	01007504 	movi	r4,468
 8000404:	000b883a 	mov	r5,zero
 8000408:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 800040c:	01007584 	movi	r4,470
 8000410:	000b883a 	mov	r5,zero
 8000414:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000418:	01007604 	movi	r4,472
 800041c:	000b883a 	mov	r5,zero
 8000420:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000424:	01007684 	movi	r4,474
 8000428:	000b883a 	mov	r5,zero
 800042c:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000430:	01007704 	movi	r4,476
 8000434:	000b883a 	mov	r5,zero
 8000438:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 800043c:	01007784 	movi	r4,478
 8000440:	000b883a 	mov	r5,zero
 8000444:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 8000448:	01007084 	movi	r4,450
 800044c:	01401c84 	movi	r5,114
 8000450:	80010680 	call	8001068 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 8000454:	01000044 	movi	r4,1
 8000458:	01738054 	movui	r5,52737
 800045c:	80002480 	call	8000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 8000460:	0001883a 	nop
 8000464:	010000c4 	movi	r4,3
 8000468:	80002b40 	call	80002b4 <IO_read>
 800046c:	10bfffcc 	andi	r2,r2,65535
 8000470:	103ffc26 	beq	r2,zero,8000464 <__alt_data_end+0xfc000464>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8000474:	0001883a 	nop
 8000478:	01000044 	movi	r4,1
 800047c:	80002b40 	call	80002b4 <IO_read>
 8000480:	10bfffcc 	andi	r2,r2,65535
 8000484:	1083fb58 	cmpnei	r2,r2,4077
 8000488:	10000826 	beq	r2,zero,80004ac <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 800048c:	01000044 	movi	r4,1
 8000490:	80002b40 	call	80002b4 <IO_read>
 8000494:	10bfffcc 	andi	r2,r2,65535
 8000498:	01020074 	movhi	r4,2049
 800049c:	2104db04 	addi	r4,r4,4972
 80004a0:	100b883a 	mov	r5,r2
 80004a4:	80021d80 	call	80021d8 <printf>
		goto USB_HOT_PLUG;
 80004a8:	003fa706 	br	8000348 <__alt_data_end+0xfc000348>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 80004ac:	01020074 	movhi	r4,2049
 80004b0:	2104e404 	addi	r4,r4,5008
 80004b4:	80021d80 	call	80021d8 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 80004b8:	01007084 	movi	r4,450
 80004bc:	01401d04 	movi	r5,116
 80004c0:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 80004c4:	01007104 	movi	r4,452
 80004c8:	01400f04 	movi	r5,60
 80004cc:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 80004d0:	01007184 	movi	r4,454
 80004d4:	000b883a 	mov	r5,zero
 80004d8:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 80004dc:	01007204 	movi	r4,456
 80004e0:	000b883a 	mov	r5,zero
 80004e4:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80004e8:	01007284 	movi	r4,458
 80004ec:	000b883a 	mov	r5,zero
 80004f0:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80004f4:	01007304 	movi	r4,460
 80004f8:	000b883a 	mov	r5,zero
 80004fc:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 8000500:	01007384 	movi	r4,462
 8000504:	000b883a 	mov	r5,zero
 8000508:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 800050c:	01007404 	movi	r4,464
 8000510:	000b883a 	mov	r5,zero
 8000514:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 8000518:	01007484 	movi	r4,466
 800051c:	000b883a 	mov	r5,zero
 8000520:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 8000524:	01007504 	movi	r4,468
 8000528:	000b883a 	mov	r5,zero
 800052c:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 8000530:	01007584 	movi	r4,470
 8000534:	000b883a 	mov	r5,zero
 8000538:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 800053c:	01007604 	movi	r4,472
 8000540:	000b883a 	mov	r5,zero
 8000544:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000548:	01007684 	movi	r4,474
 800054c:	000b883a 	mov	r5,zero
 8000550:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000554:	01007704 	movi	r4,476
 8000558:	000b883a 	mov	r5,zero
 800055c:	80010680 	call	8001068 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000560:	01007784 	movi	r4,478
 8000564:	000b883a 	mov	r5,zero
 8000568:	80010680 	call	8001068 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 800056c:	01000044 	movi	r4,1
 8000570:	01738054 	movui	r5,52737
 8000574:	80002480 	call	8000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8000578:	0001883a 	nop
 800057c:	01000044 	movi	r4,1
 8000580:	80002b40 	call	80002b4 <IO_read>
 8000584:	10bfffcc 	andi	r2,r2,65535
 8000588:	1083fb58 	cmpnei	r2,r2,4077
 800058c:	10000826 	beq	r2,zero,80005b0 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 8000590:	01000044 	movi	r4,1
 8000594:	80002b40 	call	80002b4 <IO_read>
 8000598:	10bfffcc 	andi	r2,r2,65535
 800059c:	01020074 	movhi	r4,2049
 80005a0:	2104db04 	addi	r4,r4,4972
 80005a4:	100b883a 	mov	r5,r2
 80005a8:	80021d80 	call	80021d8 <printf>
		goto USB_HOT_PLUG;
 80005ac:	003f6606 	br	8000348 <__alt_data_end+0xfc000348>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 80005b0:	00b02284 	movi	r2,-16246
 80005b4:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 80005b8:	008c0004 	movi	r2,12288
 80005bc:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 80005c0:	00880004 	movi	r2,8192
 80005c4:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 80005c8:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80005cc:	10bfffcc 	andi	r2,r2,65535
 80005d0:	1009883a 	mov	r4,r2
 80005d4:	80010bc0 	call	80010bc <UsbRead>
 80005d8:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
 80005dc:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80005e0:	e0fffb0b 	ldhu	r3,-20(fp)
 80005e4:	1884703a 	and	r2,r3,r2
 80005e8:	10bfffcc 	andi	r2,r2,65535
 80005ec:	1000341e 	bne	r2,zero,80006c0 <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 80005f0:	e03ffbc5 	stb	zero,-17(fp)
 80005f4:	00001006 	br	8000638 <main+0x31c>
		{
			usleep(5*1000);
 80005f8:	0104e204 	movi	r4,5000
 80005fc:	800f3b40 	call	800f3b4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8000600:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000604:	10bfffcc 	andi	r2,r2,65535
 8000608:	1009883a 	mov	r4,r2
 800060c:	80010bc0 	call	80010bc <UsbRead>
 8000610:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
 8000614:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000618:	e0fffb0b 	ldhu	r3,-20(fp)
 800061c:	1884703a 	and	r2,r3,r2
 8000620:	10bfffcc 	andi	r2,r2,65535
 8000624:	10000126 	beq	r2,zero,800062c <main+0x310>
 8000628:	00000606 	br	8000644 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 800062c:	e0bffbc3 	ldbu	r2,-17(fp)
 8000630:	10800044 	addi	r2,r2,1
 8000634:	e0bffbc5 	stb	r2,-17(fp)
 8000638:	e0bffbc3 	ldbu	r2,-17(fp)
 800063c:	10800170 	cmpltui	r2,r2,5
 8000640:	103fed1e 	bne	r2,zero,80005f8 <__alt_data_end+0xfc0005f8>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
 8000644:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000648:	e0fffb0b 	ldhu	r3,-20(fp)
 800064c:	1884703a 	and	r2,r3,r2
 8000650:	10bfffcc 	andi	r2,r2,65535
 8000654:	1000261e 	bne	r2,zero,80006f0 <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 8000658:	01020074 	movhi	r4,2049
 800065c:	2104e804 	addi	r4,r4,5024
 8000660:	80022cc0 	call	80022cc <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 8000664:	01020074 	movhi	r4,2049
 8000668:	2104f204 	addi	r4,r4,5064
 800066c:	80022cc0 	call	80022cc <puts>
			while (!(usb_ctl_val & no_device))
 8000670:	00000d06 	br	80006a8 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 8000674:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000678:	10bfffcc 	andi	r2,r2,65535
 800067c:	1009883a 	mov	r4,r2
 8000680:	80010bc0 	call	80010bc <UsbRead>
 8000684:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
 8000688:	d0a6cb8b 	ldhu	r2,-25810(gp)
 800068c:	e0fffb0b 	ldhu	r3,-20(fp)
 8000690:	1884703a 	and	r2,r3,r2
 8000694:	10bfffcc 	andi	r2,r2,65535
 8000698:	10000126 	beq	r2,zero,80006a0 <main+0x384>
					goto USB_HOT_PLUG;
 800069c:	003f2a06 	br	8000348 <__alt_data_end+0xfc000348>

				usleep(2000);
 80006a0:	0101f404 	movi	r4,2000
 80006a4:	800f3b40 	call	800f3b4 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 80006a8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80006ac:	e0fffb0b 	ldhu	r3,-20(fp)
 80006b0:	1884703a 	and	r2,r3,r2
 80006b4:	10bfffcc 	andi	r2,r2,65535
 80006b8:	103fee26 	beq	r2,zero,8000674 <__alt_data_end+0xfc000674>
 80006bc:	00000c06 	br	80006f0 <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 80006c0:	e0fffb0b 	ldhu	r3,-20(fp)
 80006c4:	e0bffc0b 	ldhu	r2,-16(fp)
 80006c8:	1884703a 	and	r2,r3,r2
 80006cc:	10bfffcc 	andi	r2,r2,65535
 80006d0:	10000426 	beq	r2,zero,80006e4 <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
 80006d4:	01020074 	movhi	r4,2049
 80006d8:	2104fe04 	addi	r4,r4,5112
 80006dc:	80022cc0 	call	80022cc <puts>
 80006e0:	00000306 	br	80006f0 <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 80006e4:	01020074 	movhi	r4,2049
 80006e8:	21050504 	addi	r4,r4,5140
 80006ec:	80022cc0 	call	80022cc <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 80006f0:	80011b00 	call	80011b0 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80006f4:	00000306 	br	8000704 <main+0x3e8>
	{
		UsbSetAddress();
 80006f8:	80011b00 	call	80011b0 <UsbSetAddress>
		usleep(10*1000);
 80006fc:	0109c404 	movi	r4,10000
 8000700:	800f3b40 	call	800f3b4 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000704:	010000c4 	movi	r4,3
 8000708:	80002b40 	call	80002b4 <IO_read>
 800070c:	10bfffcc 	andi	r2,r2,65535
 8000710:	1080040c 	andi	r2,r2,16
 8000714:	103ff826 	beq	r2,zero,80006f8 <__alt_data_end+0xfc0006f8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000718:	800202c0 	call	800202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 800071c:	01000084 	movi	r4,2
 8000720:	01414184 	movi	r5,1286
 8000724:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000728:	0009883a 	mov	r4,zero
 800072c:	80002b40 	call	80002b4 <IO_read>
 8000730:	10bfffcc 	andi	r2,r2,65535
 8000734:	01020074 	movhi	r4,2049
 8000738:	21050c04 	addi	r4,r4,5168
 800073c:	100b883a 	mov	r5,r2
 8000740:	80021d80 	call	80021d8 <printf>

	IO_write(HPI_ADDR,0x0508); // n
 8000744:	01000084 	movi	r4,2
 8000748:	01414204 	movi	r5,1288
 800074c:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000750:	0009883a 	mov	r4,zero
 8000754:	80002b40 	call	80002b4 <IO_read>
 8000758:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 800075c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000760:	01020074 	movhi	r4,2049
 8000764:	21051704 	addi	r4,r4,5212
 8000768:	100b883a 	mov	r5,r2
 800076c:	80021d80 	call	80021d8 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 8000770:	e0bffb0b 	ldhu	r2,-20(fp)
 8000774:	108000e0 	cmpeqi	r2,r2,3
 8000778:	1000031e 	bne	r2,zero,8000788 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 800077c:	80020b00 	call	80020b0 <UsbGetRetryCnt>
 8000780:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
 8000784:	003ef006 	br	8000348 <__alt_data_end+0xfc000348>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 8000788:	01020074 	movhi	r4,2049
 800078c:	21052304 	addi	r4,r4,5260
 8000790:	80022cc0 	call	80022cc <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 8000794:	80012ac0 	call	80012ac <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000798:	00000306 	br	80007a8 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 800079c:	80012ac0 	call	80012ac <UsbGetDeviceDesc1>
		usleep(10*1000);
 80007a0:	0109c404 	movi	r4,10000
 80007a4:	800f3b40 	call	800f3b4 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007a8:	010000c4 	movi	r4,3
 80007ac:	80002b40 	call	80002b4 <IO_read>
 80007b0:	10bfffcc 	andi	r2,r2,65535
 80007b4:	1080040c 	andi	r2,r2,16
 80007b8:	103ff826 	beq	r2,zero,800079c <__alt_data_end+0xfc00079c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80007bc:	800202c0 	call	800202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 80007c0:	01000084 	movi	r4,2
 80007c4:	01414184 	movi	r5,1286
 80007c8:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 80007cc:	0009883a 	mov	r4,zero
 80007d0:	80002b40 	call	80002b4 <IO_read>
 80007d4:	10bfffcc 	andi	r2,r2,65535
 80007d8:	01020074 	movhi	r4,2049
 80007dc:	21053204 	addi	r4,r4,5320
 80007e0:	100b883a 	mov	r5,r2
 80007e4:	80021d80 	call	80021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
 80007e8:	01000084 	movi	r4,2
 80007ec:	01414204 	movi	r5,1288
 80007f0:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80007f4:	0009883a 	mov	r4,zero
 80007f8:	80002b40 	call	80002b4 <IO_read>
 80007fc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 8000800:	e0bffb0b 	ldhu	r2,-20(fp)
 8000804:	01020074 	movhi	r4,2049
 8000808:	21053d04 	addi	r4,r4,5364
 800080c:	100b883a 	mov	r5,r2
 8000810:	80021d80 	call	80021d8 <printf>
	while (usb_ctl_val != 0x03)
 8000814:	00000206 	br	8000820 <main+0x504>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000818:	80020b00 	call	80020b0 <UsbGetRetryCnt>
 800081c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000820:	e0bffb0b 	ldhu	r2,-20(fp)
 8000824:	108000d8 	cmpnei	r2,r2,3
 8000828:	103ffb1e 	bne	r2,zero,8000818 <__alt_data_end+0xfc000818>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 800082c:	01020074 	movhi	r4,2049
 8000830:	21054904 	addi	r4,r4,5412
 8000834:	80022cc0 	call	80022cc <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 8000838:	80013f00 	call	80013f0 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800083c:	00000306 	br	800084c <main+0x530>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 8000840:	80013f00 	call	80013f0 <UsbGetDeviceDesc2>
		usleep(10*1000);
 8000844:	0109c404 	movi	r4,10000
 8000848:	800f3b40 	call	800f3b4 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800084c:	010000c4 	movi	r4,3
 8000850:	80002b40 	call	80002b4 <IO_read>
 8000854:	10bfffcc 	andi	r2,r2,65535
 8000858:	1080040c 	andi	r2,r2,16
 800085c:	103ff826 	beq	r2,zero,8000840 <__alt_data_end+0xfc000840>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000860:	800202c0 	call	800202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000864:	01000084 	movi	r4,2
 8000868:	01414184 	movi	r5,1286
 800086c:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000870:	0009883a 	mov	r4,zero
 8000874:	80002b40 	call	80002b4 <IO_read>
 8000878:	10bfffcc 	andi	r2,r2,65535
 800087c:	01020074 	movhi	r4,2049
 8000880:	21053204 	addi	r4,r4,5320
 8000884:	100b883a 	mov	r5,r2
 8000888:	80021d80 	call	80021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
 800088c:	01000084 	movi	r4,2
 8000890:	01414204 	movi	r5,1288
 8000894:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000898:	0009883a 	mov	r4,zero
 800089c:	80002b40 	call	80002b4 <IO_read>
 80008a0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 80008a4:	e0bffb0b 	ldhu	r2,-20(fp)
 80008a8:	01020074 	movhi	r4,2049
 80008ac:	21053d04 	addi	r4,r4,5364
 80008b0:	100b883a 	mov	r5,r2
 80008b4:	80021d80 	call	80021d8 <printf>
	while (usb_ctl_val != 0x03)
 80008b8:	00000206 	br	80008c4 <main+0x5a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80008bc:	80020b00 	call	80020b0 <UsbGetRetryCnt>
 80008c0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80008c4:	e0bffb0b 	ldhu	r2,-20(fp)
 80008c8:	108000d8 	cmpnei	r2,r2,3
 80008cc:	103ffb1e 	bne	r2,zero,80008bc <__alt_data_end+0xfc0008bc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 80008d0:	01020074 	movhi	r4,2049
 80008d4:	21055d04 	addi	r4,r4,5492
 80008d8:	80022cc0 	call	80022cc <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 80008dc:	80015c40 	call	80015c4 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80008e0:	00000306 	br	80008f0 <main+0x5d4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 80008e4:	80015c40 	call	80015c4 <UsbGetConfigDesc1>
		usleep(10*1000);
 80008e8:	0109c404 	movi	r4,10000
 80008ec:	800f3b40 	call	800f3b4 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80008f0:	010000c4 	movi	r4,3
 80008f4:	80002b40 	call	80002b4 <IO_read>
 80008f8:	10bfffcc 	andi	r2,r2,65535
 80008fc:	1080040c 	andi	r2,r2,16
 8000900:	103ff826 	beq	r2,zero,80008e4 <__alt_data_end+0xfc0008e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000904:	800202c0 	call	800202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000908:	01000084 	movi	r4,2
 800090c:	01414184 	movi	r5,1286
 8000910:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000914:	0009883a 	mov	r4,zero
 8000918:	80002b40 	call	80002b4 <IO_read>
 800091c:	10bfffcc 	andi	r2,r2,65535
 8000920:	01020074 	movhi	r4,2049
 8000924:	21056f04 	addi	r4,r4,5564
 8000928:	100b883a 	mov	r5,r2
 800092c:	80021d80 	call	80021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000930:	01000084 	movi	r4,2
 8000934:	01414204 	movi	r5,1288
 8000938:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 800093c:	0009883a 	mov	r4,zero
 8000940:	80002b40 	call	80002b4 <IO_read>
 8000944:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 8000948:	e0bffb0b 	ldhu	r2,-20(fp)
 800094c:	01020074 	movhi	r4,2049
 8000950:	21057a04 	addi	r4,r4,5608
 8000954:	100b883a 	mov	r5,r2
 8000958:	80021d80 	call	80021d8 <printf>
	while (usb_ctl_val != 0x03)
 800095c:	00000206 	br	8000968 <main+0x64c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000960:	80020b00 	call	80020b0 <UsbGetRetryCnt>
 8000964:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000968:	e0bffb0b 	ldhu	r2,-20(fp)
 800096c:	108000d8 	cmpnei	r2,r2,3
 8000970:	103ffb1e 	bne	r2,zero,8000960 <__alt_data_end+0xfc000960>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 8000974:	01020074 	movhi	r4,2049
 8000978:	21058604 	addi	r4,r4,5656
 800097c:	80022cc0 	call	80022cc <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 8000980:	80017500 	call	8001750 <UsbGetConfigDesc2>

	usleep(100*1000);
 8000984:	010000b4 	movhi	r4,2
 8000988:	2121a804 	addi	r4,r4,-31072
 800098c:	800f3b40 	call	800f3b4 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000990:	00000306 	br	80009a0 <main+0x684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 8000994:	80017500 	call	8001750 <UsbGetConfigDesc2>
		usleep(10*1000);
 8000998:	0109c404 	movi	r4,10000
 800099c:	800f3b40 	call	800f3b4 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009a0:	010000c4 	movi	r4,3
 80009a4:	80002b40 	call	80002b4 <IO_read>
 80009a8:	10bfffcc 	andi	r2,r2,65535
 80009ac:	1080040c 	andi	r2,r2,16
 80009b0:	103ff826 	beq	r2,zero,8000994 <__alt_data_end+0xfc000994>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80009b4:	800202c0 	call	800202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 80009b8:	01000084 	movi	r4,2
 80009bc:	01414184 	movi	r5,1286
 80009c0:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 80009c4:	0009883a 	mov	r4,zero
 80009c8:	80002b40 	call	80002b4 <IO_read>
 80009cc:	10bfffcc 	andi	r2,r2,65535
 80009d0:	01020074 	movhi	r4,2049
 80009d4:	21059904 	addi	r4,r4,5732
 80009d8:	100b883a 	mov	r5,r2
 80009dc:	80021d80 	call	80021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
 80009e0:	01000084 	movi	r4,2
 80009e4:	01414204 	movi	r5,1288
 80009e8:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80009ec:	0009883a 	mov	r4,zero
 80009f0:	80002b40 	call	80002b4 <IO_read>
 80009f4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 80009f8:	e0bffb0b 	ldhu	r2,-20(fp)
 80009fc:	01020074 	movhi	r4,2049
 8000a00:	2105a404 	addi	r4,r4,5776
 8000a04:	100b883a 	mov	r5,r2
 8000a08:	80021d80 	call	80021d8 <printf>
	while (usb_ctl_val != 0x03)
 8000a0c:	00000206 	br	8000a18 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000a10:	80020b00 	call	80020b0 <UsbGetRetryCnt>
 8000a14:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000a18:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a1c:	108000d8 	cmpnei	r2,r2,3
 8000a20:	103ffb1e 	bne	r2,zero,8000a10 <__alt_data_end+0xfc000a10>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 8000a24:	01020074 	movhi	r4,2049
 8000a28:	2105b004 	addi	r4,r4,5824
 8000a2c:	80022cc0 	call	80022cc <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 8000a30:	01000084 	movi	r4,2
 8000a34:	01415b04 	movi	r5,1388
 8000a38:	80002480 	call	8000248 <IO_write>
	code = IO_read(HPI_DATA);
 8000a3c:	0009883a 	mov	r4,zero
 8000a40:	80002b40 	call	80002b4 <IO_read>
 8000a44:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
 8000a48:	e0bffe8b 	ldhu	r2,-6(fp)
 8000a4c:	108000cc 	andi	r2,r2,3
 8000a50:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 8000a54:	e0bffe8b 	ldhu	r2,-6(fp)
 8000a58:	01020074 	movhi	r4,2049
 8000a5c:	2105c304 	addi	r4,r4,5900
 8000a60:	100b883a 	mov	r5,r2
 8000a64:	80021d80 	call	80021d8 <printf>

	if (code == 0x01)
 8000a68:	e0bffe8b 	ldhu	r2,-6(fp)
 8000a6c:	10800058 	cmpnei	r2,r2,1
 8000a70:	1000041e 	bne	r2,zero,8000a84 <main+0x768>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8000a74:	01020074 	movhi	r4,2049
 8000a78:	2105c604 	addi	r4,r4,5912
 8000a7c:	80022cc0 	call	80022cc <puts>
 8000a80:	00000306 	br	8000a90 <main+0x774>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 8000a84:	01020074 	movhi	r4,2049
 8000a88:	2105d504 	addi	r4,r4,5972
 8000a8c:	80022cc0 	call	80022cc <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 8000a90:	01000084 	movi	r4,2
 8000a94:	01415d84 	movi	r5,1398
 8000a98:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
 8000a9c:	0009883a 	mov	r4,zero
 8000aa0:	0141cfc4 	movi	r5,1855
 8000aa4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
 8000aa8:	0009883a 	mov	r4,zero
 8000aac:	01604154 	movui	r5,33029
 8000ab0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
 8000ab4:	0009883a 	mov	r4,zero
 8000ab8:	014000c4 	movi	r5,3
 8000abc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
 8000ac0:	0009883a 	mov	r4,zero
 8000ac4:	01400204 	movi	r5,8
 8000ac8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 8000acc:	0009883a 	mov	r4,zero
 8000ad0:	016b0294 	movui	r5,44042
 8000ad4:	80002480 	call	8000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 8000ad8:	01006c04 	movi	r4,432
 8000adc:	01415d84 	movi	r5,1398
 8000ae0:	80010680 	call	8001068 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 8000ae4:	01000084 	movi	r4,2
 8000ae8:	01415f04 	movi	r5,1404
 8000aec:	80002480 	call	8000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 8000af0:	0009883a 	mov	r4,zero
 8000af4:	80002b40 	call	80002b4 <IO_read>
 8000af8:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 8000afc:	e0bfff03 	ldbu	r2,-4(fp)
 8000b00:	01020074 	movhi	r4,2049
 8000b04:	2105de04 	addi	r4,r4,6008
 8000b08:	100b883a 	mov	r5,r2
 8000b0c:	80021d80 	call	80021d8 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 8000b10:	80019b40 	call	80019b4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b14:	00000306 	br	8000b24 <main+0x808>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 8000b18:	80019b40 	call	80019b4 <UsbSetConfig>
		usleep(10*1000);
 8000b1c:	0109c404 	movi	r4,10000
 8000b20:	800f3b40 	call	800f3b4 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b24:	010000c4 	movi	r4,3
 8000b28:	80002b40 	call	80002b4 <IO_read>
 8000b2c:	10bfffcc 	andi	r2,r2,65535
 8000b30:	1080040c 	andi	r2,r2,16
 8000b34:	103ff826 	beq	r2,zero,8000b18 <__alt_data_end+0xfc000b18>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000b38:	800202c0 	call	800202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000b3c:	01000084 	movi	r4,2
 8000b40:	01414184 	movi	r5,1286
 8000b44:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000b48:	0009883a 	mov	r4,zero
 8000b4c:	80002b40 	call	80002b4 <IO_read>
 8000b50:	10bfffcc 	andi	r2,r2,65535
 8000b54:	01020074 	movhi	r4,2049
 8000b58:	2105e804 	addi	r4,r4,6048
 8000b5c:	100b883a 	mov	r5,r2
 8000b60:	80021d80 	call	80021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000b64:	01000084 	movi	r4,2
 8000b68:	01414204 	movi	r5,1288
 8000b6c:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000b70:	0009883a 	mov	r4,zero
 8000b74:	80002b40 	call	80002b4 <IO_read>
 8000b78:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 8000b7c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000b80:	01020074 	movhi	r4,2049
 8000b84:	2105f304 	addi	r4,r4,6092
 8000b88:	100b883a 	mov	r5,r2
 8000b8c:	80021d80 	call	80021d8 <printf>
	while (usb_ctl_val != 0x03)
 8000b90:	00000206 	br	8000b9c <main+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000b94:	80020b00 	call	80020b0 <UsbGetRetryCnt>
 8000b98:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000b9c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000ba0:	108000d8 	cmpnei	r2,r2,3
 8000ba4:	103ffb1e 	bne	r2,zero,8000b94 <__alt_data_end+0xfc000b94>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8000ba8:	01020074 	movhi	r4,2049
 8000bac:	2105ff04 	addi	r4,r4,6140
 8000bb0:	80022cc0 	call	80022cc <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 8000bb4:	8001ab00 	call	8001ab0 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000bb8:	00000306 	br	8000bc8 <main+0x8ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 8000bbc:	8001ab00 	call	8001ab0 <UsbClassRequest>
		usleep(10*1000);
 8000bc0:	0109c404 	movi	r4,10000
 8000bc4:	800f3b40 	call	800f3b4 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000bc8:	010000c4 	movi	r4,3
 8000bcc:	80002b40 	call	80002b4 <IO_read>
 8000bd0:	10bfffcc 	andi	r2,r2,65535
 8000bd4:	1080040c 	andi	r2,r2,16
 8000bd8:	103ff826 	beq	r2,zero,8000bbc <__alt_data_end+0xfc000bbc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000bdc:	800202c0 	call	800202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000be0:	01000084 	movi	r4,2
 8000be4:	01414184 	movi	r5,1286
 8000be8:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000bec:	0009883a 	mov	r4,zero
 8000bf0:	80002b40 	call	80002b4 <IO_read>
 8000bf4:	10bfffcc 	andi	r2,r2,65535
 8000bf8:	01020074 	movhi	r4,2049
 8000bfc:	21061104 	addi	r4,r4,6212
 8000c00:	100b883a 	mov	r5,r2
 8000c04:	80021d80 	call	80021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000c08:	01000084 	movi	r4,2
 8000c0c:	01414204 	movi	r5,1288
 8000c10:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000c14:	0009883a 	mov	r4,zero
 8000c18:	80002b40 	call	80002b4 <IO_read>
 8000c1c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000c20:	e0bffb0b 	ldhu	r2,-20(fp)
 8000c24:	01020074 	movhi	r4,2049
 8000c28:	21061c04 	addi	r4,r4,6256
 8000c2c:	100b883a 	mov	r5,r2
 8000c30:	80021d80 	call	80021d8 <printf>
	while (usb_ctl_val != 0x03)
 8000c34:	00000206 	br	8000c40 <main+0x924>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000c38:	80020b00 	call	80020b0 <UsbGetRetryCnt>
 8000c3c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000c40:	e0bffb0b 	ldhu	r2,-20(fp)
 8000c44:	108000d8 	cmpnei	r2,r2,3
 8000c48:	103ffb1e 	bne	r2,zero,8000c38 <__alt_data_end+0xfc000c38>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8000c4c:	01020074 	movhi	r4,2049
 8000c50:	21062804 	addi	r4,r4,6304
 8000c54:	80022cc0 	call	80022cc <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 8000c58:	8001bac0 	call	8001bac <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c5c:	00000306 	br	8000c6c <main+0x950>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 8000c60:	8001bac0 	call	8001bac <UsbGetHidDesc>
		usleep(10*1000);
 8000c64:	0109c404 	movi	r4,10000
 8000c68:	800f3b40 	call	800f3b4 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c6c:	010000c4 	movi	r4,3
 8000c70:	80002b40 	call	80002b4 <IO_read>
 8000c74:	10bfffcc 	andi	r2,r2,65535
 8000c78:	1080040c 	andi	r2,r2,16
 8000c7c:	103ff826 	beq	r2,zero,8000c60 <__alt_data_end+0xfc000c60>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000c80:	800202c0 	call	800202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000c84:	01000084 	movi	r4,2
 8000c88:	01414184 	movi	r5,1286
 8000c8c:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000c90:	0009883a 	mov	r4,zero
 8000c94:	80002b40 	call	80002b4 <IO_read>
 8000c98:	10bfffcc 	andi	r2,r2,65535
 8000c9c:	01020074 	movhi	r4,2049
 8000ca0:	21061104 	addi	r4,r4,6212
 8000ca4:	100b883a 	mov	r5,r2
 8000ca8:	80021d80 	call	80021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000cac:	01000084 	movi	r4,2
 8000cb0:	01414204 	movi	r5,1288
 8000cb4:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000cb8:	0009883a 	mov	r4,zero
 8000cbc:	80002b40 	call	80002b4 <IO_read>
 8000cc0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000cc4:	e0bffb0b 	ldhu	r2,-20(fp)
 8000cc8:	01020074 	movhi	r4,2049
 8000ccc:	21061c04 	addi	r4,r4,6256
 8000cd0:	100b883a 	mov	r5,r2
 8000cd4:	80021d80 	call	80021d8 <printf>
	while (usb_ctl_val != 0x03)
 8000cd8:	00000206 	br	8000ce4 <main+0x9c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000cdc:	80020b00 	call	80020b0 <UsbGetRetryCnt>
 8000ce0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000ce4:	e0bffb0b 	ldhu	r2,-20(fp)
 8000ce8:	108000d8 	cmpnei	r2,r2,3
 8000cec:	103ffb1e 	bne	r2,zero,8000cdc <__alt_data_end+0xfc000cdc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8000cf0:	01020074 	movhi	r4,2049
 8000cf4:	21063a04 	addi	r4,r4,6376
 8000cf8:	80022cc0 	call	80022cc <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 8000cfc:	8001cf00 	call	8001cf0 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d00:	00000306 	br	8000d10 <main+0x9f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 8000d04:	8001cf00 	call	8001cf0 <UsbGetReportDesc>
		usleep(10*1000);
 8000d08:	0109c404 	movi	r4,10000
 8000d0c:	800f3b40 	call	800f3b4 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d10:	010000c4 	movi	r4,3
 8000d14:	80002b40 	call	80002b4 <IO_read>
 8000d18:	10bfffcc 	andi	r2,r2,65535
 8000d1c:	1080040c 	andi	r2,r2,16
 8000d20:	103ff826 	beq	r2,zero,8000d04 <__alt_data_end+0xfc000d04>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000d24:	800202c0 	call	800202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000d28:	01000084 	movi	r4,2
 8000d2c:	01414184 	movi	r5,1286
 8000d30:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000d34:	0009883a 	mov	r4,zero
 8000d38:	80002b40 	call	80002b4 <IO_read>
 8000d3c:	10bfffcc 	andi	r2,r2,65535
 8000d40:	01020074 	movhi	r4,2049
 8000d44:	21064e04 	addi	r4,r4,6456
 8000d48:	100b883a 	mov	r5,r2
 8000d4c:	80021d80 	call	80021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000d50:	01000084 	movi	r4,2
 8000d54:	01414204 	movi	r5,1288
 8000d58:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000d5c:	0009883a 	mov	r4,zero
 8000d60:	80002b40 	call	80002b4 <IO_read>
 8000d64:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 8000d68:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d6c:	01020074 	movhi	r4,2049
 8000d70:	21065a04 	addi	r4,r4,6504
 8000d74:	100b883a 	mov	r5,r2
 8000d78:	80021d80 	call	80021d8 <printf>
	while (usb_ctl_val != 0x03)
 8000d7c:	00000206 	br	8000d88 <main+0xa6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000d80:	80020b00 	call	80020b0 <UsbGetRetryCnt>
 8000d84:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000d88:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d8c:	108000d8 	cmpnei	r2,r2,3
 8000d90:	103ffb1e 	bne	r2,zero,8000d80 <__alt_data_end+0xfc000d80>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8000d94:	01020074 	movhi	r4,2049
 8000d98:	21066604 	addi	r4,r4,6552
 8000d9c:	80022cc0 	call	80022cc <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8000da0:	0109c404 	movi	r4,10000
 8000da4:	800f3b40 	call	800f3b4 <usleep>
	while(1)
	{
		toggle++;
 8000da8:	e0bffb83 	ldbu	r2,-18(fp)
 8000dac:	10800044 	addi	r2,r2,1
 8000db0:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 8000db4:	01000084 	movi	r4,2
 8000db8:	01414004 	movi	r5,1280
 8000dbc:	80002480 	call	8000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 8000dc0:	0009883a 	mov	r4,zero
 8000dc4:	01414704 	movi	r5,1308
 8000dc8:	80002480 	call	8000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000dcc:	e0bfff03 	ldbu	r2,-4(fp)
 8000dd0:	108003cc 	andi	r2,r2,15
 8000dd4:	0009883a 	mov	r4,zero
 8000dd8:	100b883a 	mov	r5,r2
 8000ddc:	80002480 	call	8000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000de0:	0009883a 	mov	r4,zero
 8000de4:	0140a444 	movi	r5,657
 8000de8:	80002480 	call	8000248 <IO_write>
		if(toggle%2)
 8000dec:	e0bffb83 	ldbu	r2,-18(fp)
 8000df0:	1080004c 	andi	r2,r2,1
 8000df4:	10803fcc 	andi	r2,r2,255
 8000df8:	10000426 	beq	r2,zero,8000e0c <main+0xaf0>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 8000dfc:	0009883a 	mov	r4,zero
 8000e00:	01400044 	movi	r5,1
 8000e04:	80002480 	call	8000248 <IO_write>
 8000e08:	00000306 	br	8000e18 <main+0xafc>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 8000e0c:	0009883a 	mov	r4,zero
 8000e10:	01401044 	movi	r5,65
 8000e14:	80002480 	call	8000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 8000e18:	0009883a 	mov	r4,zero
 8000e1c:	014004c4 	movi	r5,19
 8000e20:	80002480 	call	8000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 8000e24:	0009883a 	mov	r4,zero
 8000e28:	000b883a 	mov	r5,zero
 8000e2c:	80002480 	call	8000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000e30:	01006c04 	movi	r4,432
 8000e34:	01414004 	movi	r5,1280
 8000e38:	80010680 	call	8001068 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000e3c:	00002406 	br	8000ed0 <main+0xbb4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 8000e40:	01000084 	movi	r4,2
 8000e44:	01414004 	movi	r5,1280
 8000e48:	80002480 	call	8000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 8000e4c:	0009883a 	mov	r4,zero
 8000e50:	01414704 	movi	r5,1308
 8000e54:	80002480 	call	8000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000e58:	e0bfff03 	ldbu	r2,-4(fp)
 8000e5c:	108003cc 	andi	r2,r2,15
 8000e60:	0009883a 	mov	r4,zero
 8000e64:	100b883a 	mov	r5,r2
 8000e68:	80002480 	call	8000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000e6c:	0009883a 	mov	r4,zero
 8000e70:	0140a444 	movi	r5,657
 8000e74:	80002480 	call	8000248 <IO_write>
			if(toggle%2)
 8000e78:	e0bffb83 	ldbu	r2,-18(fp)
 8000e7c:	1080004c 	andi	r2,r2,1
 8000e80:	10803fcc 	andi	r2,r2,255
 8000e84:	10000426 	beq	r2,zero,8000e98 <main+0xb7c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 8000e88:	0009883a 	mov	r4,zero
 8000e8c:	01400044 	movi	r5,1
 8000e90:	80002480 	call	8000248 <IO_write>
 8000e94:	00000306 	br	8000ea4 <main+0xb88>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 8000e98:	0009883a 	mov	r4,zero
 8000e9c:	01401044 	movi	r5,65
 8000ea0:	80002480 	call	8000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 8000ea4:	0009883a 	mov	r4,zero
 8000ea8:	014004c4 	movi	r5,19
 8000eac:	80002480 	call	8000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
 8000eb0:	0009883a 	mov	r4,zero
 8000eb4:	000b883a 	mov	r5,zero
 8000eb8:	80002480 	call	8000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000ebc:	01006c04 	movi	r4,432
 8000ec0:	01414004 	movi	r5,1280
 8000ec4:	80010680 	call	8001068 <UsbWrite>
			usleep(10*1000);
 8000ec8:	0109c404 	movi	r4,10000
 8000ecc:	800f3b40 	call	800f3b4 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000ed0:	010000c4 	movi	r4,3
 8000ed4:	80002b40 	call	80002b4 <IO_read>
 8000ed8:	10bfffcc 	andi	r2,r2,65535
 8000edc:	1080040c 	andi	r2,r2,16
 8000ee0:	103fd726 	beq	r2,zero,8000e40 <__alt_data_end+0xfc000e40>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
 8000ee4:	800202c0 	call	800202c <UsbWaitTDListDone>
 8000ee8:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
 8000eec:	01000084 	movi	r4,2
 8000ef0:	01414784 	movi	r5,1310
 8000ef4:	80002480 	call	8000248 <IO_write>
		keycode = IO_read(HPI_DATA);
 8000ef8:	0009883a 	mov	r4,zero
 8000efc:	80002b40 	call	80002b4 <IO_read>
 8000f00:	10bfffcc 	andi	r2,r2,65535
 8000f04:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 8000f08:	01020074 	movhi	r4,2049
 8000f0c:	21067a04 	addi	r4,r4,6632
 8000f10:	e17ffd17 	ldw	r5,-12(fp)
 8000f14:	80021d80 	call	80021d8 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
 8000f18:	e0bffd17 	ldw	r2,-12(fp)
 8000f1c:	10c03fcc 	andi	r3,r2,255
 8000f20:	00801c04 	movi	r2,112
 8000f24:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
 8000f28:	01003204 	movi	r4,200
 8000f2c:	800f3b40 	call	800f3b4 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 8000f30:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000f34:	10bfffcc 	andi	r2,r2,65535
 8000f38:	1009883a 	mov	r4,r2
 8000f3c:	80010bc0 	call	80010bc <UsbRead>
 8000f40:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
 8000f44:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000f48:	e0fffb0b 	ldhu	r3,-20(fp)
 8000f4c:	1884703a 	and	r2,r3,r2
 8000f50:	10bfffcc 	andi	r2,r2,65535
 8000f54:	1000201e 	bne	r2,zero,8000fd8 <main+0xcbc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000f58:	e03ffbc5 	stb	zero,-17(fp)
 8000f5c:	00001006 	br	8000fa0 <main+0xc84>
			{
				usleep(5*1000);
 8000f60:	0104e204 	movi	r4,5000
 8000f64:	800f3b40 	call	800f3b4 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 8000f68:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000f6c:	10bfffcc 	andi	r2,r2,65535
 8000f70:	1009883a 	mov	r4,r2
 8000f74:	80010bc0 	call	80010bc <UsbRead>
 8000f78:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
 8000f7c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000f80:	e0fffb0b 	ldhu	r3,-20(fp)
 8000f84:	1884703a 	and	r2,r3,r2
 8000f88:	10bfffcc 	andi	r2,r2,65535
 8000f8c:	10000126 	beq	r2,zero,8000f94 <main+0xc78>
 8000f90:	00000606 	br	8000fac <main+0xc90>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000f94:	e0bffbc3 	ldbu	r2,-17(fp)
 8000f98:	10800044 	addi	r2,r2,1
 8000f9c:	e0bffbc5 	stb	r2,-17(fp)
 8000fa0:	e0bffbc3 	ldbu	r2,-17(fp)
 8000fa4:	108001f0 	cmpltui	r2,r2,7
 8000fa8:	103fed1e 	bne	r2,zero,8000f60 <__alt_data_end+0xfc000f60>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
 8000fac:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000fb0:	e0fffb0b 	ldhu	r3,-20(fp)
 8000fb4:	1884703a 	and	r2,r3,r2
 8000fb8:	10bfffcc 	andi	r2,r2,65535
 8000fbc:	1000061e 	bne	r2,zero,8000fd8 <main+0xcbc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 8000fc0:	01020074 	movhi	r4,2049
 8000fc4:	21068304 	addi	r4,r4,6668
 8000fc8:	80022cc0 	call	80022cc <puts>
				printf("[INFO]: please insert again!!! \n");
 8000fcc:	01020074 	movhi	r4,2049
 8000fd0:	21068e04 	addi	r4,r4,6712
 8000fd4:	80022cc0 	call	80022cc <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 8000fd8:	00001d06 	br	8001050 <main+0xd34>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 8000fdc:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000fe0:	10bfffcc 	andi	r2,r2,65535
 8000fe4:	1009883a 	mov	r4,r2
 8000fe8:	80010bc0 	call	80010bc <UsbRead>
 8000fec:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8000ff0:	0104e204 	movi	r4,5000
 8000ff4:	800f3b40 	call	800f3b4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8000ff8:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000ffc:	10bfffcc 	andi	r2,r2,65535
 8001000:	1009883a 	mov	r4,r2
 8001004:	80010bc0 	call	80010bc <UsbRead>
 8001008:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 800100c:	0104e204 	movi	r4,5000
 8001010:	800f3b40 	call	800f3b4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8001014:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8001018:	10bfffcc 	andi	r2,r2,65535
 800101c:	1009883a 	mov	r4,r2
 8001020:	80010bc0 	call	80010bc <UsbRead>
 8001024:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8001028:	0104e204 	movi	r4,5000
 800102c:	800f3b40 	call	800f3b4 <usleep>

			if(usb_ctl_val & no_device)
 8001030:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001034:	e0fffb0b 	ldhu	r3,-20(fp)
 8001038:	1884703a 	and	r2,r3,r2
 800103c:	10bfffcc 	andi	r2,r2,65535
 8001040:	10000126 	beq	r2,zero,8001048 <main+0xd2c>
				goto USB_HOT_PLUG;
 8001044:	003cc006 	br	8000348 <__alt_data_end+0xfc000348>

			usleep(200);
 8001048:	01003204 	movi	r4,200
 800104c:	800f3b40 	call	800f3b4 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
 8001050:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001054:	e0fffb0b 	ldhu	r3,-20(fp)
 8001058:	1884703a 	and	r2,r3,r2
 800105c:	10bfffcc 	andi	r2,r2,65535
 8001060:	103fde26 	beq	r2,zero,8000fdc <__alt_data_end+0xfc000fdc>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
 8001064:	003f5006 	br	8000da8 <__alt_data_end+0xfc000da8>

08001068 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 8001068:	defffc04 	addi	sp,sp,-16
 800106c:	dfc00315 	stw	ra,12(sp)
 8001070:	df000215 	stw	fp,8(sp)
 8001074:	df000204 	addi	fp,sp,8
 8001078:	2007883a 	mov	r3,r4
 800107c:	2805883a 	mov	r2,r5
 8001080:	e0fffe0d 	sth	r3,-8(fp)
 8001084:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
 8001088:	e0bffe0b 	ldhu	r2,-8(fp)
 800108c:	01000084 	movi	r4,2
 8001090:	100b883a 	mov	r5,r2
 8001094:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA, Data);
 8001098:	e0bfff0b 	ldhu	r2,-4(fp)
 800109c:	0009883a 	mov	r4,zero
 80010a0:	100b883a 	mov	r5,r2
 80010a4:	80002480 	call	8000248 <IO_write>

}
 80010a8:	e037883a 	mov	sp,fp
 80010ac:	dfc00117 	ldw	ra,4(sp)
 80010b0:	df000017 	ldw	fp,0(sp)
 80010b4:	dec00204 	addi	sp,sp,8
 80010b8:	f800283a 	ret

080010bc <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 80010bc:	defffd04 	addi	sp,sp,-12
 80010c0:	dfc00215 	stw	ra,8(sp)
 80010c4:	df000115 	stw	fp,4(sp)
 80010c8:	df000104 	addi	fp,sp,4
 80010cc:	2005883a 	mov	r2,r4
 80010d0:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
 80010d4:	e0bfff0b 	ldhu	r2,-4(fp)
 80010d8:	01000084 	movi	r4,2
 80010dc:	100b883a 	mov	r5,r2
 80010e0:	80002480 	call	8000248 <IO_write>
	return IO_read(HPI_DATA);
 80010e4:	0009883a 	mov	r4,zero
 80010e8:	80002b40 	call	80002b4 <IO_read>
}
 80010ec:	e037883a 	mov	sp,fp
 80010f0:	dfc00117 	ldw	ra,4(sp)
 80010f4:	df000017 	ldw	fp,0(sp)
 80010f8:	dec00204 	addi	sp,sp,8
 80010fc:	f800283a 	ret

08001100 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 8001100:	defffe04 	addi	sp,sp,-8
 8001104:	dfc00115 	stw	ra,4(sp)
 8001108:	df000015 	stw	fp,0(sp)
 800110c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 8001110:	01000044 	movi	r4,1
 8001114:	017e9414 	movui	r5,64080
 8001118:	80002480 	call	8000248 <IO_write>
	usleep(100000);
 800111c:	010000b4 	movhi	r4,2
 8001120:	2121a804 	addi	r4,r4,-31072
 8001124:	800f3b40 	call	800f3b4 <usleep>
	printf("[USB INIT]:reset finished!\n");
 8001128:	01020074 	movhi	r4,2049
 800112c:	21069604 	addi	r4,r4,6744
 8001130:	80022cc0 	call	80022cc <puts>

	usleep(500000);
 8001134:	01000234 	movhi	r4,8
 8001138:	21284804 	addi	r4,r4,-24288
 800113c:	800f3b40 	call	800f3b4 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 8001140:	01020074 	movhi	r4,2049
 8001144:	21069d04 	addi	r4,r4,6772
 8001148:	80022cc0 	call	80022cc <puts>
	IO_read(HPI_MAILBOX);
 800114c:	01000044 	movi	r4,1
 8001150:	80002b40 	call	80002b4 <IO_read>
	IO_read(HPI_STATUS);
 8001154:	010000c4 	movi	r4,3
 8001158:	80002b40 	call	80002b4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 800115c:	01005104 	movi	r4,324
 8001160:	80010bc0 	call	80010bc <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8001164:	01005104 	movi	r4,324
 8001168:	000b883a 	mov	r5,zero
 800116c:	80010680 	call	8001068 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 8001170:	01005204 	movi	r4,328
 8001174:	80010bc0 	call	80010bc <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 8001178:	01005204 	movi	r4,328
 800117c:	000b883a 	mov	r5,zero
 8001180:	80010680 	call	8001068 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8001184:	01302414 	movui	r4,49296
 8001188:	017fffd4 	movui	r5,65535
 800118c:	80010680 	call	8001068 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 8001190:	01302c14 	movui	r4,49328
 8001194:	017fffd4 	movui	r5,65535
 8001198:	80010680 	call	8001068 <UsbWrite>
}
 800119c:	e037883a 	mov	sp,fp
 80011a0:	dfc00117 	ldw	ra,4(sp)
 80011a4:	df000017 	ldw	fp,0(sp)
 80011a8:	dec00204 	addi	sp,sp,8
 80011ac:	f800283a 	ret

080011b0 <UsbSetAddress>:


void UsbSetAddress()
{
 80011b0:	defffe04 	addi	sp,sp,-8
 80011b4:	dfc00115 	stw	ra,4(sp)
 80011b8:	df000015 	stw	fp,0(sp)
 80011bc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80011c0:	01000084 	movi	r4,2
 80011c4:	01414004 	movi	r5,1280
 80011c8:	80002480 	call	8000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 80011cc:	0009883a 	mov	r4,zero
 80011d0:	01414304 	movi	r5,1292
 80011d4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80011d8:	0009883a 	mov	r4,zero
 80011dc:	01400204 	movi	r5,8
 80011e0:	80002480 	call	8000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 80011e4:	0009883a 	mov	r4,zero
 80011e8:	01403404 	movi	r5,208
 80011ec:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80011f0:	0009883a 	mov	r4,zero
 80011f4:	01400044 	movi	r5,1
 80011f8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80011fc:	0009883a 	mov	r4,zero
 8001200:	014004c4 	movi	r5,19
 8001204:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001208:	0009883a 	mov	r4,zero
 800120c:	01414504 	movi	r5,1300
 8001210:	80002480 	call	8000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 8001214:	0009883a 	mov	r4,zero
 8001218:	01414004 	movi	r5,1280
 800121c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
 8001220:	0009883a 	mov	r4,zero
 8001224:	01400084 	movi	r5,2
 8001228:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 800122c:	0009883a 	mov	r4,zero
 8001230:	000b883a 	mov	r5,zero
 8001234:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001238:	0009883a 	mov	r4,zero
 800123c:	000b883a 	mov	r5,zero
 8001240:	80002480 	call	8000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 8001244:	0009883a 	mov	r4,zero
 8001248:	000b883a 	mov	r5,zero
 800124c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
 8001250:	0009883a 	mov	r4,zero
 8001254:	000b883a 	mov	r5,zero
 8001258:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
 800125c:	0009883a 	mov	r4,zero
 8001260:	01402404 	movi	r5,144
 8001264:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
 8001268:	0009883a 	mov	r4,zero
 800126c:	01401044 	movi	r5,65
 8001270:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001274:	0009883a 	mov	r4,zero
 8001278:	014004c4 	movi	r5,19
 800127c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001280:	0009883a 	mov	r4,zero
 8001284:	000b883a 	mov	r5,zero
 8001288:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 800128c:	01006c04 	movi	r4,432
 8001290:	01414004 	movi	r5,1280
 8001294:	80010680 	call	8001068 <UsbWrite>
}
 8001298:	e037883a 	mov	sp,fp
 800129c:	dfc00117 	ldw	ra,4(sp)
 80012a0:	df000017 	ldw	fp,0(sp)
 80012a4:	dec00204 	addi	sp,sp,8
 80012a8:	f800283a 	ret

080012ac <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 80012ac:	defffe04 	addi	sp,sp,-8
 80012b0:	dfc00115 	stw	ra,4(sp)
 80012b4:	df000015 	stw	fp,0(sp)
 80012b8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80012bc:	01000084 	movi	r4,2
 80012c0:	01414004 	movi	r5,1280
 80012c4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80012c8:	0009883a 	mov	r4,zero
 80012cc:	01414304 	movi	r5,1292
 80012d0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80012d4:	0009883a 	mov	r4,zero
 80012d8:	01400204 	movi	r5,8
 80012dc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80012e0:	0009883a 	mov	r4,zero
 80012e4:	0140b404 	movi	r5,720
 80012e8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80012ec:	0009883a 	mov	r4,zero
 80012f0:	01400044 	movi	r5,1
 80012f4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80012f8:	0009883a 	mov	r4,zero
 80012fc:	014004c4 	movi	r5,19
 8001300:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001304:	0009883a 	mov	r4,zero
 8001308:	01414504 	movi	r5,1300
 800130c:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001310:	0009883a 	mov	r4,zero
 8001314:	0141a004 	movi	r5,1664
 8001318:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 800131c:	0009883a 	mov	r4,zero
 8001320:	01404004 	movi	r5,256
 8001324:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001328:	0009883a 	mov	r4,zero
 800132c:	000b883a 	mov	r5,zero
 8001330:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
 8001334:	0009883a 	mov	r4,zero
 8001338:	01400204 	movi	r5,8
 800133c:	80002480 	call	8000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 8001340:	0009883a 	mov	r4,zero
 8001344:	01414b04 	movi	r5,1324
 8001348:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
 800134c:	0009883a 	mov	r4,zero
 8001350:	01400204 	movi	r5,8
 8001354:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
 8001358:	0009883a 	mov	r4,zero
 800135c:	0140a404 	movi	r5,656
 8001360:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
 8001364:	0009883a 	mov	r4,zero
 8001368:	01401044 	movi	r5,65
 800136c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001370:	0009883a 	mov	r4,zero
 8001374:	014004c4 	movi	r5,19
 8001378:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
 800137c:	0009883a 	mov	r4,zero
 8001380:	01414804 	movi	r5,1312
 8001384:	80002480 	call	8000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 8001388:	0009883a 	mov	r4,zero
 800138c:	000b883a 	mov	r5,zero
 8001390:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 8001394:	0009883a 	mov	r4,zero
 8001398:	000b883a 	mov	r5,zero
 800139c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 80013a0:	0009883a 	mov	r4,zero
 80013a4:	01408404 	movi	r5,528
 80013a8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
 80013ac:	0009883a 	mov	r4,zero
 80013b0:	01401044 	movi	r5,65
 80013b4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80013b8:	0009883a 	mov	r4,zero
 80013bc:	014004c4 	movi	r5,19
 80013c0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 80013c4:	0009883a 	mov	r4,zero
 80013c8:	000b883a 	mov	r5,zero
 80013cc:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80013d0:	01006c04 	movi	r4,432
 80013d4:	01414004 	movi	r5,1280
 80013d8:	80010680 	call	8001068 <UsbWrite>
}
 80013dc:	e037883a 	mov	sp,fp
 80013e0:	dfc00117 	ldw	ra,4(sp)
 80013e4:	df000017 	ldw	fp,0(sp)
 80013e8:	dec00204 	addi	sp,sp,8
 80013ec:	f800283a 	ret

080013f0 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 80013f0:	defffe04 	addi	sp,sp,-8
 80013f4:	dfc00115 	stw	ra,4(sp)
 80013f8:	df000015 	stw	fp,0(sp)
 80013fc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001400:	01000084 	movi	r4,2
 8001404:	01414004 	movi	r5,1280
 8001408:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 800140c:	0009883a 	mov	r4,zero
 8001410:	01414304 	movi	r5,1292
 8001414:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001418:	0009883a 	mov	r4,zero
 800141c:	01400204 	movi	r5,8
 8001420:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001424:	0009883a 	mov	r4,zero
 8001428:	0140b404 	movi	r5,720
 800142c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001430:	0009883a 	mov	r4,zero
 8001434:	01400044 	movi	r5,1
 8001438:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 800143c:	0009883a 	mov	r4,zero
 8001440:	014004c4 	movi	r5,19
 8001444:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001448:	0009883a 	mov	r4,zero
 800144c:	01414504 	movi	r5,1300
 8001450:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001454:	0009883a 	mov	r4,zero
 8001458:	0141a004 	movi	r5,1664
 800145c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 8001460:	0009883a 	mov	r4,zero
 8001464:	01404004 	movi	r5,256
 8001468:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 800146c:	0009883a 	mov	r4,zero
 8001470:	000b883a 	mov	r5,zero
 8001474:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 8001478:	0009883a 	mov	r4,zero
 800147c:	01400484 	movi	r5,18
 8001480:	80002480 	call	8000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001484:	0009883a 	mov	r4,zero
 8001488:	01415104 	movi	r5,1348
 800148c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001490:	0009883a 	mov	r4,zero
 8001494:	01400204 	movi	r5,8
 8001498:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 800149c:	0009883a 	mov	r4,zero
 80014a0:	0140a404 	movi	r5,656
 80014a4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80014a8:	0009883a 	mov	r4,zero
 80014ac:	01401044 	movi	r5,65
 80014b0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80014b4:	0009883a 	mov	r4,zero
 80014b8:	014004c4 	movi	r5,19
 80014bc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80014c0:	0009883a 	mov	r4,zero
 80014c4:	01414804 	movi	r5,1312
 80014c8:	80002480 	call	8000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 80014cc:	0009883a 	mov	r4,zero
 80014d0:	01415304 	movi	r5,1356
 80014d4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 80014d8:	0009883a 	mov	r4,zero
 80014dc:	01400204 	movi	r5,8
 80014e0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 80014e4:	0009883a 	mov	r4,zero
 80014e8:	0140a404 	movi	r5,656
 80014ec:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 80014f0:	0009883a 	mov	r4,zero
 80014f4:	01400044 	movi	r5,1
 80014f8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 80014fc:	0009883a 	mov	r4,zero
 8001500:	014004c4 	movi	r5,19
 8001504:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001508:	0009883a 	mov	r4,zero
 800150c:	01414b04 	movi	r5,1324
 8001510:	80002480 	call	8000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 8001514:	0009883a 	mov	r4,zero
 8001518:	01415504 	movi	r5,1364
 800151c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 8001520:	0009883a 	mov	r4,zero
 8001524:	01400084 	movi	r5,2
 8001528:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 800152c:	0009883a 	mov	r4,zero
 8001530:	0140a404 	movi	r5,656
 8001534:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001538:	0009883a 	mov	r4,zero
 800153c:	01401044 	movi	r5,65
 8001540:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001544:	0009883a 	mov	r4,zero
 8001548:	014004c4 	movi	r5,19
 800154c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8001550:	0009883a 	mov	r4,zero
 8001554:	01414e04 	movi	r5,1336
 8001558:	80002480 	call	8000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 800155c:	0009883a 	mov	r4,zero
 8001560:	000b883a 	mov	r5,zero
 8001564:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 8001568:	0009883a 	mov	r4,zero
 800156c:	000b883a 	mov	r5,zero
 8001570:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 8001574:	0009883a 	mov	r4,zero
 8001578:	01408404 	movi	r5,528
 800157c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 8001580:	0009883a 	mov	r4,zero
 8001584:	01401044 	movi	r5,65
 8001588:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 800158c:	0009883a 	mov	r4,zero
 8001590:	014004c4 	movi	r5,19
 8001594:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 8001598:	0009883a 	mov	r4,zero
 800159c:	000b883a 	mov	r5,zero
 80015a0:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80015a4:	01006c04 	movi	r4,432
 80015a8:	01414004 	movi	r5,1280
 80015ac:	80010680 	call	8001068 <UsbWrite>
}
 80015b0:	e037883a 	mov	sp,fp
 80015b4:	dfc00117 	ldw	ra,4(sp)
 80015b8:	df000017 	ldw	fp,0(sp)
 80015bc:	dec00204 	addi	sp,sp,8
 80015c0:	f800283a 	ret

080015c4 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 80015c4:	defffe04 	addi	sp,sp,-8
 80015c8:	dfc00115 	stw	ra,4(sp)
 80015cc:	df000015 	stw	fp,0(sp)
 80015d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80015d4:	01000084 	movi	r4,2
 80015d8:	01414004 	movi	r5,1280
 80015dc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80015e0:	0009883a 	mov	r4,zero
 80015e4:	01414304 	movi	r5,1292
 80015e8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80015ec:	0009883a 	mov	r4,zero
 80015f0:	01400204 	movi	r5,8
 80015f4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80015f8:	0009883a 	mov	r4,zero
 80015fc:	0140b404 	movi	r5,720
 8001600:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001604:	0009883a 	mov	r4,zero
 8001608:	01400044 	movi	r5,1
 800160c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001610:	0009883a 	mov	r4,zero
 8001614:	014004c4 	movi	r5,19
 8001618:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 800161c:	0009883a 	mov	r4,zero
 8001620:	01414504 	movi	r5,1300
 8001624:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001628:	0009883a 	mov	r4,zero
 800162c:	0141a004 	movi	r5,1664
 8001630:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 8001634:	0009883a 	mov	r4,zero
 8001638:	01408004 	movi	r5,512
 800163c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001640:	0009883a 	mov	r4,zero
 8001644:	000b883a 	mov	r5,zero
 8001648:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 800164c:	0009883a 	mov	r4,zero
 8001650:	01400244 	movi	r5,9
 8001654:	80002480 	call	8000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001658:	0009883a 	mov	r4,zero
 800165c:	01415104 	movi	r5,1348
 8001660:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001664:	0009883a 	mov	r4,zero
 8001668:	01400204 	movi	r5,8
 800166c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001670:	0009883a 	mov	r4,zero
 8001674:	0140a404 	movi	r5,656
 8001678:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 800167c:	0009883a 	mov	r4,zero
 8001680:	01401044 	movi	r5,65
 8001684:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001688:	0009883a 	mov	r4,zero
 800168c:	014004c4 	movi	r5,19
 8001690:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001694:	0009883a 	mov	r4,zero
 8001698:	01414804 	movi	r5,1312
 800169c:	80002480 	call	8000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 80016a0:	0009883a 	mov	r4,zero
 80016a4:	01415304 	movi	r5,1356
 80016a8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 80016ac:	0009883a 	mov	r4,zero
 80016b0:	01400044 	movi	r5,1
 80016b4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 80016b8:	0009883a 	mov	r4,zero
 80016bc:	0140a404 	movi	r5,656
 80016c0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 80016c4:	0009883a 	mov	r4,zero
 80016c8:	01400044 	movi	r5,1
 80016cc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 80016d0:	0009883a 	mov	r4,zero
 80016d4:	014004c4 	movi	r5,19
 80016d8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 80016dc:	0009883a 	mov	r4,zero
 80016e0:	01414b04 	movi	r5,1324
 80016e4:	80002480 	call	8000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 80016e8:	0009883a 	mov	r4,zero
 80016ec:	000b883a 	mov	r5,zero
 80016f0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 80016f4:	0009883a 	mov	r4,zero
 80016f8:	000b883a 	mov	r5,zero
 80016fc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 8001700:	0009883a 	mov	r4,zero
 8001704:	01408404 	movi	r5,528
 8001708:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 800170c:	0009883a 	mov	r4,zero
 8001710:	01401044 	movi	r5,65
 8001714:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001718:	0009883a 	mov	r4,zero
 800171c:	014004c4 	movi	r5,19
 8001720:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001724:	0009883a 	mov	r4,zero
 8001728:	000b883a 	mov	r5,zero
 800172c:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001730:	01006c04 	movi	r4,432
 8001734:	01414004 	movi	r5,1280
 8001738:	80010680 	call	8001068 <UsbWrite>
}
 800173c:	e037883a 	mov	sp,fp
 8001740:	dfc00117 	ldw	ra,4(sp)
 8001744:	df000017 	ldw	fp,0(sp)
 8001748:	dec00204 	addi	sp,sp,8
 800174c:	f800283a 	ret

08001750 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 8001750:	defffe04 	addi	sp,sp,-8
 8001754:	dfc00115 	stw	ra,4(sp)
 8001758:	df000015 	stw	fp,0(sp)
 800175c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001760:	01000084 	movi	r4,2
 8001764:	01414004 	movi	r5,1280
 8001768:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 800176c:	0009883a 	mov	r4,zero
 8001770:	01414304 	movi	r5,1292
 8001774:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001778:	0009883a 	mov	r4,zero
 800177c:	01400204 	movi	r5,8
 8001780:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001784:	0009883a 	mov	r4,zero
 8001788:	0140b404 	movi	r5,720
 800178c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001790:	0009883a 	mov	r4,zero
 8001794:	01400044 	movi	r5,1
 8001798:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 800179c:	0009883a 	mov	r4,zero
 80017a0:	014004c4 	movi	r5,19
 80017a4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 80017a8:	0009883a 	mov	r4,zero
 80017ac:	01414504 	movi	r5,1300
 80017b0:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 80017b4:	0009883a 	mov	r4,zero
 80017b8:	0141a004 	movi	r5,1664
 80017bc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 80017c0:	0009883a 	mov	r4,zero
 80017c4:	01408004 	movi	r5,512
 80017c8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 80017cc:	0009883a 	mov	r4,zero
 80017d0:	000b883a 	mov	r5,zero
 80017d4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 80017d8:	0009883a 	mov	r4,zero
 80017dc:	01403fc4 	movi	r5,255
 80017e0:	80002480 	call	8000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 80017e4:	0009883a 	mov	r4,zero
 80017e8:	01415704 	movi	r5,1372
 80017ec:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 80017f0:	0009883a 	mov	r4,zero
 80017f4:	01400204 	movi	r5,8
 80017f8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80017fc:	0009883a 	mov	r4,zero
 8001800:	0140a404 	movi	r5,656
 8001804:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001808:	0009883a 	mov	r4,zero
 800180c:	01401044 	movi	r5,65
 8001810:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001814:	0009883a 	mov	r4,zero
 8001818:	014004c4 	movi	r5,19
 800181c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001820:	0009883a 	mov	r4,zero
 8001824:	01414804 	movi	r5,1312
 8001828:	80002480 	call	8000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 800182c:	0009883a 	mov	r4,zero
 8001830:	01415904 	movi	r5,1380
 8001834:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001838:	0009883a 	mov	r4,zero
 800183c:	01400204 	movi	r5,8
 8001840:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001844:	0009883a 	mov	r4,zero
 8001848:	0140a404 	movi	r5,656
 800184c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001850:	0009883a 	mov	r4,zero
 8001854:	01400044 	movi	r5,1
 8001858:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 800185c:	0009883a 	mov	r4,zero
 8001860:	014004c4 	movi	r5,19
 8001864:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001868:	0009883a 	mov	r4,zero
 800186c:	01414b04 	movi	r5,1324
 8001870:	80002480 	call	8000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 8001874:	0009883a 	mov	r4,zero
 8001878:	01415b04 	movi	r5,1388
 800187c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001880:	0009883a 	mov	r4,zero
 8001884:	01400204 	movi	r5,8
 8001888:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 800188c:	0009883a 	mov	r4,zero
 8001890:	0140a404 	movi	r5,656
 8001894:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001898:	0009883a 	mov	r4,zero
 800189c:	01401044 	movi	r5,65
 80018a0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 80018a4:	0009883a 	mov	r4,zero
 80018a8:	014004c4 	movi	r5,19
 80018ac:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 80018b0:	0009883a 	mov	r4,zero
 80018b4:	01414e04 	movi	r5,1336
 80018b8:	80002480 	call	8000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 80018bc:	0009883a 	mov	r4,zero
 80018c0:	01415d04 	movi	r5,1396
 80018c4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 80018c8:	0009883a 	mov	r4,zero
 80018cc:	01400204 	movi	r5,8
 80018d0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 80018d4:	0009883a 	mov	r4,zero
 80018d8:	0140a404 	movi	r5,656
 80018dc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 80018e0:	0009883a 	mov	r4,zero
 80018e4:	01400044 	movi	r5,1
 80018e8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 80018ec:	0009883a 	mov	r4,zero
 80018f0:	014004c4 	movi	r5,19
 80018f4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 80018f8:	0009883a 	mov	r4,zero
 80018fc:	01415104 	movi	r5,1348
 8001900:	80002480 	call	8000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 8001904:	0009883a 	mov	r4,zero
 8001908:	01415f04 	movi	r5,1404
 800190c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 8001910:	0009883a 	mov	r4,zero
 8001914:	01400084 	movi	r5,2
 8001918:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 800191c:	0009883a 	mov	r4,zero
 8001920:	0140a404 	movi	r5,656
 8001924:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8001928:	0009883a 	mov	r4,zero
 800192c:	01401044 	movi	r5,65
 8001930:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001934:	0009883a 	mov	r4,zero
 8001938:	014004c4 	movi	r5,19
 800193c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 8001940:	0009883a 	mov	r4,zero
 8001944:	01415404 	movi	r5,1360
 8001948:	80002480 	call	8000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 800194c:	0009883a 	mov	r4,zero
 8001950:	000b883a 	mov	r5,zero
 8001954:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 8001958:	0009883a 	mov	r4,zero
 800195c:	000b883a 	mov	r5,zero
 8001960:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 8001964:	0009883a 	mov	r4,zero
 8001968:	01408404 	movi	r5,528
 800196c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 8001970:	0009883a 	mov	r4,zero
 8001974:	01401044 	movi	r5,65
 8001978:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 800197c:	0009883a 	mov	r4,zero
 8001980:	014004c4 	movi	r5,19
 8001984:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 8001988:	0009883a 	mov	r4,zero
 800198c:	000b883a 	mov	r5,zero
 8001990:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001994:	01006c04 	movi	r4,432
 8001998:	01414004 	movi	r5,1280
 800199c:	80010680 	call	8001068 <UsbWrite>
}
 80019a0:	e037883a 	mov	sp,fp
 80019a4:	dfc00117 	ldw	ra,4(sp)
 80019a8:	df000017 	ldw	fp,0(sp)
 80019ac:	dec00204 	addi	sp,sp,8
 80019b0:	f800283a 	ret

080019b4 <UsbSetConfig>:

void UsbSetConfig()
{
 80019b4:	defffe04 	addi	sp,sp,-8
 80019b8:	dfc00115 	stw	ra,4(sp)
 80019bc:	df000015 	stw	fp,0(sp)
 80019c0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80019c4:	01000084 	movi	r4,2
 80019c8:	01414004 	movi	r5,1280
 80019cc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80019d0:	0009883a 	mov	r4,zero
 80019d4:	01414304 	movi	r5,1292
 80019d8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80019dc:	0009883a 	mov	r4,zero
 80019e0:	01400204 	movi	r5,8
 80019e4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 80019e8:	0009883a 	mov	r4,zero
 80019ec:	0140b404 	movi	r5,720
 80019f0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80019f4:	0009883a 	mov	r4,zero
 80019f8:	01400044 	movi	r5,1
 80019fc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001a00:	0009883a 	mov	r4,zero
 8001a04:	014004c4 	movi	r5,19
 8001a08:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001a0c:	0009883a 	mov	r4,zero
 8001a10:	01414504 	movi	r5,1300
 8001a14:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 8001a18:	0009883a 	mov	r4,zero
 8001a1c:	01424004 	movi	r5,2304
 8001a20:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 8001a24:	0009883a 	mov	r4,zero
 8001a28:	01400044 	movi	r5,1
 8001a2c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001a30:	0009883a 	mov	r4,zero
 8001a34:	000b883a 	mov	r5,zero
 8001a38:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001a3c:	0009883a 	mov	r4,zero
 8001a40:	000b883a 	mov	r5,zero
 8001a44:	80002480 	call	8000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001a48:	0009883a 	mov	r4,zero
 8001a4c:	000b883a 	mov	r5,zero
 8001a50:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 8001a54:	0009883a 	mov	r4,zero
 8001a58:	000b883a 	mov	r5,zero
 8001a5c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001a60:	0009883a 	mov	r4,zero
 8001a64:	0140a404 	movi	r5,656
 8001a68:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001a6c:	0009883a 	mov	r4,zero
 8001a70:	01401044 	movi	r5,65
 8001a74:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001a78:	0009883a 	mov	r4,zero
 8001a7c:	014004c4 	movi	r5,19
 8001a80:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001a84:	0009883a 	mov	r4,zero
 8001a88:	000b883a 	mov	r5,zero
 8001a8c:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001a90:	01006c04 	movi	r4,432
 8001a94:	01414004 	movi	r5,1280
 8001a98:	80010680 	call	8001068 <UsbWrite>

}
 8001a9c:	e037883a 	mov	sp,fp
 8001aa0:	dfc00117 	ldw	ra,4(sp)
 8001aa4:	df000017 	ldw	fp,0(sp)
 8001aa8:	dec00204 	addi	sp,sp,8
 8001aac:	f800283a 	ret

08001ab0 <UsbClassRequest>:

void UsbClassRequest()
{
 8001ab0:	defffe04 	addi	sp,sp,-8
 8001ab4:	dfc00115 	stw	ra,4(sp)
 8001ab8:	df000015 	stw	fp,0(sp)
 8001abc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001ac0:	01000084 	movi	r4,2
 8001ac4:	01414004 	movi	r5,1280
 8001ac8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001acc:	0009883a 	mov	r4,zero
 8001ad0:	01414304 	movi	r5,1292
 8001ad4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001ad8:	0009883a 	mov	r4,zero
 8001adc:	01400204 	movi	r5,8
 8001ae0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001ae4:	0009883a 	mov	r4,zero
 8001ae8:	0140b404 	movi	r5,720
 8001aec:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001af0:	0009883a 	mov	r4,zero
 8001af4:	01400044 	movi	r5,1
 8001af8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001afc:	0009883a 	mov	r4,zero
 8001b00:	014004c4 	movi	r5,19
 8001b04:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001b08:	0009883a 	mov	r4,zero
 8001b0c:	01414504 	movi	r5,1300
 8001b10:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 8001b14:	0009883a 	mov	r4,zero
 8001b18:	01428844 	movi	r5,2593
 8001b1c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 8001b20:	0009883a 	mov	r4,zero
 8001b24:	000b883a 	mov	r5,zero
 8001b28:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b2c:	0009883a 	mov	r4,zero
 8001b30:	000b883a 	mov	r5,zero
 8001b34:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b38:	0009883a 	mov	r4,zero
 8001b3c:	000b883a 	mov	r5,zero
 8001b40:	80002480 	call	8000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001b44:	0009883a 	mov	r4,zero
 8001b48:	000b883a 	mov	r5,zero
 8001b4c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 8001b50:	0009883a 	mov	r4,zero
 8001b54:	000b883a 	mov	r5,zero
 8001b58:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001b5c:	0009883a 	mov	r4,zero
 8001b60:	0140a404 	movi	r5,656
 8001b64:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001b68:	0009883a 	mov	r4,zero
 8001b6c:	01401044 	movi	r5,65
 8001b70:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001b74:	0009883a 	mov	r4,zero
 8001b78:	014004c4 	movi	r5,19
 8001b7c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b80:	0009883a 	mov	r4,zero
 8001b84:	000b883a 	mov	r5,zero
 8001b88:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001b8c:	01006c04 	movi	r4,432
 8001b90:	01414004 	movi	r5,1280
 8001b94:	80010680 	call	8001068 <UsbWrite>
}
 8001b98:	e037883a 	mov	sp,fp
 8001b9c:	dfc00117 	ldw	ra,4(sp)
 8001ba0:	df000017 	ldw	fp,0(sp)
 8001ba4:	dec00204 	addi	sp,sp,8
 8001ba8:	f800283a 	ret

08001bac <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8001bac:	defffe04 	addi	sp,sp,-8
 8001bb0:	dfc00115 	stw	ra,4(sp)
 8001bb4:	df000015 	stw	fp,0(sp)
 8001bb8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001bbc:	01000084 	movi	r4,2
 8001bc0:	01414004 	movi	r5,1280
 8001bc4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001bc8:	0009883a 	mov	r4,zero
 8001bcc:	01414304 	movi	r5,1292
 8001bd0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001bd4:	0009883a 	mov	r4,zero
 8001bd8:	01400204 	movi	r5,8
 8001bdc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001be0:	0009883a 	mov	r4,zero
 8001be4:	0140b404 	movi	r5,720
 8001be8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001bec:	0009883a 	mov	r4,zero
 8001bf0:	01400044 	movi	r5,1
 8001bf4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001bf8:	0009883a 	mov	r4,zero
 8001bfc:	014004c4 	movi	r5,19
 8001c00:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001c04:	0009883a 	mov	r4,zero
 8001c08:	01414504 	movi	r5,1300
 8001c0c:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001c10:	0009883a 	mov	r4,zero
 8001c14:	0141a044 	movi	r5,1665
 8001c18:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 8001c1c:	0009883a 	mov	r4,zero
 8001c20:	01484004 	movi	r5,8448
 8001c24:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001c28:	0009883a 	mov	r4,zero
 8001c2c:	000b883a 	mov	r5,zero
 8001c30:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001c34:	0009883a 	mov	r4,zero
 8001c38:	01401ec4 	movi	r5,123
 8001c3c:	80002480 	call	8000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001c40:	0009883a 	mov	r4,zero
 8001c44:	01415104 	movi	r5,1348
 8001c48:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001c4c:	0009883a 	mov	r4,zero
 8001c50:	01400204 	movi	r5,8
 8001c54:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001c58:	0009883a 	mov	r4,zero
 8001c5c:	0140a404 	movi	r5,656
 8001c60:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001c64:	0009883a 	mov	r4,zero
 8001c68:	01401044 	movi	r5,65
 8001c6c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001c70:	0009883a 	mov	r4,zero
 8001c74:	014004c4 	movi	r5,19
 8001c78:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001c7c:	0009883a 	mov	r4,zero
 8001c80:	01414804 	movi	r5,1312
 8001c84:	80002480 	call	8000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8001c88:	0009883a 	mov	r4,zero
 8001c8c:	000b883a 	mov	r5,zero
 8001c90:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8001c94:	0009883a 	mov	r4,zero
 8001c98:	000b883a 	mov	r5,zero
 8001c9c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 8001ca0:	0009883a 	mov	r4,zero
 8001ca4:	01408404 	movi	r5,528
 8001ca8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001cac:	0009883a 	mov	r4,zero
 8001cb0:	01401044 	movi	r5,65
 8001cb4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001cb8:	0009883a 	mov	r4,zero
 8001cbc:	014004c4 	movi	r5,19
 8001cc0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001cc4:	0009883a 	mov	r4,zero
 8001cc8:	000b883a 	mov	r5,zero
 8001ccc:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001cd0:	01006c04 	movi	r4,432
 8001cd4:	01414004 	movi	r5,1280
 8001cd8:	80010680 	call	8001068 <UsbWrite>

}
 8001cdc:	e037883a 	mov	sp,fp
 8001ce0:	dfc00117 	ldw	ra,4(sp)
 8001ce4:	df000017 	ldw	fp,0(sp)
 8001ce8:	dec00204 	addi	sp,sp,8
 8001cec:	f800283a 	ret

08001cf0 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 8001cf0:	defffe04 	addi	sp,sp,-8
 8001cf4:	dfc00115 	stw	ra,4(sp)
 8001cf8:	df000015 	stw	fp,0(sp)
 8001cfc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001d00:	01000084 	movi	r4,2
 8001d04:	01414004 	movi	r5,1280
 8001d08:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001d0c:	0009883a 	mov	r4,zero
 8001d10:	01414304 	movi	r5,1292
 8001d14:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001d18:	0009883a 	mov	r4,zero
 8001d1c:	01400204 	movi	r5,8
 8001d20:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001d24:	0009883a 	mov	r4,zero
 8001d28:	0140b404 	movi	r5,720
 8001d2c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001d30:	0009883a 	mov	r4,zero
 8001d34:	01400044 	movi	r5,1
 8001d38:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001d3c:	0009883a 	mov	r4,zero
 8001d40:	014004c4 	movi	r5,19
 8001d44:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001d48:	0009883a 	mov	r4,zero
 8001d4c:	01414504 	movi	r5,1300
 8001d50:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001d54:	0009883a 	mov	r4,zero
 8001d58:	0141a044 	movi	r5,1665
 8001d5c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 8001d60:	0009883a 	mov	r4,zero
 8001d64:	01488004 	movi	r5,8704
 8001d68:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001d6c:	0009883a 	mov	r4,zero
 8001d70:	000b883a 	mov	r5,zero
 8001d74:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001d78:	0009883a 	mov	r4,zero
 8001d7c:	01401ec4 	movi	r5,123
 8001d80:	80002480 	call	8000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 8001d84:	0009883a 	mov	r4,zero
 8001d88:	01416004 	movi	r5,1408
 8001d8c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001d90:	0009883a 	mov	r4,zero
 8001d94:	01400204 	movi	r5,8
 8001d98:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001d9c:	0009883a 	mov	r4,zero
 8001da0:	0140a404 	movi	r5,656
 8001da4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001da8:	0009883a 	mov	r4,zero
 8001dac:	01401044 	movi	r5,65
 8001db0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001db4:	0009883a 	mov	r4,zero
 8001db8:	014004c4 	movi	r5,19
 8001dbc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001dc0:	0009883a 	mov	r4,zero
 8001dc4:	01414804 	movi	r5,1312
 8001dc8:	80002480 	call	8000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 8001dcc:	0009883a 	mov	r4,zero
 8001dd0:	01416204 	movi	r5,1416
 8001dd4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001dd8:	0009883a 	mov	r4,zero
 8001ddc:	01400204 	movi	r5,8
 8001de0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001de4:	0009883a 	mov	r4,zero
 8001de8:	0140a404 	movi	r5,656
 8001dec:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001df0:	0009883a 	mov	r4,zero
 8001df4:	01400044 	movi	r5,1
 8001df8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001dfc:	0009883a 	mov	r4,zero
 8001e00:	014004c4 	movi	r5,19
 8001e04:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001e08:	0009883a 	mov	r4,zero
 8001e0c:	01414b04 	movi	r5,1324
 8001e10:	80002480 	call	8000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 8001e14:	0009883a 	mov	r4,zero
 8001e18:	01416404 	movi	r5,1424
 8001e1c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001e20:	0009883a 	mov	r4,zero
 8001e24:	01400204 	movi	r5,8
 8001e28:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001e2c:	0009883a 	mov	r4,zero
 8001e30:	0140a404 	movi	r5,656
 8001e34:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001e38:	0009883a 	mov	r4,zero
 8001e3c:	01401044 	movi	r5,65
 8001e40:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001e44:	0009883a 	mov	r4,zero
 8001e48:	014004c4 	movi	r5,19
 8001e4c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8001e50:	0009883a 	mov	r4,zero
 8001e54:	01414e04 	movi	r5,1336
 8001e58:	80002480 	call	8000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 8001e5c:	0009883a 	mov	r4,zero
 8001e60:	01416604 	movi	r5,1432
 8001e64:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8001e68:	0009883a 	mov	r4,zero
 8001e6c:	01400204 	movi	r5,8
 8001e70:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001e74:	0009883a 	mov	r4,zero
 8001e78:	0140a404 	movi	r5,656
 8001e7c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8001e80:	0009883a 	mov	r4,zero
 8001e84:	01400044 	movi	r5,1
 8001e88:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001e8c:	0009883a 	mov	r4,zero
 8001e90:	014004c4 	movi	r5,19
 8001e94:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 8001e98:	0009883a 	mov	r4,zero
 8001e9c:	01415104 	movi	r5,1348
 8001ea0:	80002480 	call	8000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 8001ea4:	0009883a 	mov	r4,zero
 8001ea8:	01416804 	movi	r5,1440
 8001eac:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001eb0:	0009883a 	mov	r4,zero
 8001eb4:	01400204 	movi	r5,8
 8001eb8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001ebc:	0009883a 	mov	r4,zero
 8001ec0:	0140a404 	movi	r5,656
 8001ec4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8001ec8:	0009883a 	mov	r4,zero
 8001ecc:	01401044 	movi	r5,65
 8001ed0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001ed4:	0009883a 	mov	r4,zero
 8001ed8:	014004c4 	movi	r5,19
 8001edc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 8001ee0:	0009883a 	mov	r4,zero
 8001ee4:	01415404 	movi	r5,1360
 8001ee8:	80002480 	call	8000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 8001eec:	0009883a 	mov	r4,zero
 8001ef0:	01416a04 	movi	r5,1448
 8001ef4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001ef8:	0009883a 	mov	r4,zero
 8001efc:	01400204 	movi	r5,8
 8001f00:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001f04:	0009883a 	mov	r4,zero
 8001f08:	0140a404 	movi	r5,656
 8001f0c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001f10:	0009883a 	mov	r4,zero
 8001f14:	01400044 	movi	r5,1
 8001f18:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001f1c:	0009883a 	mov	r4,zero
 8001f20:	014004c4 	movi	r5,19
 8001f24:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 8001f28:	0009883a 	mov	r4,zero
 8001f2c:	01415704 	movi	r5,1372
 8001f30:	80002480 	call	8000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 8001f34:	0009883a 	mov	r4,zero
 8001f38:	01416c04 	movi	r5,1456
 8001f3c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001f40:	0009883a 	mov	r4,zero
 8001f44:	01400204 	movi	r5,8
 8001f48:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 8001f4c:	0009883a 	mov	r4,zero
 8001f50:	0140a404 	movi	r5,656
 8001f54:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 8001f58:	0009883a 	mov	r4,zero
 8001f5c:	01401044 	movi	r5,65
 8001f60:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001f64:	0009883a 	mov	r4,zero
 8001f68:	014004c4 	movi	r5,19
 8001f6c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 8001f70:	0009883a 	mov	r4,zero
 8001f74:	01415a04 	movi	r5,1384
 8001f78:	80002480 	call	8000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 8001f7c:	0009883a 	mov	r4,zero
 8001f80:	01416e04 	movi	r5,1464
 8001f84:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 8001f88:	0009883a 	mov	r4,zero
 8001f8c:	014000c4 	movi	r5,3
 8001f90:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001f94:	0009883a 	mov	r4,zero
 8001f98:	0140a404 	movi	r5,656
 8001f9c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8001fa0:	0009883a 	mov	r4,zero
 8001fa4:	01400044 	movi	r5,1
 8001fa8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 8001fac:	0009883a 	mov	r4,zero
 8001fb0:	014004c4 	movi	r5,19
 8001fb4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 8001fb8:	0009883a 	mov	r4,zero
 8001fbc:	01415d04 	movi	r5,1396
 8001fc0:	80002480 	call	8000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 8001fc4:	0009883a 	mov	r4,zero
 8001fc8:	000b883a 	mov	r5,zero
 8001fcc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001fd0:	0009883a 	mov	r4,zero
 8001fd4:	000b883a 	mov	r5,zero
 8001fd8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 8001fdc:	0009883a 	mov	r4,zero
 8001fe0:	01408404 	movi	r5,528
 8001fe4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001fe8:	0009883a 	mov	r4,zero
 8001fec:	01401044 	movi	r5,65
 8001ff0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001ff4:	0009883a 	mov	r4,zero
 8001ff8:	014004c4 	movi	r5,19
 8001ffc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8002000:	0009883a 	mov	r4,zero
 8002004:	000b883a 	mov	r5,zero
 8002008:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 800200c:	01006c04 	movi	r4,432
 8002010:	01414004 	movi	r5,1280
 8002014:	80010680 	call	8001068 <UsbWrite>

}
 8002018:	e037883a 	mov	sp,fp
 800201c:	dfc00117 	ldw	ra,4(sp)
 8002020:	df000017 	ldw	fp,0(sp)
 8002024:	dec00204 	addi	sp,sp,8
 8002028:	f800283a 	ret

0800202c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 800202c:	defffd04 	addi	sp,sp,-12
 8002030:	dfc00215 	stw	ra,8(sp)
 8002034:	df000115 	stw	fp,4(sp)
 8002038:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 800203c:	01005104 	movi	r4,324
 8002040:	80010bc0 	call	80010bc <UsbRead>
 8002044:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002048:	01005104 	movi	r4,324
 800204c:	000b883a 	mov	r5,zero
 8002050:	80010680 	call	8001068 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8002054:	00000d06 	br	800208c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 8002058:	e0bfff0b 	ldhu	r2,-4(fp)
 800205c:	10000526 	beq	r2,zero,8002074 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 8002060:	e0bfff0b 	ldhu	r2,-4(fp)
 8002064:	01020074 	movhi	r4,2049
 8002068:	2106a604 	addi	r4,r4,6808
 800206c:	100b883a 	mov	r5,r2
 8002070:	80021d80 	call	80021d8 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 8002074:	01005104 	movi	r4,324
 8002078:	80010bc0 	call	80010bc <UsbRead>
 800207c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002080:	01005104 	movi	r4,324
 8002084:	000b883a 	mov	r5,zero
 8002088:	80010680 	call	8001068 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 800208c:	e0bfff0b 	ldhu	r2,-4(fp)
 8002090:	10840018 	cmpnei	r2,r2,4096
 8002094:	103ff01e 	bne	r2,zero,8002058 <__alt_data_end+0xfc002058>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 8002098:	e0bfff0b 	ldhu	r2,-4(fp)
}
 800209c:	e037883a 	mov	sp,fp
 80020a0:	dfc00117 	ldw	ra,4(sp)
 80020a4:	df000017 	ldw	fp,0(sp)
 80020a8:	dec00204 	addi	sp,sp,8
 80020ac:	f800283a 	ret

080020b0 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 80020b0:	defffd04 	addi	sp,sp,-12
 80020b4:	dfc00215 	stw	ra,8(sp)
 80020b8:	df000115 	stw	fp,4(sp)
 80020bc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 80020c0:	010000c4 	movi	r4,3
 80020c4:	80002b40 	call	80002b4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 80020c8:	01005104 	movi	r4,324
 80020cc:	80010bc0 	call	80010bc <UsbRead>
 80020d0:	10bfffcc 	andi	r2,r2,65535
 80020d4:	10840018 	cmpnei	r2,r2,4096
 80020d8:	1000091e 	bne	r2,zero,8002100 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 80020dc:	01005104 	movi	r4,324
 80020e0:	000b883a 	mov	r5,zero
 80020e4:	80010680 	call	8001068 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80020e8:	0001883a 	nop
 80020ec:	010000c4 	movi	r4,3
 80020f0:	80002b40 	call	80002b4 <IO_read>
 80020f4:	10bfffcc 	andi	r2,r2,65535
 80020f8:	1080040c 	andi	r2,r2,16
 80020fc:	103ffb26 	beq	r2,zero,80020ec <__alt_data_end+0xfc0020ec>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 8002100:	01000084 	movi	r4,2
 8002104:	01414204 	movi	r5,1288
 8002108:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 800210c:	0009883a 	mov	r4,zero
 8002110:	80002b40 	call	80002b4 <IO_read>
 8002114:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 8002118:	e0bfff0b 	ldhu	r2,-4(fp)
}
 800211c:	e037883a 	mov	sp,fp
 8002120:	dfc00117 	ldw	ra,4(sp)
 8002124:	df000017 	ldw	fp,0(sp)
 8002128:	dec00204 	addi	sp,sp,8
 800212c:	f800283a 	ret

08002130 <UsbPrintMem>:


void UsbPrintMem()
{
 8002130:	defffc04 	addi	sp,sp,-16
 8002134:	dfc00315 	stw	ra,12(sp)
 8002138:	df000215 	stw	fp,8(sp)
 800213c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 8002140:	01000084 	movi	r4,2
 8002144:	01414004 	movi	r5,1280
 8002148:	80002480 	call	8000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
 800214c:	e03ffe15 	stw	zero,-8(fp)
 8002150:	00000e06 	br	800218c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 8002154:	0009883a 	mov	r4,zero
 8002158:	80002b40 	call	80002b4 <IO_read>
 800215c:	10bfffcc 	andi	r2,r2,65535
 8002160:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 8002164:	e0bffe17 	ldw	r2,-8(fp)
 8002168:	10814004 	addi	r2,r2,1280
 800216c:	01020074 	movhi	r4,2049
 8002170:	2106ae04 	addi	r4,r4,6840
 8002174:	100b883a 	mov	r5,r2
 8002178:	e1bfff17 	ldw	r6,-4(fp)
 800217c:	80021d80 	call	80021d8 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 8002180:	e0bffe17 	ldw	r2,-8(fp)
 8002184:	10800084 	addi	r2,r2,2
 8002188:	e0bffe15 	stw	r2,-8(fp)
 800218c:	e0bffe17 	ldw	r2,-8(fp)
 8002190:	10803250 	cmplti	r2,r2,201
 8002194:	103fef1e 	bne	r2,zero,8002154 <__alt_data_end+0xfc002154>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 8002198:	e037883a 	mov	sp,fp
 800219c:	dfc00117 	ldw	ra,4(sp)
 80021a0:	df000017 	ldw	fp,0(sp)
 80021a4:	dec00204 	addi	sp,sp,8
 80021a8:	f800283a 	ret

080021ac <_printf_r>:
 80021ac:	defffd04 	addi	sp,sp,-12
 80021b0:	dfc00015 	stw	ra,0(sp)
 80021b4:	d9800115 	stw	r6,4(sp)
 80021b8:	d9c00215 	stw	r7,8(sp)
 80021bc:	280d883a 	mov	r6,r5
 80021c0:	21400217 	ldw	r5,8(r4)
 80021c4:	d9c00104 	addi	r7,sp,4
 80021c8:	80023780 	call	8002378 <___vfprintf_internal_r>
 80021cc:	dfc00017 	ldw	ra,0(sp)
 80021d0:	dec00304 	addi	sp,sp,12
 80021d4:	f800283a 	ret

080021d8 <printf>:
 80021d8:	defffc04 	addi	sp,sp,-16
 80021dc:	dfc00015 	stw	ra,0(sp)
 80021e0:	d9400115 	stw	r5,4(sp)
 80021e4:	d9800215 	stw	r6,8(sp)
 80021e8:	d9c00315 	stw	r7,12(sp)
 80021ec:	00820074 	movhi	r2,2049
 80021f0:	108e1f04 	addi	r2,r2,14460
 80021f4:	10800017 	ldw	r2,0(r2)
 80021f8:	200b883a 	mov	r5,r4
 80021fc:	d9800104 	addi	r6,sp,4
 8002200:	11000217 	ldw	r4,8(r2)
 8002204:	80044740 	call	8004474 <__vfprintf_internal>
 8002208:	dfc00017 	ldw	ra,0(sp)
 800220c:	dec00404 	addi	sp,sp,16
 8002210:	f800283a 	ret

08002214 <_puts_r>:
 8002214:	defff604 	addi	sp,sp,-40
 8002218:	dc000715 	stw	r16,28(sp)
 800221c:	2021883a 	mov	r16,r4
 8002220:	2809883a 	mov	r4,r5
 8002224:	dc400815 	stw	r17,32(sp)
 8002228:	dfc00915 	stw	ra,36(sp)
 800222c:	2823883a 	mov	r17,r5
 8002230:	80022e00 	call	80022e0 <strlen>
 8002234:	00c20074 	movhi	r3,2049
 8002238:	18ce1f04 	addi	r3,r3,14460
 800223c:	18c00017 	ldw	r3,0(r3)
 8002240:	11000044 	addi	r4,r2,1
 8002244:	d8800115 	stw	r2,4(sp)
 8002248:	18c00217 	ldw	r3,8(r3)
 800224c:	01420074 	movhi	r5,2049
 8002250:	2946b304 	addi	r5,r5,6860
 8002254:	1880030b 	ldhu	r2,12(r3)
 8002258:	d9400215 	stw	r5,8(sp)
 800225c:	d9000615 	stw	r4,24(sp)
 8002260:	01400044 	movi	r5,1
 8002264:	01000084 	movi	r4,2
 8002268:	d9000515 	stw	r4,20(sp)
 800226c:	dc400015 	stw	r17,0(sp)
 8002270:	d9400315 	stw	r5,12(sp)
 8002274:	dec00415 	stw	sp,16(sp)
 8002278:	1108000c 	andi	r4,r2,8192
 800227c:	2000061e 	bne	r4,zero,8002298 <_puts_r+0x84>
 8002280:	19401917 	ldw	r5,100(r3)
 8002284:	0137ffc4 	movi	r4,-8193
 8002288:	10880014 	ori	r2,r2,8192
 800228c:	2908703a 	and	r4,r5,r4
 8002290:	1880030d 	sth	r2,12(r3)
 8002294:	19001915 	stw	r4,100(r3)
 8002298:	81400217 	ldw	r5,8(r16)
 800229c:	8009883a 	mov	r4,r16
 80022a0:	d9800404 	addi	r6,sp,16
 80022a4:	80069380 	call	8006938 <__sfvwrite_r>
 80022a8:	1000061e 	bne	r2,zero,80022c4 <_puts_r+0xb0>
 80022ac:	00800284 	movi	r2,10
 80022b0:	dfc00917 	ldw	ra,36(sp)
 80022b4:	dc400817 	ldw	r17,32(sp)
 80022b8:	dc000717 	ldw	r16,28(sp)
 80022bc:	dec00a04 	addi	sp,sp,40
 80022c0:	f800283a 	ret
 80022c4:	00bfffc4 	movi	r2,-1
 80022c8:	003ff906 	br	80022b0 <__alt_data_end+0xfc0022b0>

080022cc <puts>:
 80022cc:	00820074 	movhi	r2,2049
 80022d0:	108e1f04 	addi	r2,r2,14460
 80022d4:	200b883a 	mov	r5,r4
 80022d8:	11000017 	ldw	r4,0(r2)
 80022dc:	80022141 	jmpi	8002214 <_puts_r>

080022e0 <strlen>:
 80022e0:	208000cc 	andi	r2,r4,3
 80022e4:	10002026 	beq	r2,zero,8002368 <strlen+0x88>
 80022e8:	20800007 	ldb	r2,0(r4)
 80022ec:	10002026 	beq	r2,zero,8002370 <strlen+0x90>
 80022f0:	2005883a 	mov	r2,r4
 80022f4:	00000206 	br	8002300 <strlen+0x20>
 80022f8:	10c00007 	ldb	r3,0(r2)
 80022fc:	18001826 	beq	r3,zero,8002360 <strlen+0x80>
 8002300:	10800044 	addi	r2,r2,1
 8002304:	10c000cc 	andi	r3,r2,3
 8002308:	183ffb1e 	bne	r3,zero,80022f8 <__alt_data_end+0xfc0022f8>
 800230c:	10c00017 	ldw	r3,0(r2)
 8002310:	01ffbff4 	movhi	r7,65279
 8002314:	39ffbfc4 	addi	r7,r7,-257
 8002318:	00ca303a 	nor	r5,zero,r3
 800231c:	01a02074 	movhi	r6,32897
 8002320:	19c7883a 	add	r3,r3,r7
 8002324:	31a02004 	addi	r6,r6,-32640
 8002328:	1946703a 	and	r3,r3,r5
 800232c:	1986703a 	and	r3,r3,r6
 8002330:	1800091e 	bne	r3,zero,8002358 <strlen+0x78>
 8002334:	10800104 	addi	r2,r2,4
 8002338:	10c00017 	ldw	r3,0(r2)
 800233c:	19cb883a 	add	r5,r3,r7
 8002340:	00c6303a 	nor	r3,zero,r3
 8002344:	28c6703a 	and	r3,r5,r3
 8002348:	1986703a 	and	r3,r3,r6
 800234c:	183ff926 	beq	r3,zero,8002334 <__alt_data_end+0xfc002334>
 8002350:	00000106 	br	8002358 <strlen+0x78>
 8002354:	10800044 	addi	r2,r2,1
 8002358:	10c00007 	ldb	r3,0(r2)
 800235c:	183ffd1e 	bne	r3,zero,8002354 <__alt_data_end+0xfc002354>
 8002360:	1105c83a 	sub	r2,r2,r4
 8002364:	f800283a 	ret
 8002368:	2005883a 	mov	r2,r4
 800236c:	003fe706 	br	800230c <__alt_data_end+0xfc00230c>
 8002370:	0005883a 	mov	r2,zero
 8002374:	f800283a 	ret

08002378 <___vfprintf_internal_r>:
 8002378:	defeb604 	addi	sp,sp,-1320
 800237c:	dfc14915 	stw	ra,1316(sp)
 8002380:	ddc14715 	stw	r23,1308(sp)
 8002384:	dd814615 	stw	r22,1304(sp)
 8002388:	202f883a 	mov	r23,r4
 800238c:	282d883a 	mov	r22,r5
 8002390:	d9812a15 	stw	r6,1192(sp)
 8002394:	d9c12d15 	stw	r7,1204(sp)
 8002398:	df014815 	stw	fp,1312(sp)
 800239c:	dd414515 	stw	r21,1300(sp)
 80023a0:	dd014415 	stw	r20,1296(sp)
 80023a4:	dcc14315 	stw	r19,1292(sp)
 80023a8:	dc814215 	stw	r18,1288(sp)
 80023ac:	dc414115 	stw	r17,1284(sp)
 80023b0:	dc014015 	stw	r16,1280(sp)
 80023b4:	8006ff80 	call	8006ff8 <_localeconv_r>
 80023b8:	10800017 	ldw	r2,0(r2)
 80023bc:	1009883a 	mov	r4,r2
 80023c0:	d8813515 	stw	r2,1236(sp)
 80023c4:	80022e00 	call	80022e0 <strlen>
 80023c8:	d8813815 	stw	r2,1248(sp)
 80023cc:	b8000226 	beq	r23,zero,80023d8 <___vfprintf_internal_r+0x60>
 80023d0:	b8800e17 	ldw	r2,56(r23)
 80023d4:	10010526 	beq	r2,zero,80027ec <___vfprintf_internal_r+0x474>
 80023d8:	b0c0030b 	ldhu	r3,12(r22)
 80023dc:	1908000c 	andi	r4,r3,8192
 80023e0:	1805883a 	mov	r2,r3
 80023e4:	2000071e 	bne	r4,zero,8002404 <___vfprintf_internal_r+0x8c>
 80023e8:	b1001917 	ldw	r4,100(r22)
 80023ec:	18880014 	ori	r2,r3,8192
 80023f0:	00f7ffc4 	movi	r3,-8193
 80023f4:	20c8703a 	and	r4,r4,r3
 80023f8:	b080030d 	sth	r2,12(r22)
 80023fc:	1007883a 	mov	r3,r2
 8002400:	b1001915 	stw	r4,100(r22)
 8002404:	1100020c 	andi	r4,r2,8
 8002408:	2000a826 	beq	r4,zero,80026ac <___vfprintf_internal_r+0x334>
 800240c:	b1000417 	ldw	r4,16(r22)
 8002410:	2000a626 	beq	r4,zero,80026ac <___vfprintf_internal_r+0x334>
 8002414:	1080068c 	andi	r2,r2,26
 8002418:	01000284 	movi	r4,10
 800241c:	1100ac26 	beq	r2,r4,80026d0 <___vfprintf_internal_r+0x358>
 8002420:	d8c10e04 	addi	r3,sp,1080
 8002424:	d9010dc4 	addi	r4,sp,1079
 8002428:	d9400404 	addi	r5,sp,16
 800242c:	05020074 	movhi	r20,2049
 8002430:	1905c83a 	sub	r2,r3,r4
 8002434:	a506c484 	addi	r20,r20,6930
 8002438:	d8c12815 	stw	r3,1184(sp)
 800243c:	d9012915 	stw	r4,1188(sp)
 8002440:	d9411e15 	stw	r5,1144(sp)
 8002444:	d8012015 	stw	zero,1152(sp)
 8002448:	d8011f15 	stw	zero,1148(sp)
 800244c:	d8013315 	stw	zero,1228(sp)
 8002450:	d8013715 	stw	zero,1244(sp)
 8002454:	d8013915 	stw	zero,1252(sp)
 8002458:	d8013b15 	stw	zero,1260(sp)
 800245c:	d8013a15 	stw	zero,1256(sp)
 8002460:	d8012f15 	stw	zero,1212(sp)
 8002464:	2811883a 	mov	r8,r5
 8002468:	d8813c15 	stw	r2,1264(sp)
 800246c:	d8c12a17 	ldw	r3,1192(sp)
 8002470:	18800007 	ldb	r2,0(r3)
 8002474:	10021326 	beq	r2,zero,8002cc4 <___vfprintf_internal_r+0x94c>
 8002478:	00c00944 	movi	r3,37
 800247c:	dc012a17 	ldw	r16,1192(sp)
 8002480:	10c0021e 	bne	r2,r3,800248c <___vfprintf_internal_r+0x114>
 8002484:	00001606 	br	80024e0 <___vfprintf_internal_r+0x168>
 8002488:	10c08526 	beq	r2,r3,80026a0 <___vfprintf_internal_r+0x328>
 800248c:	84000044 	addi	r16,r16,1
 8002490:	80800007 	ldb	r2,0(r16)
 8002494:	103ffc1e 	bne	r2,zero,8002488 <__alt_data_end+0xfc002488>
 8002498:	d9012a17 	ldw	r4,1192(sp)
 800249c:	8123c83a 	sub	r17,r16,r4
 80024a0:	88000f26 	beq	r17,zero,80024e0 <___vfprintf_internal_r+0x168>
 80024a4:	d8812a17 	ldw	r2,1192(sp)
 80024a8:	d8c12017 	ldw	r3,1152(sp)
 80024ac:	44400115 	stw	r17,4(r8)
 80024b0:	40800015 	stw	r2,0(r8)
 80024b4:	d8811f17 	ldw	r2,1148(sp)
 80024b8:	1c47883a 	add	r3,r3,r17
 80024bc:	d8c12015 	stw	r3,1152(sp)
 80024c0:	10800044 	addi	r2,r2,1
 80024c4:	d8811f15 	stw	r2,1148(sp)
 80024c8:	00c001c4 	movi	r3,7
 80024cc:	1880b516 	blt	r3,r2,80027a4 <___vfprintf_internal_r+0x42c>
 80024d0:	42000204 	addi	r8,r8,8
 80024d4:	d8c12f17 	ldw	r3,1212(sp)
 80024d8:	1c47883a 	add	r3,r3,r17
 80024dc:	d8c12f15 	stw	r3,1212(sp)
 80024e0:	80800007 	ldb	r2,0(r16)
 80024e4:	1000b626 	beq	r2,zero,80027c0 <___vfprintf_internal_r+0x448>
 80024e8:	80800044 	addi	r2,r16,1
 80024ec:	84000047 	ldb	r16,1(r16)
 80024f0:	0027883a 	mov	r19,zero
 80024f4:	0039883a 	mov	fp,zero
 80024f8:	dcc12b05 	stb	r19,1196(sp)
 80024fc:	d8012785 	stb	zero,1182(sp)
 8002500:	027fffc4 	movi	r9,-1
 8002504:	d8012e15 	stw	zero,1208(sp)
 8002508:	04401604 	movi	r17,88
 800250c:	04800244 	movi	r18,9
 8002510:	da012a15 	stw	r8,1192(sp)
 8002514:	e027883a 	mov	r19,fp
 8002518:	17000044 	addi	fp,r2,1
 800251c:	80bff804 	addi	r2,r16,-32
 8002520:	88831236 	bltu	r17,r2,800316c <___vfprintf_internal_r+0xdf4>
 8002524:	100490ba 	slli	r2,r2,2
 8002528:	01020034 	movhi	r4,2048
 800252c:	21094f04 	addi	r4,r4,9532
 8002530:	1105883a 	add	r2,r2,r4
 8002534:	10800017 	ldw	r2,0(r2)
 8002538:	1000683a 	jmp	r2
 800253c:	08003088 	cmpgei	zero,at,194
 8002540:	0800316c 	andhi	zero,at,197
 8002544:	0800316c 	andhi	zero,at,197
 8002548:	080030a4 	muli	zero,at,194
 800254c:	0800316c 	andhi	zero,at,197
 8002550:	0800316c 	andhi	zero,at,197
 8002554:	0800316c 	andhi	zero,at,197
 8002558:	0800316c 	andhi	zero,at,197
 800255c:	0800316c 	andhi	zero,at,197
 8002560:	0800316c 	andhi	zero,at,197
 8002564:	080030b4 	orhi	zero,at,194
 8002568:	080030dc 	xori	zero,at,195
 800256c:	0800316c 	andhi	zero,at,197
 8002570:	080027f8 	rdprs	zero,at,159
 8002574:	08002808 	cmpgei	zero,at,160
 8002578:	0800316c 	andhi	zero,at,197
 800257c:	08002858 	cmpnei	zero,at,161
 8002580:	08002868 	cmpgeui	zero,at,161
 8002584:	08002868 	cmpgeui	zero,at,161
 8002588:	08002868 	cmpgeui	zero,at,161
 800258c:	08002868 	cmpgeui	zero,at,161
 8002590:	08002868 	cmpgeui	zero,at,161
 8002594:	08002868 	cmpgeui	zero,at,161
 8002598:	08002868 	cmpgeui	zero,at,161
 800259c:	08002868 	cmpgeui	zero,at,161
 80025a0:	08002868 	cmpgeui	zero,at,161
 80025a4:	0800316c 	andhi	zero,at,197
 80025a8:	0800316c 	andhi	zero,at,197
 80025ac:	0800316c 	andhi	zero,at,197
 80025b0:	0800316c 	andhi	zero,at,197
 80025b4:	0800316c 	andhi	zero,at,197
 80025b8:	0800316c 	andhi	zero,at,197
 80025bc:	0800316c 	andhi	zero,at,197
 80025c0:	0800316c 	andhi	zero,at,197
 80025c4:	0800316c 	andhi	zero,at,197
 80025c8:	0800316c 	andhi	zero,at,197
 80025cc:	080028ac 	andhi	zero,at,162
 80025d0:	08002ccc 	andi	zero,at,179
 80025d4:	0800316c 	andhi	zero,at,197
 80025d8:	08002ccc 	andi	zero,at,179
 80025dc:	0800316c 	andhi	zero,at,197
 80025e0:	0800316c 	andhi	zero,at,197
 80025e4:	0800316c 	andhi	zero,at,197
 80025e8:	0800316c 	andhi	zero,at,197
 80025ec:	08002d74 	orhi	zero,at,181
 80025f0:	0800316c 	andhi	zero,at,197
 80025f4:	0800316c 	andhi	zero,at,197
 80025f8:	08002d84 	addi	zero,at,182
 80025fc:	0800316c 	andhi	zero,at,197
 8002600:	0800316c 	andhi	zero,at,197
 8002604:	0800316c 	andhi	zero,at,197
 8002608:	0800316c 	andhi	zero,at,197
 800260c:	0800316c 	andhi	zero,at,197
 8002610:	08002dc8 	cmpgei	zero,at,183
 8002614:	0800316c 	andhi	zero,at,197
 8002618:	0800316c 	andhi	zero,at,197
 800261c:	08002e00 	call	8002e0 <__alt_mem_onchip_memory2_0+0x8002e0>
 8002620:	0800316c 	andhi	zero,at,197
 8002624:	0800316c 	andhi	zero,at,197
 8002628:	0800316c 	andhi	zero,at,197
 800262c:	0800316c 	andhi	zero,at,197
 8002630:	0800316c 	andhi	zero,at,197
 8002634:	0800316c 	andhi	zero,at,197
 8002638:	0800316c 	andhi	zero,at,197
 800263c:	0800316c 	andhi	zero,at,197
 8002640:	0800316c 	andhi	zero,at,197
 8002644:	0800316c 	andhi	zero,at,197
 8002648:	0800303c 	xorhi	zero,at,192
 800264c:	08002fe8 	cmpgeui	zero,at,191
 8002650:	08002ccc 	andi	zero,at,179
 8002654:	08002ccc 	andi	zero,at,179
 8002658:	08002ccc 	andi	zero,at,179
 800265c:	0800302c 	andhi	zero,at,192
 8002660:	08002fe8 	cmpgeui	zero,at,191
 8002664:	0800316c 	andhi	zero,at,197
 8002668:	0800316c 	andhi	zero,at,197
 800266c:	08002f04 	addi	zero,at,188
 8002670:	0800316c 	andhi	zero,at,197
 8002674:	08002f1c 	xori	zero,at,188
 8002678:	08002f5c 	xori	zero,at,189
 800267c:	08002f9c 	xori	zero,at,190
 8002680:	08002e68 	cmpgeui	zero,at,185
 8002684:	0800316c 	andhi	zero,at,197
 8002688:	080030f0 	cmpltui	zero,at,195
 800268c:	0800316c 	andhi	zero,at,197
 8002690:	08002e78 	rdprs	zero,at,185
 8002694:	0800316c 	andhi	zero,at,197
 8002698:	0800316c 	andhi	zero,at,197
 800269c:	08002eb8 	rdprs	zero,at,186
 80026a0:	d9412a17 	ldw	r5,1192(sp)
 80026a4:	8163c83a 	sub	r17,r16,r5
 80026a8:	003f7d06 	br	80024a0 <__alt_data_end+0xfc0024a0>
 80026ac:	b809883a 	mov	r4,r23
 80026b0:	b00b883a 	mov	r5,r22
 80026b4:	80044980 	call	8004498 <__swsetup_r>
 80026b8:	10002d1e 	bne	r2,zero,8002770 <___vfprintf_internal_r+0x3f8>
 80026bc:	b0c0030b 	ldhu	r3,12(r22)
 80026c0:	01000284 	movi	r4,10
 80026c4:	1805883a 	mov	r2,r3
 80026c8:	1080068c 	andi	r2,r2,26
 80026cc:	113f541e 	bne	r2,r4,8002420 <__alt_data_end+0xfc002420>
 80026d0:	b080038b 	ldhu	r2,14(r22)
 80026d4:	113fffcc 	andi	r4,r2,65535
 80026d8:	2120001c 	xori	r4,r4,32768
 80026dc:	21200004 	addi	r4,r4,-32768
 80026e0:	203f4f16 	blt	r4,zero,8002420 <__alt_data_end+0xfc002420>
 80026e4:	b2c01917 	ldw	r11,100(r22)
 80026e8:	b2800717 	ldw	r10,28(r22)
 80026ec:	b2400917 	ldw	r9,36(r22)
 80026f0:	d9812a17 	ldw	r6,1192(sp)
 80026f4:	d9c12d17 	ldw	r7,1204(sp)
 80026f8:	02010004 	movi	r8,1024
 80026fc:	18ffff4c 	andi	r3,r3,65533
 8002700:	d881078d 	sth	r2,1054(sp)
 8002704:	b809883a 	mov	r4,r23
 8002708:	d8800404 	addi	r2,sp,16
 800270c:	d9410404 	addi	r5,sp,1040
 8002710:	d8c1070d 	sth	r3,1052(sp)
 8002714:	dac11d15 	stw	r11,1140(sp)
 8002718:	da810b15 	stw	r10,1068(sp)
 800271c:	da410d15 	stw	r9,1076(sp)
 8002720:	d8810415 	stw	r2,1040(sp)
 8002724:	d8810815 	stw	r2,1056(sp)
 8002728:	da010615 	stw	r8,1048(sp)
 800272c:	da010915 	stw	r8,1060(sp)
 8002730:	d8010a15 	stw	zero,1064(sp)
 8002734:	80023780 	call	8002378 <___vfprintf_internal_r>
 8002738:	1021883a 	mov	r16,r2
 800273c:	10000416 	blt	r2,zero,8002750 <___vfprintf_internal_r+0x3d8>
 8002740:	b809883a 	mov	r4,r23
 8002744:	d9410404 	addi	r5,sp,1040
 8002748:	8005f180 	call	8005f18 <_fflush_r>
 800274c:	1007301e 	bne	r2,zero,8004410 <___vfprintf_internal_r+0x2098>
 8002750:	d881070b 	ldhu	r2,1052(sp)
 8002754:	1080100c 	andi	r2,r2,64
 8002758:	10000326 	beq	r2,zero,8002768 <___vfprintf_internal_r+0x3f0>
 800275c:	b080030b 	ldhu	r2,12(r22)
 8002760:	10801014 	ori	r2,r2,64
 8002764:	b080030d 	sth	r2,12(r22)
 8002768:	8005883a 	mov	r2,r16
 800276c:	00000106 	br	8002774 <___vfprintf_internal_r+0x3fc>
 8002770:	00bfffc4 	movi	r2,-1
 8002774:	dfc14917 	ldw	ra,1316(sp)
 8002778:	df014817 	ldw	fp,1312(sp)
 800277c:	ddc14717 	ldw	r23,1308(sp)
 8002780:	dd814617 	ldw	r22,1304(sp)
 8002784:	dd414517 	ldw	r21,1300(sp)
 8002788:	dd014417 	ldw	r20,1296(sp)
 800278c:	dcc14317 	ldw	r19,1292(sp)
 8002790:	dc814217 	ldw	r18,1288(sp)
 8002794:	dc414117 	ldw	r17,1284(sp)
 8002798:	dc014017 	ldw	r16,1280(sp)
 800279c:	dec14a04 	addi	sp,sp,1320
 80027a0:	f800283a 	ret
 80027a4:	b809883a 	mov	r4,r23
 80027a8:	b00b883a 	mov	r5,r22
 80027ac:	d9811e04 	addi	r6,sp,1144
 80027b0:	80097b80 	call	80097b8 <__sprint_r>
 80027b4:	1000081e 	bne	r2,zero,80027d8 <___vfprintf_internal_r+0x460>
 80027b8:	da000404 	addi	r8,sp,16
 80027bc:	003f4506 	br	80024d4 <__alt_data_end+0xfc0024d4>
 80027c0:	d8812017 	ldw	r2,1152(sp)
 80027c4:	10000426 	beq	r2,zero,80027d8 <___vfprintf_internal_r+0x460>
 80027c8:	b809883a 	mov	r4,r23
 80027cc:	b00b883a 	mov	r5,r22
 80027d0:	d9811e04 	addi	r6,sp,1144
 80027d4:	80097b80 	call	80097b8 <__sprint_r>
 80027d8:	b080030b 	ldhu	r2,12(r22)
 80027dc:	1080100c 	andi	r2,r2,64
 80027e0:	103fe31e 	bne	r2,zero,8002770 <__alt_data_end+0xfc002770>
 80027e4:	d8812f17 	ldw	r2,1212(sp)
 80027e8:	003fe206 	br	8002774 <__alt_data_end+0xfc002774>
 80027ec:	b809883a 	mov	r4,r23
 80027f0:	80064d40 	call	80064d4 <__sinit>
 80027f4:	003ef806 	br	80023d8 <__alt_data_end+0xfc0023d8>
 80027f8:	e005883a 	mov	r2,fp
 80027fc:	9cc00114 	ori	r19,r19,4
 8002800:	e4000007 	ldb	r16,0(fp)
 8002804:	003f4406 	br	8002518 <__alt_data_end+0xfc002518>
 8002808:	e4000007 	ldb	r16,0(fp)
 800280c:	01000a84 	movi	r4,42
 8002810:	e0800044 	addi	r2,fp,1
 8002814:	8106f626 	beq	r16,r4,80043f0 <___vfprintf_internal_r+0x2078>
 8002818:	857ff404 	addi	r21,r16,-48
 800281c:	1039883a 	mov	fp,r2
 8002820:	0013883a 	mov	r9,zero
 8002824:	957f3d36 	bltu	r18,r21,800251c <__alt_data_end+0xfc00251c>
 8002828:	0009883a 	mov	r4,zero
 800282c:	01400284 	movi	r5,10
 8002830:	800c2ec0 	call	800c2ec <__mulsi3>
 8002834:	e4000007 	ldb	r16,0(fp)
 8002838:	a889883a 	add	r4,r21,r2
 800283c:	e7000044 	addi	fp,fp,1
 8002840:	857ff404 	addi	r21,r16,-48
 8002844:	957ff92e 	bgeu	r18,r21,800282c <__alt_data_end+0xfc00282c>
 8002848:	2013883a 	mov	r9,r4
 800284c:	203f330e 	bge	r4,zero,800251c <__alt_data_end+0xfc00251c>
 8002850:	027fffc4 	movi	r9,-1
 8002854:	003f3106 	br	800251c <__alt_data_end+0xfc00251c>
 8002858:	9cc02014 	ori	r19,r19,128
 800285c:	e005883a 	mov	r2,fp
 8002860:	e4000007 	ldb	r16,0(fp)
 8002864:	003f2c06 	br	8002518 <__alt_data_end+0xfc002518>
 8002868:	857ff404 	addi	r21,r16,-48
 800286c:	d8012e15 	stw	zero,1208(sp)
 8002870:	e021883a 	mov	r16,fp
 8002874:	0009883a 	mov	r4,zero
 8002878:	da412c15 	stw	r9,1200(sp)
 800287c:	01400284 	movi	r5,10
 8002880:	800c2ec0 	call	800c2ec <__mulsi3>
 8002884:	81400007 	ldb	r5,0(r16)
 8002888:	1549883a 	add	r4,r2,r21
 800288c:	e7000044 	addi	fp,fp,1
 8002890:	2d7ff404 	addi	r21,r5,-48
 8002894:	e021883a 	mov	r16,fp
 8002898:	957ff82e 	bgeu	r18,r21,800287c <__alt_data_end+0xfc00287c>
 800289c:	2821883a 	mov	r16,r5
 80028a0:	d9012e15 	stw	r4,1208(sp)
 80028a4:	da412c17 	ldw	r9,1200(sp)
 80028a8:	003f1c06 	br	800251c <__alt_data_end+0xfc00251c>
 80028ac:	da012a17 	ldw	r8,1192(sp)
 80028b0:	df012a15 	stw	fp,1192(sp)
 80028b4:	9839883a 	mov	fp,r19
 80028b8:	dcc12b03 	ldbu	r19,1196(sp)
 80028bc:	e7000414 	ori	fp,fp,16
 80028c0:	e080080c 	andi	r2,fp,32
 80028c4:	dcc12785 	stb	r19,1182(sp)
 80028c8:	d8c12d17 	ldw	r3,1204(sp)
 80028cc:	1001ce26 	beq	r2,zero,8003008 <___vfprintf_internal_r+0xc90>
 80028d0:	d9012d17 	ldw	r4,1204(sp)
 80028d4:	18800117 	ldw	r2,4(r3)
 80028d8:	1c800017 	ldw	r18,0(r3)
 80028dc:	21000204 	addi	r4,r4,8
 80028e0:	d9012d15 	stw	r4,1204(sp)
 80028e4:	102b883a 	mov	r21,r2
 80028e8:	10044916 	blt	r2,zero,8003a10 <___vfprintf_internal_r+0x1698>
 80028ec:	dcc12783 	ldbu	r19,1182(sp)
 80028f0:	da413215 	stw	r9,1224(sp)
 80028f4:	00800044 	movi	r2,1
 80028f8:	9546b03a 	or	r3,r18,r21
 80028fc:	48000216 	blt	r9,zero,8002908 <___vfprintf_internal_r+0x590>
 8002900:	013fdfc4 	movi	r4,-129
 8002904:	e138703a 	and	fp,fp,r4
 8002908:	1802251e 	bne	r3,zero,80031a0 <___vfprintf_internal_r+0xe28>
 800290c:	48031726 	beq	r9,zero,800356c <___vfprintf_internal_r+0x11f4>
 8002910:	10803fcc 	andi	r2,r2,255
 8002914:	00c00044 	movi	r3,1
 8002918:	10c24526 	beq	r2,r3,8003230 <___vfprintf_internal_r+0xeb8>
 800291c:	00c00084 	movi	r3,2
 8002920:	10c33426 	beq	r2,r3,80035f4 <___vfprintf_internal_r+0x127c>
 8002924:	d8c10e04 	addi	r3,sp,1080
 8002928:	9008d0fa 	srli	r4,r18,3
 800292c:	a80a977a 	slli	r5,r21,29
 8002930:	a82ad0fa 	srli	r21,r21,3
 8002934:	948001cc 	andi	r18,r18,7
 8002938:	90800c04 	addi	r2,r18,48
 800293c:	18ffffc4 	addi	r3,r3,-1
 8002940:	2924b03a 	or	r18,r5,r4
 8002944:	18800005 	stb	r2,0(r3)
 8002948:	9548b03a 	or	r4,r18,r21
 800294c:	203ff61e 	bne	r4,zero,8002928 <__alt_data_end+0xfc002928>
 8002950:	e100004c 	andi	r4,fp,1
 8002954:	d8c13115 	stw	r3,1220(sp)
 8002958:	20039a1e 	bne	r4,zero,80037c4 <___vfprintf_internal_r+0x144c>
 800295c:	d8812817 	ldw	r2,1184(sp)
 8002960:	10e3c83a 	sub	r17,r2,r3
 8002964:	8805883a 	mov	r2,r17
 8002968:	8a40010e 	bge	r17,r9,8002970 <___vfprintf_internal_r+0x5f8>
 800296c:	4805883a 	mov	r2,r9
 8002970:	d8812b15 	stw	r2,1196(sp)
 8002974:	d8013415 	stw	zero,1232(sp)
 8002978:	98803fcc 	andi	r2,r19,255
 800297c:	1080201c 	xori	r2,r2,128
 8002980:	10bfe004 	addi	r2,r2,-128
 8002984:	10000326 	beq	r2,zero,8002994 <___vfprintf_internal_r+0x61c>
 8002988:	d8c12b17 	ldw	r3,1196(sp)
 800298c:	18c00044 	addi	r3,r3,1
 8002990:	d8c12b15 	stw	r3,1196(sp)
 8002994:	e0c0008c 	andi	r3,fp,2
 8002998:	d8c12c15 	stw	r3,1200(sp)
 800299c:	18000326 	beq	r3,zero,80029ac <___vfprintf_internal_r+0x634>
 80029a0:	d8c12b17 	ldw	r3,1196(sp)
 80029a4:	18c00084 	addi	r3,r3,2
 80029a8:	d8c12b15 	stw	r3,1196(sp)
 80029ac:	e0c0210c 	andi	r3,fp,132
 80029b0:	d8c13015 	stw	r3,1216(sp)
 80029b4:	1801f81e 	bne	r3,zero,8003198 <___vfprintf_internal_r+0xe20>
 80029b8:	d9012e17 	ldw	r4,1208(sp)
 80029bc:	d8c12b17 	ldw	r3,1196(sp)
 80029c0:	20ebc83a 	sub	r21,r4,r3
 80029c4:	0541f40e 	bge	zero,r21,8003198 <___vfprintf_internal_r+0xe20>
 80029c8:	02400404 	movi	r9,16
 80029cc:	d8c12017 	ldw	r3,1152(sp)
 80029d0:	d8811f17 	ldw	r2,1148(sp)
 80029d4:	4d45750e 	bge	r9,r21,8003fac <___vfprintf_internal_r+0x1c34>
 80029d8:	01420074 	movhi	r5,2049
 80029dc:	2946c884 	addi	r5,r5,6946
 80029e0:	d9413615 	stw	r5,1240(sp)
 80029e4:	4827883a 	mov	r19,r9
 80029e8:	048001c4 	movi	r18,7
 80029ec:	00000306 	br	80029fc <___vfprintf_internal_r+0x684>
 80029f0:	ad7ffc04 	addi	r21,r21,-16
 80029f4:	42000204 	addi	r8,r8,8
 80029f8:	9d40130e 	bge	r19,r21,8002a48 <___vfprintf_internal_r+0x6d0>
 80029fc:	01020074 	movhi	r4,2049
 8002a00:	18c00404 	addi	r3,r3,16
 8002a04:	10800044 	addi	r2,r2,1
 8002a08:	2106c884 	addi	r4,r4,6946
 8002a0c:	41000015 	stw	r4,0(r8)
 8002a10:	44c00115 	stw	r19,4(r8)
 8002a14:	d8c12015 	stw	r3,1152(sp)
 8002a18:	d8811f15 	stw	r2,1148(sp)
 8002a1c:	90bff40e 	bge	r18,r2,80029f0 <__alt_data_end+0xfc0029f0>
 8002a20:	b809883a 	mov	r4,r23
 8002a24:	b00b883a 	mov	r5,r22
 8002a28:	d9811e04 	addi	r6,sp,1144
 8002a2c:	80097b80 	call	80097b8 <__sprint_r>
 8002a30:	103f691e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8002a34:	ad7ffc04 	addi	r21,r21,-16
 8002a38:	d8c12017 	ldw	r3,1152(sp)
 8002a3c:	d8811f17 	ldw	r2,1148(sp)
 8002a40:	da000404 	addi	r8,sp,16
 8002a44:	9d7fed16 	blt	r19,r21,80029fc <__alt_data_end+0xfc0029fc>
 8002a48:	d9413617 	ldw	r5,1240(sp)
 8002a4c:	a8c7883a 	add	r3,r21,r3
 8002a50:	10800044 	addi	r2,r2,1
 8002a54:	41400015 	stw	r5,0(r8)
 8002a58:	45400115 	stw	r21,4(r8)
 8002a5c:	d8c12015 	stw	r3,1152(sp)
 8002a60:	d8811f15 	stw	r2,1148(sp)
 8002a64:	010001c4 	movi	r4,7
 8002a68:	20832b16 	blt	r4,r2,8003718 <___vfprintf_internal_r+0x13a0>
 8002a6c:	d8812787 	ldb	r2,1182(sp)
 8002a70:	42000204 	addi	r8,r8,8
 8002a74:	10000c26 	beq	r2,zero,8002aa8 <___vfprintf_internal_r+0x730>
 8002a78:	d8811f17 	ldw	r2,1148(sp)
 8002a7c:	d9012784 	addi	r4,sp,1182
 8002a80:	18c00044 	addi	r3,r3,1
 8002a84:	10800044 	addi	r2,r2,1
 8002a88:	41000015 	stw	r4,0(r8)
 8002a8c:	01000044 	movi	r4,1
 8002a90:	41000115 	stw	r4,4(r8)
 8002a94:	d8c12015 	stw	r3,1152(sp)
 8002a98:	d8811f15 	stw	r2,1148(sp)
 8002a9c:	010001c4 	movi	r4,7
 8002aa0:	2082c416 	blt	r4,r2,80035b4 <___vfprintf_internal_r+0x123c>
 8002aa4:	42000204 	addi	r8,r8,8
 8002aa8:	d8812c17 	ldw	r2,1200(sp)
 8002aac:	10000c26 	beq	r2,zero,8002ae0 <___vfprintf_internal_r+0x768>
 8002ab0:	d8811f17 	ldw	r2,1148(sp)
 8002ab4:	d9012704 	addi	r4,sp,1180
 8002ab8:	18c00084 	addi	r3,r3,2
 8002abc:	10800044 	addi	r2,r2,1
 8002ac0:	41000015 	stw	r4,0(r8)
 8002ac4:	01000084 	movi	r4,2
 8002ac8:	41000115 	stw	r4,4(r8)
 8002acc:	d8c12015 	stw	r3,1152(sp)
 8002ad0:	d8811f15 	stw	r2,1148(sp)
 8002ad4:	010001c4 	movi	r4,7
 8002ad8:	2082be16 	blt	r4,r2,80035d4 <___vfprintf_internal_r+0x125c>
 8002adc:	42000204 	addi	r8,r8,8
 8002ae0:	d9013017 	ldw	r4,1216(sp)
 8002ae4:	00802004 	movi	r2,128
 8002ae8:	20822026 	beq	r4,r2,800336c <___vfprintf_internal_r+0xff4>
 8002aec:	d9413217 	ldw	r5,1224(sp)
 8002af0:	2c67c83a 	sub	r19,r5,r17
 8002af4:	04c0260e 	bge	zero,r19,8002b90 <___vfprintf_internal_r+0x818>
 8002af8:	05400404 	movi	r21,16
 8002afc:	d8811f17 	ldw	r2,1148(sp)
 8002b00:	acc4720e 	bge	r21,r19,8003ccc <___vfprintf_internal_r+0x1954>
 8002b04:	01420074 	movhi	r5,2049
 8002b08:	2946c484 	addi	r5,r5,6930
 8002b0c:	d9412c15 	stw	r5,1200(sp)
 8002b10:	048001c4 	movi	r18,7
 8002b14:	00000306 	br	8002b24 <___vfprintf_internal_r+0x7ac>
 8002b18:	9cfffc04 	addi	r19,r19,-16
 8002b1c:	42000204 	addi	r8,r8,8
 8002b20:	acc0110e 	bge	r21,r19,8002b68 <___vfprintf_internal_r+0x7f0>
 8002b24:	18c00404 	addi	r3,r3,16
 8002b28:	10800044 	addi	r2,r2,1
 8002b2c:	45000015 	stw	r20,0(r8)
 8002b30:	45400115 	stw	r21,4(r8)
 8002b34:	d8c12015 	stw	r3,1152(sp)
 8002b38:	d8811f15 	stw	r2,1148(sp)
 8002b3c:	90bff60e 	bge	r18,r2,8002b18 <__alt_data_end+0xfc002b18>
 8002b40:	b809883a 	mov	r4,r23
 8002b44:	b00b883a 	mov	r5,r22
 8002b48:	d9811e04 	addi	r6,sp,1144
 8002b4c:	80097b80 	call	80097b8 <__sprint_r>
 8002b50:	103f211e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8002b54:	9cfffc04 	addi	r19,r19,-16
 8002b58:	d8c12017 	ldw	r3,1152(sp)
 8002b5c:	d8811f17 	ldw	r2,1148(sp)
 8002b60:	da000404 	addi	r8,sp,16
 8002b64:	acffef16 	blt	r21,r19,8002b24 <__alt_data_end+0xfc002b24>
 8002b68:	d9012c17 	ldw	r4,1200(sp)
 8002b6c:	1cc7883a 	add	r3,r3,r19
 8002b70:	10800044 	addi	r2,r2,1
 8002b74:	41000015 	stw	r4,0(r8)
 8002b78:	44c00115 	stw	r19,4(r8)
 8002b7c:	d8c12015 	stw	r3,1152(sp)
 8002b80:	d8811f15 	stw	r2,1148(sp)
 8002b84:	010001c4 	movi	r4,7
 8002b88:	20828216 	blt	r4,r2,8003594 <___vfprintf_internal_r+0x121c>
 8002b8c:	42000204 	addi	r8,r8,8
 8002b90:	e080400c 	andi	r2,fp,256
 8002b94:	1001ac1e 	bne	r2,zero,8003248 <___vfprintf_internal_r+0xed0>
 8002b98:	d8811f17 	ldw	r2,1148(sp)
 8002b9c:	d9413117 	ldw	r5,1220(sp)
 8002ba0:	1c47883a 	add	r3,r3,r17
 8002ba4:	10800044 	addi	r2,r2,1
 8002ba8:	41400015 	stw	r5,0(r8)
 8002bac:	44400115 	stw	r17,4(r8)
 8002bb0:	d8c12015 	stw	r3,1152(sp)
 8002bb4:	d8811f15 	stw	r2,1148(sp)
 8002bb8:	010001c4 	movi	r4,7
 8002bbc:	20825d16 	blt	r4,r2,8003534 <___vfprintf_internal_r+0x11bc>
 8002bc0:	42000204 	addi	r8,r8,8
 8002bc4:	e080010c 	andi	r2,fp,4
 8002bc8:	10003126 	beq	r2,zero,8002c90 <___vfprintf_internal_r+0x918>
 8002bcc:	d8812e17 	ldw	r2,1208(sp)
 8002bd0:	d9012b17 	ldw	r4,1196(sp)
 8002bd4:	1121c83a 	sub	r16,r2,r4
 8002bd8:	04002d0e 	bge	zero,r16,8002c90 <___vfprintf_internal_r+0x918>
 8002bdc:	04400404 	movi	r17,16
 8002be0:	d8811f17 	ldw	r2,1148(sp)
 8002be4:	8c05340e 	bge	r17,r16,80040b8 <___vfprintf_internal_r+0x1d40>
 8002be8:	01020074 	movhi	r4,2049
 8002bec:	2106c884 	addi	r4,r4,6946
 8002bf0:	d9013615 	stw	r4,1240(sp)
 8002bf4:	048001c4 	movi	r18,7
 8002bf8:	00000306 	br	8002c08 <___vfprintf_internal_r+0x890>
 8002bfc:	843ffc04 	addi	r16,r16,-16
 8002c00:	42000204 	addi	r8,r8,8
 8002c04:	8c00130e 	bge	r17,r16,8002c54 <___vfprintf_internal_r+0x8dc>
 8002c08:	01420074 	movhi	r5,2049
 8002c0c:	18c00404 	addi	r3,r3,16
 8002c10:	10800044 	addi	r2,r2,1
 8002c14:	2946c884 	addi	r5,r5,6946
 8002c18:	41400015 	stw	r5,0(r8)
 8002c1c:	44400115 	stw	r17,4(r8)
 8002c20:	d8c12015 	stw	r3,1152(sp)
 8002c24:	d8811f15 	stw	r2,1148(sp)
 8002c28:	90bff40e 	bge	r18,r2,8002bfc <__alt_data_end+0xfc002bfc>
 8002c2c:	b809883a 	mov	r4,r23
 8002c30:	b00b883a 	mov	r5,r22
 8002c34:	d9811e04 	addi	r6,sp,1144
 8002c38:	80097b80 	call	80097b8 <__sprint_r>
 8002c3c:	103ee61e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8002c40:	843ffc04 	addi	r16,r16,-16
 8002c44:	d8c12017 	ldw	r3,1152(sp)
 8002c48:	d8811f17 	ldw	r2,1148(sp)
 8002c4c:	da000404 	addi	r8,sp,16
 8002c50:	8c3fed16 	blt	r17,r16,8002c08 <__alt_data_end+0xfc002c08>
 8002c54:	d9013617 	ldw	r4,1240(sp)
 8002c58:	1c07883a 	add	r3,r3,r16
 8002c5c:	10800044 	addi	r2,r2,1
 8002c60:	41000015 	stw	r4,0(r8)
 8002c64:	44000115 	stw	r16,4(r8)
 8002c68:	d8c12015 	stw	r3,1152(sp)
 8002c6c:	d8811f15 	stw	r2,1148(sp)
 8002c70:	010001c4 	movi	r4,7
 8002c74:	2080060e 	bge	r4,r2,8002c90 <___vfprintf_internal_r+0x918>
 8002c78:	b809883a 	mov	r4,r23
 8002c7c:	b00b883a 	mov	r5,r22
 8002c80:	d9811e04 	addi	r6,sp,1144
 8002c84:	80097b80 	call	80097b8 <__sprint_r>
 8002c88:	103ed31e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8002c8c:	d8c12017 	ldw	r3,1152(sp)
 8002c90:	df012b17 	ldw	fp,1196(sp)
 8002c94:	d9412e17 	ldw	r5,1208(sp)
 8002c98:	e140010e 	bge	fp,r5,8002ca0 <___vfprintf_internal_r+0x928>
 8002c9c:	2839883a 	mov	fp,r5
 8002ca0:	d8812f17 	ldw	r2,1212(sp)
 8002ca4:	1705883a 	add	r2,r2,fp
 8002ca8:	d8812f15 	stw	r2,1212(sp)
 8002cac:	1802291e 	bne	r3,zero,8003554 <___vfprintf_internal_r+0x11dc>
 8002cb0:	d8c12a17 	ldw	r3,1192(sp)
 8002cb4:	d8011f15 	stw	zero,1148(sp)
 8002cb8:	da000404 	addi	r8,sp,16
 8002cbc:	18800007 	ldb	r2,0(r3)
 8002cc0:	103ded1e 	bne	r2,zero,8002478 <__alt_data_end+0xfc002478>
 8002cc4:	dc012a17 	ldw	r16,1192(sp)
 8002cc8:	003e0506 	br	80024e0 <__alt_data_end+0xfc0024e0>
 8002ccc:	d9012d17 	ldw	r4,1204(sp)
 8002cd0:	d9412d17 	ldw	r5,1204(sp)
 8002cd4:	da012a17 	ldw	r8,1192(sp)
 8002cd8:	21000017 	ldw	r4,0(r4)
 8002cdc:	29400117 	ldw	r5,4(r5)
 8002ce0:	df012a15 	stw	fp,1192(sp)
 8002ce4:	9839883a 	mov	fp,r19
 8002ce8:	dcc12b03 	ldbu	r19,1196(sp)
 8002cec:	d9013715 	stw	r4,1244(sp)
 8002cf0:	d9413915 	stw	r5,1252(sp)
 8002cf4:	da013f15 	stw	r8,1276(sp)
 8002cf8:	da413e15 	stw	r9,1272(sp)
 8002cfc:	dcc12785 	stb	r19,1182(sp)
 8002d00:	80094140 	call	8009414 <__fpclassifyd>
 8002d04:	d8c12d17 	ldw	r3,1204(sp)
 8002d08:	04400044 	movi	r17,1
 8002d0c:	da013f17 	ldw	r8,1276(sp)
 8002d10:	1c800204 	addi	r18,r3,8
 8002d14:	da413e17 	ldw	r9,1272(sp)
 8002d18:	d9013717 	ldw	r4,1244(sp)
 8002d1c:	d9413917 	ldw	r5,1252(sp)
 8002d20:	1443451e 	bne	r2,r17,8003a38 <___vfprintf_internal_r+0x16c0>
 8002d24:	000d883a 	mov	r6,zero
 8002d28:	000f883a 	mov	r7,zero
 8002d2c:	800d6940 	call	800d694 <__ledf2>
 8002d30:	da013f17 	ldw	r8,1276(sp)
 8002d34:	1004fe16 	blt	r2,zero,8004130 <___vfprintf_internal_r+0x1db8>
 8002d38:	dcc12783 	ldbu	r19,1182(sp)
 8002d3c:	008011c4 	movi	r2,71
 8002d40:	14045d0e 	bge	r2,r16,8003eb8 <___vfprintf_internal_r+0x1b40>
 8002d44:	01420074 	movhi	r5,2049
 8002d48:	2946b504 	addi	r5,r5,6868
 8002d4c:	d9413115 	stw	r5,1220(sp)
 8002d50:	00c000c4 	movi	r3,3
 8002d54:	00bfdfc4 	movi	r2,-129
 8002d58:	d8c12b15 	stw	r3,1196(sp)
 8002d5c:	e0b8703a 	and	fp,fp,r2
 8002d60:	dc812d15 	stw	r18,1204(sp)
 8002d64:	1823883a 	mov	r17,r3
 8002d68:	d8013215 	stw	zero,1224(sp)
 8002d6c:	d8013415 	stw	zero,1232(sp)
 8002d70:	003f0106 	br	8002978 <__alt_data_end+0xfc002978>
 8002d74:	9cc00214 	ori	r19,r19,8
 8002d78:	e005883a 	mov	r2,fp
 8002d7c:	e4000007 	ldb	r16,0(fp)
 8002d80:	003de506 	br	8002518 <__alt_data_end+0xfc002518>
 8002d84:	da012a17 	ldw	r8,1192(sp)
 8002d88:	df012a15 	stw	fp,1192(sp)
 8002d8c:	9f000414 	ori	fp,r19,16
 8002d90:	e0c0080c 	andi	r3,fp,32
 8002d94:	d8812d17 	ldw	r2,1204(sp)
 8002d98:	18007626 	beq	r3,zero,8002f74 <___vfprintf_internal_r+0xbfc>
 8002d9c:	d9412d17 	ldw	r5,1204(sp)
 8002da0:	14800017 	ldw	r18,0(r2)
 8002da4:	15400117 	ldw	r21,4(r2)
 8002da8:	29400204 	addi	r5,r5,8
 8002dac:	d9412d15 	stw	r5,1204(sp)
 8002db0:	0005883a 	mov	r2,zero
 8002db4:	9546b03a 	or	r3,r18,r21
 8002db8:	d8012785 	stb	zero,1182(sp)
 8002dbc:	da413215 	stw	r9,1224(sp)
 8002dc0:	0027883a 	mov	r19,zero
 8002dc4:	003ecd06 	br	80028fc <__alt_data_end+0xfc0028fc>
 8002dc8:	da012a17 	ldw	r8,1192(sp)
 8002dcc:	df012a15 	stw	fp,1192(sp)
 8002dd0:	9f000414 	ori	fp,r19,16
 8002dd4:	e0c0080c 	andi	r3,fp,32
 8002dd8:	d8812d17 	ldw	r2,1204(sp)
 8002ddc:	18002c26 	beq	r3,zero,8002e90 <___vfprintf_internal_r+0xb18>
 8002de0:	d9012d17 	ldw	r4,1204(sp)
 8002de4:	14800017 	ldw	r18,0(r2)
 8002de8:	15400117 	ldw	r21,4(r2)
 8002dec:	21000204 	addi	r4,r4,8
 8002df0:	d9012d15 	stw	r4,1204(sp)
 8002df4:	00800044 	movi	r2,1
 8002df8:	9546b03a 	or	r3,r18,r21
 8002dfc:	003fee06 	br	8002db8 <__alt_data_end+0xfc002db8>
 8002e00:	da012a17 	ldw	r8,1192(sp)
 8002e04:	df012a15 	stw	fp,1192(sp)
 8002e08:	9839883a 	mov	fp,r19
 8002e0c:	dcc12b03 	ldbu	r19,1196(sp)
 8002e10:	01420074 	movhi	r5,2049
 8002e14:	2946b804 	addi	r5,r5,6880
 8002e18:	dcc12785 	stb	r19,1182(sp)
 8002e1c:	d9413b15 	stw	r5,1260(sp)
 8002e20:	e0c0080c 	andi	r3,fp,32
 8002e24:	d8812d17 	ldw	r2,1204(sp)
 8002e28:	18002e26 	beq	r3,zero,8002ee4 <___vfprintf_internal_r+0xb6c>
 8002e2c:	d9412d17 	ldw	r5,1204(sp)
 8002e30:	14800017 	ldw	r18,0(r2)
 8002e34:	15400117 	ldw	r21,4(r2)
 8002e38:	29400204 	addi	r5,r5,8
 8002e3c:	d9412d15 	stw	r5,1204(sp)
 8002e40:	e080004c 	andi	r2,fp,1
 8002e44:	10025c26 	beq	r2,zero,80037b8 <___vfprintf_internal_r+0x1440>
 8002e48:	9546b03a 	or	r3,r18,r21
 8002e4c:	18038f26 	beq	r3,zero,8003c8c <___vfprintf_internal_r+0x1914>
 8002e50:	00800c04 	movi	r2,48
 8002e54:	d8812705 	stb	r2,1180(sp)
 8002e58:	dc012745 	stb	r16,1181(sp)
 8002e5c:	e7000094 	ori	fp,fp,2
 8002e60:	00800084 	movi	r2,2
 8002e64:	003fd406 	br	8002db8 <__alt_data_end+0xfc002db8>
 8002e68:	9cc00814 	ori	r19,r19,32
 8002e6c:	e005883a 	mov	r2,fp
 8002e70:	e4000007 	ldb	r16,0(fp)
 8002e74:	003da806 	br	8002518 <__alt_data_end+0xfc002518>
 8002e78:	da012a17 	ldw	r8,1192(sp)
 8002e7c:	df012a15 	stw	fp,1192(sp)
 8002e80:	9839883a 	mov	fp,r19
 8002e84:	e0c0080c 	andi	r3,fp,32
 8002e88:	d8812d17 	ldw	r2,1204(sp)
 8002e8c:	183fd41e 	bne	r3,zero,8002de0 <__alt_data_end+0xfc002de0>
 8002e90:	e0c0040c 	andi	r3,fp,16
 8002e94:	18035f26 	beq	r3,zero,8003c14 <___vfprintf_internal_r+0x189c>
 8002e98:	d9412d17 	ldw	r5,1204(sp)
 8002e9c:	14800017 	ldw	r18,0(r2)
 8002ea0:	002b883a 	mov	r21,zero
 8002ea4:	29400104 	addi	r5,r5,4
 8002ea8:	d9412d15 	stw	r5,1204(sp)
 8002eac:	00800044 	movi	r2,1
 8002eb0:	9007883a 	mov	r3,r18
 8002eb4:	003fc006 	br	8002db8 <__alt_data_end+0xfc002db8>
 8002eb8:	da012a17 	ldw	r8,1192(sp)
 8002ebc:	df012a15 	stw	fp,1192(sp)
 8002ec0:	9839883a 	mov	fp,r19
 8002ec4:	dcc12b03 	ldbu	r19,1196(sp)
 8002ec8:	01020074 	movhi	r4,2049
 8002ecc:	2106bd04 	addi	r4,r4,6900
 8002ed0:	d9013b15 	stw	r4,1260(sp)
 8002ed4:	dcc12785 	stb	r19,1182(sp)
 8002ed8:	e0c0080c 	andi	r3,fp,32
 8002edc:	d8812d17 	ldw	r2,1204(sp)
 8002ee0:	183fd21e 	bne	r3,zero,8002e2c <__alt_data_end+0xfc002e2c>
 8002ee4:	e0c0040c 	andi	r3,fp,16
 8002ee8:	18035426 	beq	r3,zero,8003c3c <___vfprintf_internal_r+0x18c4>
 8002eec:	d8c12d17 	ldw	r3,1204(sp)
 8002ef0:	14800017 	ldw	r18,0(r2)
 8002ef4:	002b883a 	mov	r21,zero
 8002ef8:	18c00104 	addi	r3,r3,4
 8002efc:	d8c12d15 	stw	r3,1204(sp)
 8002f00:	003fcf06 	br	8002e40 <__alt_data_end+0xfc002e40>
 8002f04:	e4000007 	ldb	r16,0(fp)
 8002f08:	00801b04 	movi	r2,108
 8002f0c:	8083f726 	beq	r16,r2,8003eec <___vfprintf_internal_r+0x1b74>
 8002f10:	9cc00414 	ori	r19,r19,16
 8002f14:	e005883a 	mov	r2,fp
 8002f18:	003d7f06 	br	8002518 <__alt_data_end+0xfc002518>
 8002f1c:	da012a17 	ldw	r8,1192(sp)
 8002f20:	df012a15 	stw	fp,1192(sp)
 8002f24:	9839883a 	mov	fp,r19
 8002f28:	dcc12b03 	ldbu	r19,1196(sp)
 8002f2c:	e080080c 	andi	r2,fp,32
 8002f30:	dcc12785 	stb	r19,1182(sp)
 8002f34:	10032226 	beq	r2,zero,8003bc0 <___vfprintf_internal_r+0x1848>
 8002f38:	d9412d17 	ldw	r5,1204(sp)
 8002f3c:	d9012f17 	ldw	r4,1212(sp)
 8002f40:	28800017 	ldw	r2,0(r5)
 8002f44:	2007d7fa 	srai	r3,r4,31
 8002f48:	29400104 	addi	r5,r5,4
 8002f4c:	d9412d15 	stw	r5,1204(sp)
 8002f50:	11000015 	stw	r4,0(r2)
 8002f54:	10c00115 	stw	r3,4(r2)
 8002f58:	003d4406 	br	800246c <__alt_data_end+0xfc00246c>
 8002f5c:	da012a17 	ldw	r8,1192(sp)
 8002f60:	df012a15 	stw	fp,1192(sp)
 8002f64:	9839883a 	mov	fp,r19
 8002f68:	e0c0080c 	andi	r3,fp,32
 8002f6c:	d8812d17 	ldw	r2,1204(sp)
 8002f70:	183f8a1e 	bne	r3,zero,8002d9c <__alt_data_end+0xfc002d9c>
 8002f74:	e0c0040c 	andi	r3,fp,16
 8002f78:	18031c26 	beq	r3,zero,8003bec <___vfprintf_internal_r+0x1874>
 8002f7c:	14800017 	ldw	r18,0(r2)
 8002f80:	d8812d17 	ldw	r2,1204(sp)
 8002f84:	002b883a 	mov	r21,zero
 8002f88:	9007883a 	mov	r3,r18
 8002f8c:	10800104 	addi	r2,r2,4
 8002f90:	d8812d15 	stw	r2,1204(sp)
 8002f94:	0005883a 	mov	r2,zero
 8002f98:	003f8706 	br	8002db8 <__alt_data_end+0xfc002db8>
 8002f9c:	d9412d17 	ldw	r5,1204(sp)
 8002fa0:	00800c04 	movi	r2,48
 8002fa4:	d8812705 	stb	r2,1180(sp)
 8002fa8:	2c800017 	ldw	r18,0(r5)
 8002fac:	00801e04 	movi	r2,120
 8002fb0:	d8812745 	stb	r2,1181(sp)
 8002fb4:	00820074 	movhi	r2,2049
 8002fb8:	1086bd04 	addi	r2,r2,6900
 8002fbc:	29400104 	addi	r5,r5,4
 8002fc0:	da012a17 	ldw	r8,1192(sp)
 8002fc4:	d8813b15 	stw	r2,1260(sp)
 8002fc8:	df012a15 	stw	fp,1192(sp)
 8002fcc:	002b883a 	mov	r21,zero
 8002fd0:	9f000094 	ori	fp,r19,2
 8002fd4:	d9412d15 	stw	r5,1204(sp)
 8002fd8:	00800084 	movi	r2,2
 8002fdc:	04001e04 	movi	r16,120
 8002fe0:	9007883a 	mov	r3,r18
 8002fe4:	003f7406 	br	8002db8 <__alt_data_end+0xfc002db8>
 8002fe8:	da012a17 	ldw	r8,1192(sp)
 8002fec:	df012a15 	stw	fp,1192(sp)
 8002ff0:	9839883a 	mov	fp,r19
 8002ff4:	dcc12b03 	ldbu	r19,1196(sp)
 8002ff8:	e080080c 	andi	r2,fp,32
 8002ffc:	d8c12d17 	ldw	r3,1204(sp)
 8003000:	dcc12785 	stb	r19,1182(sp)
 8003004:	103e321e 	bne	r2,zero,80028d0 <__alt_data_end+0xfc0028d0>
 8003008:	e080040c 	andi	r2,fp,16
 800300c:	10031326 	beq	r2,zero,8003c5c <___vfprintf_internal_r+0x18e4>
 8003010:	1c800017 	ldw	r18,0(r3)
 8003014:	d9412d17 	ldw	r5,1204(sp)
 8003018:	902bd7fa 	srai	r21,r18,31
 800301c:	29400104 	addi	r5,r5,4
 8003020:	d9412d15 	stw	r5,1204(sp)
 8003024:	a805883a 	mov	r2,r21
 8003028:	003e2f06 	br	80028e8 <__alt_data_end+0xfc0028e8>
 800302c:	9cc01014 	ori	r19,r19,64
 8003030:	e005883a 	mov	r2,fp
 8003034:	e4000007 	ldb	r16,0(fp)
 8003038:	003d3706 	br	8002518 <__alt_data_end+0xfc002518>
 800303c:	d8c12d17 	ldw	r3,1204(sp)
 8003040:	d9012d17 	ldw	r4,1204(sp)
 8003044:	da012a17 	ldw	r8,1192(sp)
 8003048:	18800017 	ldw	r2,0(r3)
 800304c:	21000104 	addi	r4,r4,4
 8003050:	00c00044 	movi	r3,1
 8003054:	df012a15 	stw	fp,1192(sp)
 8003058:	d8c12b15 	stw	r3,1196(sp)
 800305c:	9839883a 	mov	fp,r19
 8003060:	d8012785 	stb	zero,1182(sp)
 8003064:	d8810405 	stb	r2,1040(sp)
 8003068:	d9012d15 	stw	r4,1204(sp)
 800306c:	1823883a 	mov	r17,r3
 8003070:	d8c10404 	addi	r3,sp,1040
 8003074:	d8013215 	stw	zero,1224(sp)
 8003078:	d8013415 	stw	zero,1232(sp)
 800307c:	d8c13115 	stw	r3,1220(sp)
 8003080:	0005883a 	mov	r2,zero
 8003084:	003e4306 	br	8002994 <__alt_data_end+0xfc002994>
 8003088:	d8812b07 	ldb	r2,1196(sp)
 800308c:	1002fc1e 	bne	r2,zero,8003c80 <___vfprintf_internal_r+0x1908>
 8003090:	00c00804 	movi	r3,32
 8003094:	d8c12b05 	stb	r3,1196(sp)
 8003098:	e005883a 	mov	r2,fp
 800309c:	e4000007 	ldb	r16,0(fp)
 80030a0:	003d1d06 	br	8002518 <__alt_data_end+0xfc002518>
 80030a4:	9cc00054 	ori	r19,r19,1
 80030a8:	e005883a 	mov	r2,fp
 80030ac:	e4000007 	ldb	r16,0(fp)
 80030b0:	003d1906 	br	8002518 <__alt_data_end+0xfc002518>
 80030b4:	d9012d17 	ldw	r4,1204(sp)
 80030b8:	d9412d17 	ldw	r5,1204(sp)
 80030bc:	21000017 	ldw	r4,0(r4)
 80030c0:	28c00104 	addi	r3,r5,4
 80030c4:	d9012e15 	stw	r4,1208(sp)
 80030c8:	20038c16 	blt	r4,zero,8003efc <___vfprintf_internal_r+0x1b84>
 80030cc:	d8c12d15 	stw	r3,1204(sp)
 80030d0:	e005883a 	mov	r2,fp
 80030d4:	e4000007 	ldb	r16,0(fp)
 80030d8:	003d0f06 	br	8002518 <__alt_data_end+0xfc002518>
 80030dc:	00c00ac4 	movi	r3,43
 80030e0:	d8c12b05 	stb	r3,1196(sp)
 80030e4:	e005883a 	mov	r2,fp
 80030e8:	e4000007 	ldb	r16,0(fp)
 80030ec:	003d0a06 	br	8002518 <__alt_data_end+0xfc002518>
 80030f0:	d8c12d17 	ldw	r3,1204(sp)
 80030f4:	d9012d17 	ldw	r4,1204(sp)
 80030f8:	da012a17 	ldw	r8,1192(sp)
 80030fc:	18c00017 	ldw	r3,0(r3)
 8003100:	df012a15 	stw	fp,1192(sp)
 8003104:	d8012785 	stb	zero,1182(sp)
 8003108:	d8c13115 	stw	r3,1220(sp)
 800310c:	9839883a 	mov	fp,r19
 8003110:	24800104 	addi	r18,r4,4
 8003114:	1803f726 	beq	r3,zero,80040f4 <___vfprintf_internal_r+0x1d7c>
 8003118:	d9013117 	ldw	r4,1220(sp)
 800311c:	48038916 	blt	r9,zero,8003f44 <___vfprintf_internal_r+0x1bcc>
 8003120:	480d883a 	mov	r6,r9
 8003124:	000b883a 	mov	r5,zero
 8003128:	da013f15 	stw	r8,1276(sp)
 800312c:	da413e15 	stw	r9,1272(sp)
 8003130:	800798c0 	call	800798c <memchr>
 8003134:	da013f17 	ldw	r8,1276(sp)
 8003138:	da413e17 	ldw	r9,1272(sp)
 800313c:	10045926 	beq	r2,zero,80042a4 <___vfprintf_internal_r+0x1f2c>
 8003140:	d8c13117 	ldw	r3,1220(sp)
 8003144:	10e3c83a 	sub	r17,r2,r3
 8003148:	4c433516 	blt	r9,r17,8003e20 <___vfprintf_internal_r+0x1aa8>
 800314c:	8805883a 	mov	r2,r17
 8003150:	88038116 	blt	r17,zero,8003f58 <___vfprintf_internal_r+0x1be0>
 8003154:	dcc12783 	ldbu	r19,1182(sp)
 8003158:	d8812b15 	stw	r2,1196(sp)
 800315c:	dc812d15 	stw	r18,1204(sp)
 8003160:	d8013215 	stw	zero,1224(sp)
 8003164:	d8013415 	stw	zero,1232(sp)
 8003168:	003e0306 	br	8002978 <__alt_data_end+0xfc002978>
 800316c:	da012a17 	ldw	r8,1192(sp)
 8003170:	df012a15 	stw	fp,1192(sp)
 8003174:	9839883a 	mov	fp,r19
 8003178:	dcc12b03 	ldbu	r19,1196(sp)
 800317c:	dcc12785 	stb	r19,1182(sp)
 8003180:	803d8f26 	beq	r16,zero,80027c0 <__alt_data_end+0xfc0027c0>
 8003184:	00c00044 	movi	r3,1
 8003188:	d8c12b15 	stw	r3,1196(sp)
 800318c:	dc010405 	stb	r16,1040(sp)
 8003190:	d8012785 	stb	zero,1182(sp)
 8003194:	003fb506 	br	800306c <__alt_data_end+0xfc00306c>
 8003198:	d8c12017 	ldw	r3,1152(sp)
 800319c:	003e3506 	br	8002a74 <__alt_data_end+0xfc002a74>
 80031a0:	10803fcc 	andi	r2,r2,255
 80031a4:	00c00044 	movi	r3,1
 80031a8:	10fddc1e 	bne	r2,r3,800291c <__alt_data_end+0xfc00291c>
 80031ac:	a800021e 	bne	r21,zero,80031b8 <___vfprintf_internal_r+0xe40>
 80031b0:	00800244 	movi	r2,9
 80031b4:	14801e2e 	bgeu	r2,r18,8003230 <___vfprintf_internal_r+0xeb8>
 80031b8:	dc012b15 	stw	r16,1196(sp)
 80031bc:	dc410e04 	addi	r17,sp,1080
 80031c0:	9021883a 	mov	r16,r18
 80031c4:	da012c15 	stw	r8,1200(sp)
 80031c8:	a825883a 	mov	r18,r21
 80031cc:	482b883a 	mov	r21,r9
 80031d0:	8009883a 	mov	r4,r16
 80031d4:	900b883a 	mov	r5,r18
 80031d8:	01800284 	movi	r6,10
 80031dc:	000f883a 	mov	r7,zero
 80031e0:	800bba40 	call	800bba4 <__umoddi3>
 80031e4:	10800c04 	addi	r2,r2,48
 80031e8:	8c7fffc4 	addi	r17,r17,-1
 80031ec:	8009883a 	mov	r4,r16
 80031f0:	900b883a 	mov	r5,r18
 80031f4:	01800284 	movi	r6,10
 80031f8:	000f883a 	mov	r7,zero
 80031fc:	88800005 	stb	r2,0(r17)
 8003200:	800b5640 	call	800b564 <__udivdi3>
 8003204:	1021883a 	mov	r16,r2
 8003208:	10c4b03a 	or	r2,r2,r3
 800320c:	1825883a 	mov	r18,r3
 8003210:	103fef1e 	bne	r2,zero,80031d0 <__alt_data_end+0xfc0031d0>
 8003214:	d9012817 	ldw	r4,1184(sp)
 8003218:	dc413115 	stw	r17,1220(sp)
 800321c:	dc012b17 	ldw	r16,1196(sp)
 8003220:	da012c17 	ldw	r8,1200(sp)
 8003224:	a813883a 	mov	r9,r21
 8003228:	2463c83a 	sub	r17,r4,r17
 800322c:	003dcd06 	br	8002964 <__alt_data_end+0xfc002964>
 8003230:	94800c04 	addi	r18,r18,48
 8003234:	d8c10dc4 	addi	r3,sp,1079
 8003238:	dc810dc5 	stb	r18,1079(sp)
 800323c:	dc413c17 	ldw	r17,1264(sp)
 8003240:	d8c13115 	stw	r3,1220(sp)
 8003244:	003dc706 	br	8002964 <__alt_data_end+0xfc002964>
 8003248:	00801944 	movi	r2,101
 800324c:	1400720e 	bge	r2,r16,8003418 <___vfprintf_internal_r+0x10a0>
 8003250:	d9013717 	ldw	r4,1244(sp)
 8003254:	d9413917 	ldw	r5,1252(sp)
 8003258:	000d883a 	mov	r6,zero
 800325c:	000f883a 	mov	r7,zero
 8003260:	d8c13d15 	stw	r3,1268(sp)
 8003264:	da013f15 	stw	r8,1276(sp)
 8003268:	800d5300 	call	800d530 <__eqdf2>
 800326c:	d8c13d17 	ldw	r3,1268(sp)
 8003270:	da013f17 	ldw	r8,1276(sp)
 8003274:	1000f41e 	bne	r2,zero,8003648 <___vfprintf_internal_r+0x12d0>
 8003278:	d8811f17 	ldw	r2,1148(sp)
 800327c:	01020074 	movhi	r4,2049
 8003280:	2106c404 	addi	r4,r4,6928
 8003284:	18c00044 	addi	r3,r3,1
 8003288:	10800044 	addi	r2,r2,1
 800328c:	41000015 	stw	r4,0(r8)
 8003290:	01000044 	movi	r4,1
 8003294:	41000115 	stw	r4,4(r8)
 8003298:	d8c12015 	stw	r3,1152(sp)
 800329c:	d8811f15 	stw	r2,1148(sp)
 80032a0:	010001c4 	movi	r4,7
 80032a4:	20828d16 	blt	r4,r2,8003cdc <___vfprintf_internal_r+0x1964>
 80032a8:	42000204 	addi	r8,r8,8
 80032ac:	d8812617 	ldw	r2,1176(sp)
 80032b0:	d9413317 	ldw	r5,1228(sp)
 80032b4:	11400216 	blt	r2,r5,80032c0 <___vfprintf_internal_r+0xf48>
 80032b8:	e080004c 	andi	r2,fp,1
 80032bc:	103e4126 	beq	r2,zero,8002bc4 <__alt_data_end+0xfc002bc4>
 80032c0:	d8813817 	ldw	r2,1248(sp)
 80032c4:	d9013517 	ldw	r4,1236(sp)
 80032c8:	d9413817 	ldw	r5,1248(sp)
 80032cc:	1887883a 	add	r3,r3,r2
 80032d0:	d8811f17 	ldw	r2,1148(sp)
 80032d4:	41000015 	stw	r4,0(r8)
 80032d8:	41400115 	stw	r5,4(r8)
 80032dc:	10800044 	addi	r2,r2,1
 80032e0:	d8c12015 	stw	r3,1152(sp)
 80032e4:	d8811f15 	stw	r2,1148(sp)
 80032e8:	010001c4 	movi	r4,7
 80032ec:	20830916 	blt	r4,r2,8003f14 <___vfprintf_internal_r+0x1b9c>
 80032f0:	42000204 	addi	r8,r8,8
 80032f4:	d8813317 	ldw	r2,1228(sp)
 80032f8:	143fffc4 	addi	r16,r2,-1
 80032fc:	043e310e 	bge	zero,r16,8002bc4 <__alt_data_end+0xfc002bc4>
 8003300:	04400404 	movi	r17,16
 8003304:	d8811f17 	ldw	r2,1148(sp)
 8003308:	8c007e0e 	bge	r17,r16,8003504 <___vfprintf_internal_r+0x118c>
 800330c:	01420074 	movhi	r5,2049
 8003310:	2946c484 	addi	r5,r5,6930
 8003314:	d9412c15 	stw	r5,1200(sp)
 8003318:	04c001c4 	movi	r19,7
 800331c:	00000306 	br	800332c <___vfprintf_internal_r+0xfb4>
 8003320:	42000204 	addi	r8,r8,8
 8003324:	843ffc04 	addi	r16,r16,-16
 8003328:	8c00790e 	bge	r17,r16,8003510 <___vfprintf_internal_r+0x1198>
 800332c:	18c00404 	addi	r3,r3,16
 8003330:	10800044 	addi	r2,r2,1
 8003334:	45000015 	stw	r20,0(r8)
 8003338:	44400115 	stw	r17,4(r8)
 800333c:	d8c12015 	stw	r3,1152(sp)
 8003340:	d8811f15 	stw	r2,1148(sp)
 8003344:	98bff60e 	bge	r19,r2,8003320 <__alt_data_end+0xfc003320>
 8003348:	b809883a 	mov	r4,r23
 800334c:	b00b883a 	mov	r5,r22
 8003350:	d9811e04 	addi	r6,sp,1144
 8003354:	80097b80 	call	80097b8 <__sprint_r>
 8003358:	103d1f1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 800335c:	d8c12017 	ldw	r3,1152(sp)
 8003360:	d8811f17 	ldw	r2,1148(sp)
 8003364:	da000404 	addi	r8,sp,16
 8003368:	003fee06 	br	8003324 <__alt_data_end+0xfc003324>
 800336c:	d9412e17 	ldw	r5,1208(sp)
 8003370:	d8812b17 	ldw	r2,1196(sp)
 8003374:	28a7c83a 	sub	r19,r5,r2
 8003378:	04fddc0e 	bge	zero,r19,8002aec <__alt_data_end+0xfc002aec>
 800337c:	05400404 	movi	r21,16
 8003380:	d8811f17 	ldw	r2,1148(sp)
 8003384:	acc3870e 	bge	r21,r19,80041a4 <___vfprintf_internal_r+0x1e2c>
 8003388:	01420074 	movhi	r5,2049
 800338c:	2946c484 	addi	r5,r5,6930
 8003390:	d9412c15 	stw	r5,1200(sp)
 8003394:	048001c4 	movi	r18,7
 8003398:	00000306 	br	80033a8 <___vfprintf_internal_r+0x1030>
 800339c:	9cfffc04 	addi	r19,r19,-16
 80033a0:	42000204 	addi	r8,r8,8
 80033a4:	acc0110e 	bge	r21,r19,80033ec <___vfprintf_internal_r+0x1074>
 80033a8:	18c00404 	addi	r3,r3,16
 80033ac:	10800044 	addi	r2,r2,1
 80033b0:	45000015 	stw	r20,0(r8)
 80033b4:	45400115 	stw	r21,4(r8)
 80033b8:	d8c12015 	stw	r3,1152(sp)
 80033bc:	d8811f15 	stw	r2,1148(sp)
 80033c0:	90bff60e 	bge	r18,r2,800339c <__alt_data_end+0xfc00339c>
 80033c4:	b809883a 	mov	r4,r23
 80033c8:	b00b883a 	mov	r5,r22
 80033cc:	d9811e04 	addi	r6,sp,1144
 80033d0:	80097b80 	call	80097b8 <__sprint_r>
 80033d4:	103d001e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 80033d8:	9cfffc04 	addi	r19,r19,-16
 80033dc:	d8c12017 	ldw	r3,1152(sp)
 80033e0:	d8811f17 	ldw	r2,1148(sp)
 80033e4:	da000404 	addi	r8,sp,16
 80033e8:	acffef16 	blt	r21,r19,80033a8 <__alt_data_end+0xfc0033a8>
 80033ec:	d9012c17 	ldw	r4,1200(sp)
 80033f0:	1cc7883a 	add	r3,r3,r19
 80033f4:	10800044 	addi	r2,r2,1
 80033f8:	41000015 	stw	r4,0(r8)
 80033fc:	44c00115 	stw	r19,4(r8)
 8003400:	d8c12015 	stw	r3,1152(sp)
 8003404:	d8811f15 	stw	r2,1148(sp)
 8003408:	010001c4 	movi	r4,7
 800340c:	20817816 	blt	r4,r2,80039f0 <___vfprintf_internal_r+0x1678>
 8003410:	42000204 	addi	r8,r8,8
 8003414:	003db506 	br	8002aec <__alt_data_end+0xfc002aec>
 8003418:	d9413317 	ldw	r5,1228(sp)
 800341c:	00800044 	movi	r2,1
 8003420:	18c00044 	addi	r3,r3,1
 8003424:	11413e0e 	bge	r2,r5,8003920 <___vfprintf_internal_r+0x15a8>
 8003428:	dc011f17 	ldw	r16,1148(sp)
 800342c:	d8813117 	ldw	r2,1220(sp)
 8003430:	d8c12015 	stw	r3,1152(sp)
 8003434:	84000044 	addi	r16,r16,1
 8003438:	40800015 	stw	r2,0(r8)
 800343c:	00800044 	movi	r2,1
 8003440:	40800115 	stw	r2,4(r8)
 8003444:	dc011f15 	stw	r16,1148(sp)
 8003448:	008001c4 	movi	r2,7
 800344c:	14015616 	blt	r2,r16,80039a8 <___vfprintf_internal_r+0x1630>
 8003450:	42000204 	addi	r8,r8,8
 8003454:	d9013817 	ldw	r4,1248(sp)
 8003458:	d9413517 	ldw	r5,1236(sp)
 800345c:	84000044 	addi	r16,r16,1
 8003460:	1907883a 	add	r3,r3,r4
 8003464:	41400015 	stw	r5,0(r8)
 8003468:	41000115 	stw	r4,4(r8)
 800346c:	d8c12015 	stw	r3,1152(sp)
 8003470:	dc011f15 	stw	r16,1148(sp)
 8003474:	008001c4 	movi	r2,7
 8003478:	14015416 	blt	r2,r16,80039cc <___vfprintf_internal_r+0x1654>
 800347c:	44400204 	addi	r17,r8,8
 8003480:	d9013717 	ldw	r4,1244(sp)
 8003484:	d9413917 	ldw	r5,1252(sp)
 8003488:	000d883a 	mov	r6,zero
 800348c:	000f883a 	mov	r7,zero
 8003490:	d8c13d15 	stw	r3,1268(sp)
 8003494:	800d5300 	call	800d530 <__eqdf2>
 8003498:	d8c13d17 	ldw	r3,1268(sp)
 800349c:	1000a726 	beq	r2,zero,800373c <___vfprintf_internal_r+0x13c4>
 80034a0:	d9013317 	ldw	r4,1228(sp)
 80034a4:	d9413117 	ldw	r5,1220(sp)
 80034a8:	84000044 	addi	r16,r16,1
 80034ac:	20bfffc4 	addi	r2,r4,-1
 80034b0:	1887883a 	add	r3,r3,r2
 80034b4:	29000044 	addi	r4,r5,1
 80034b8:	88800115 	stw	r2,4(r17)
 80034bc:	89000015 	stw	r4,0(r17)
 80034c0:	d8c12015 	stw	r3,1152(sp)
 80034c4:	dc011f15 	stw	r16,1148(sp)
 80034c8:	008001c4 	movi	r2,7
 80034cc:	14012d16 	blt	r2,r16,8003984 <___vfprintf_internal_r+0x160c>
 80034d0:	8c400204 	addi	r17,r17,8
 80034d4:	d9413a17 	ldw	r5,1256(sp)
 80034d8:	dcc122c4 	addi	r19,sp,1163
 80034dc:	84000044 	addi	r16,r16,1
 80034e0:	28c7883a 	add	r3,r5,r3
 80034e4:	8cc00015 	stw	r19,0(r17)
 80034e8:	89400115 	stw	r5,4(r17)
 80034ec:	d8c12015 	stw	r3,1152(sp)
 80034f0:	dc011f15 	stw	r16,1148(sp)
 80034f4:	008001c4 	movi	r2,7
 80034f8:	14000e16 	blt	r2,r16,8003534 <___vfprintf_internal_r+0x11bc>
 80034fc:	8a000204 	addi	r8,r17,8
 8003500:	003db006 	br	8002bc4 <__alt_data_end+0xfc002bc4>
 8003504:	01020074 	movhi	r4,2049
 8003508:	2106c484 	addi	r4,r4,6930
 800350c:	d9012c15 	stw	r4,1200(sp)
 8003510:	d9012c17 	ldw	r4,1200(sp)
 8003514:	1c07883a 	add	r3,r3,r16
 8003518:	44000115 	stw	r16,4(r8)
 800351c:	41000015 	stw	r4,0(r8)
 8003520:	10800044 	addi	r2,r2,1
 8003524:	d8c12015 	stw	r3,1152(sp)
 8003528:	d8811f15 	stw	r2,1148(sp)
 800352c:	010001c4 	movi	r4,7
 8003530:	20bda30e 	bge	r4,r2,8002bc0 <__alt_data_end+0xfc002bc0>
 8003534:	b809883a 	mov	r4,r23
 8003538:	b00b883a 	mov	r5,r22
 800353c:	d9811e04 	addi	r6,sp,1144
 8003540:	80097b80 	call	80097b8 <__sprint_r>
 8003544:	103ca41e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003548:	d8c12017 	ldw	r3,1152(sp)
 800354c:	da000404 	addi	r8,sp,16
 8003550:	003d9c06 	br	8002bc4 <__alt_data_end+0xfc002bc4>
 8003554:	b809883a 	mov	r4,r23
 8003558:	b00b883a 	mov	r5,r22
 800355c:	d9811e04 	addi	r6,sp,1144
 8003560:	80097b80 	call	80097b8 <__sprint_r>
 8003564:	103dd226 	beq	r2,zero,8002cb0 <__alt_data_end+0xfc002cb0>
 8003568:	003c9b06 	br	80027d8 <__alt_data_end+0xfc0027d8>
 800356c:	10803fcc 	andi	r2,r2,255
 8003570:	1000311e 	bne	r2,zero,8003638 <___vfprintf_internal_r+0x12c0>
 8003574:	e080004c 	andi	r2,fp,1
 8003578:	10002f26 	beq	r2,zero,8003638 <___vfprintf_internal_r+0x12c0>
 800357c:	00800c04 	movi	r2,48
 8003580:	d8c10dc4 	addi	r3,sp,1079
 8003584:	d8810dc5 	stb	r2,1079(sp)
 8003588:	dc413c17 	ldw	r17,1264(sp)
 800358c:	d8c13115 	stw	r3,1220(sp)
 8003590:	003cf406 	br	8002964 <__alt_data_end+0xfc002964>
 8003594:	b809883a 	mov	r4,r23
 8003598:	b00b883a 	mov	r5,r22
 800359c:	d9811e04 	addi	r6,sp,1144
 80035a0:	80097b80 	call	80097b8 <__sprint_r>
 80035a4:	103c8c1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 80035a8:	d8c12017 	ldw	r3,1152(sp)
 80035ac:	da000404 	addi	r8,sp,16
 80035b0:	003d7706 	br	8002b90 <__alt_data_end+0xfc002b90>
 80035b4:	b809883a 	mov	r4,r23
 80035b8:	b00b883a 	mov	r5,r22
 80035bc:	d9811e04 	addi	r6,sp,1144
 80035c0:	80097b80 	call	80097b8 <__sprint_r>
 80035c4:	103c841e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 80035c8:	d8c12017 	ldw	r3,1152(sp)
 80035cc:	da000404 	addi	r8,sp,16
 80035d0:	003d3506 	br	8002aa8 <__alt_data_end+0xfc002aa8>
 80035d4:	b809883a 	mov	r4,r23
 80035d8:	b00b883a 	mov	r5,r22
 80035dc:	d9811e04 	addi	r6,sp,1144
 80035e0:	80097b80 	call	80097b8 <__sprint_r>
 80035e4:	103c7c1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 80035e8:	d8c12017 	ldw	r3,1152(sp)
 80035ec:	da000404 	addi	r8,sp,16
 80035f0:	003d3b06 	br	8002ae0 <__alt_data_end+0xfc002ae0>
 80035f4:	d9413b17 	ldw	r5,1260(sp)
 80035f8:	d8c10e04 	addi	r3,sp,1080
 80035fc:	908003cc 	andi	r2,r18,15
 8003600:	a808973a 	slli	r4,r21,28
 8003604:	2885883a 	add	r2,r5,r2
 8003608:	9024d13a 	srli	r18,r18,4
 800360c:	10800003 	ldbu	r2,0(r2)
 8003610:	a82ad13a 	srli	r21,r21,4
 8003614:	18ffffc4 	addi	r3,r3,-1
 8003618:	24a4b03a 	or	r18,r4,r18
 800361c:	18800005 	stb	r2,0(r3)
 8003620:	9544b03a 	or	r2,r18,r21
 8003624:	103ff51e 	bne	r2,zero,80035fc <__alt_data_end+0xfc0035fc>
 8003628:	d9412817 	ldw	r5,1184(sp)
 800362c:	d8c13115 	stw	r3,1220(sp)
 8003630:	28e3c83a 	sub	r17,r5,r3
 8003634:	003ccb06 	br	8002964 <__alt_data_end+0xfc002964>
 8003638:	d8c10e04 	addi	r3,sp,1080
 800363c:	0023883a 	mov	r17,zero
 8003640:	d8c13115 	stw	r3,1220(sp)
 8003644:	003cc706 	br	8002964 <__alt_data_end+0xfc002964>
 8003648:	dc012617 	ldw	r16,1176(sp)
 800364c:	0401ab0e 	bge	zero,r16,8003cfc <___vfprintf_internal_r+0x1984>
 8003650:	d8813317 	ldw	r2,1228(sp)
 8003654:	d9413117 	ldw	r5,1220(sp)
 8003658:	d9013417 	ldw	r4,1232(sp)
 800365c:	1023883a 	mov	r17,r2
 8003660:	28a1883a 	add	r16,r5,r2
 8003664:	2080010e 	bge	r4,r2,800366c <___vfprintf_internal_r+0x12f4>
 8003668:	2023883a 	mov	r17,r4
 800366c:	04400b0e 	bge	zero,r17,800369c <___vfprintf_internal_r+0x1324>
 8003670:	d8811f17 	ldw	r2,1148(sp)
 8003674:	d9413117 	ldw	r5,1220(sp)
 8003678:	1c47883a 	add	r3,r3,r17
 800367c:	10800044 	addi	r2,r2,1
 8003680:	41400015 	stw	r5,0(r8)
 8003684:	44400115 	stw	r17,4(r8)
 8003688:	d8c12015 	stw	r3,1152(sp)
 800368c:	d8811f15 	stw	r2,1148(sp)
 8003690:	010001c4 	movi	r4,7
 8003694:	20826716 	blt	r4,r2,8004034 <___vfprintf_internal_r+0x1cbc>
 8003698:	42000204 	addi	r8,r8,8
 800369c:	88026316 	blt	r17,zero,800402c <___vfprintf_internal_r+0x1cb4>
 80036a0:	d8813417 	ldw	r2,1232(sp)
 80036a4:	1463c83a 	sub	r17,r2,r17
 80036a8:	0440590e 	bge	zero,r17,8003810 <___vfprintf_internal_r+0x1498>
 80036ac:	04c00404 	movi	r19,16
 80036b0:	d8811f17 	ldw	r2,1148(sp)
 80036b4:	9c41770e 	bge	r19,r17,8003c94 <___vfprintf_internal_r+0x191c>
 80036b8:	01420074 	movhi	r5,2049
 80036bc:	2946c484 	addi	r5,r5,6930
 80036c0:	d9412c15 	stw	r5,1200(sp)
 80036c4:	054001c4 	movi	r21,7
 80036c8:	00000306 	br	80036d8 <___vfprintf_internal_r+0x1360>
 80036cc:	42000204 	addi	r8,r8,8
 80036d0:	8c7ffc04 	addi	r17,r17,-16
 80036d4:	9c41720e 	bge	r19,r17,8003ca0 <___vfprintf_internal_r+0x1928>
 80036d8:	18c00404 	addi	r3,r3,16
 80036dc:	10800044 	addi	r2,r2,1
 80036e0:	45000015 	stw	r20,0(r8)
 80036e4:	44c00115 	stw	r19,4(r8)
 80036e8:	d8c12015 	stw	r3,1152(sp)
 80036ec:	d8811f15 	stw	r2,1148(sp)
 80036f0:	a8bff60e 	bge	r21,r2,80036cc <__alt_data_end+0xfc0036cc>
 80036f4:	b809883a 	mov	r4,r23
 80036f8:	b00b883a 	mov	r5,r22
 80036fc:	d9811e04 	addi	r6,sp,1144
 8003700:	80097b80 	call	80097b8 <__sprint_r>
 8003704:	103c341e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003708:	d8c12017 	ldw	r3,1152(sp)
 800370c:	d8811f17 	ldw	r2,1148(sp)
 8003710:	da000404 	addi	r8,sp,16
 8003714:	003fee06 	br	80036d0 <__alt_data_end+0xfc0036d0>
 8003718:	b809883a 	mov	r4,r23
 800371c:	b00b883a 	mov	r5,r22
 8003720:	d9811e04 	addi	r6,sp,1144
 8003724:	80097b80 	call	80097b8 <__sprint_r>
 8003728:	103c2b1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 800372c:	d8c12017 	ldw	r3,1152(sp)
 8003730:	d8812787 	ldb	r2,1182(sp)
 8003734:	da000404 	addi	r8,sp,16
 8003738:	003cce06 	br	8002a74 <__alt_data_end+0xfc002a74>
 800373c:	d8813317 	ldw	r2,1228(sp)
 8003740:	14ffffc4 	addi	r19,r2,-1
 8003744:	04ff630e 	bge	zero,r19,80034d4 <__alt_data_end+0xfc0034d4>
 8003748:	05400404 	movi	r21,16
 800374c:	acc0810e 	bge	r21,r19,8003954 <___vfprintf_internal_r+0x15dc>
 8003750:	01420074 	movhi	r5,2049
 8003754:	2946c484 	addi	r5,r5,6930
 8003758:	d9412c15 	stw	r5,1200(sp)
 800375c:	01c001c4 	movi	r7,7
 8003760:	00000306 	br	8003770 <___vfprintf_internal_r+0x13f8>
 8003764:	8c400204 	addi	r17,r17,8
 8003768:	9cfffc04 	addi	r19,r19,-16
 800376c:	acc07c0e 	bge	r21,r19,8003960 <___vfprintf_internal_r+0x15e8>
 8003770:	18c00404 	addi	r3,r3,16
 8003774:	84000044 	addi	r16,r16,1
 8003778:	8d000015 	stw	r20,0(r17)
 800377c:	8d400115 	stw	r21,4(r17)
 8003780:	d8c12015 	stw	r3,1152(sp)
 8003784:	dc011f15 	stw	r16,1148(sp)
 8003788:	3c3ff60e 	bge	r7,r16,8003764 <__alt_data_end+0xfc003764>
 800378c:	b809883a 	mov	r4,r23
 8003790:	b00b883a 	mov	r5,r22
 8003794:	d9811e04 	addi	r6,sp,1144
 8003798:	d9c13d15 	stw	r7,1268(sp)
 800379c:	80097b80 	call	80097b8 <__sprint_r>
 80037a0:	d9c13d17 	ldw	r7,1268(sp)
 80037a4:	103c0c1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 80037a8:	d8c12017 	ldw	r3,1152(sp)
 80037ac:	dc011f17 	ldw	r16,1148(sp)
 80037b0:	dc400404 	addi	r17,sp,16
 80037b4:	003fec06 	br	8003768 <__alt_data_end+0xfc003768>
 80037b8:	00800084 	movi	r2,2
 80037bc:	9546b03a 	or	r3,r18,r21
 80037c0:	003d7d06 	br	8002db8 <__alt_data_end+0xfc002db8>
 80037c4:	10803fcc 	andi	r2,r2,255
 80037c8:	1080201c 	xori	r2,r2,128
 80037cc:	10bfe004 	addi	r2,r2,-128
 80037d0:	01000c04 	movi	r4,48
 80037d4:	1101d726 	beq	r2,r4,8003f34 <___vfprintf_internal_r+0x1bbc>
 80037d8:	d9413117 	ldw	r5,1220(sp)
 80037dc:	d8812817 	ldw	r2,1184(sp)
 80037e0:	193fffc5 	stb	r4,-1(r3)
 80037e4:	297fffc4 	addi	r5,r5,-1
 80037e8:	d9413115 	stw	r5,1220(sp)
 80037ec:	1163c83a 	sub	r17,r2,r5
 80037f0:	003c5c06 	br	8002964 <__alt_data_end+0xfc002964>
 80037f4:	b809883a 	mov	r4,r23
 80037f8:	b00b883a 	mov	r5,r22
 80037fc:	d9811e04 	addi	r6,sp,1144
 8003800:	80097b80 	call	80097b8 <__sprint_r>
 8003804:	103bf41e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003808:	d8c12017 	ldw	r3,1152(sp)
 800380c:	da000404 	addi	r8,sp,16
 8003810:	d9413117 	ldw	r5,1220(sp)
 8003814:	d9013417 	ldw	r4,1232(sp)
 8003818:	d8812617 	ldw	r2,1176(sp)
 800381c:	2923883a 	add	r17,r5,r4
 8003820:	d9413317 	ldw	r5,1228(sp)
 8003824:	11400216 	blt	r2,r5,8003830 <___vfprintf_internal_r+0x14b8>
 8003828:	e100004c 	andi	r4,fp,1
 800382c:	20000d26 	beq	r4,zero,8003864 <___vfprintf_internal_r+0x14ec>
 8003830:	d9013817 	ldw	r4,1248(sp)
 8003834:	d9413517 	ldw	r5,1236(sp)
 8003838:	1907883a 	add	r3,r3,r4
 800383c:	d9011f17 	ldw	r4,1148(sp)
 8003840:	41400015 	stw	r5,0(r8)
 8003844:	d9413817 	ldw	r5,1248(sp)
 8003848:	21000044 	addi	r4,r4,1
 800384c:	d8c12015 	stw	r3,1152(sp)
 8003850:	41400115 	stw	r5,4(r8)
 8003854:	d9011f15 	stw	r4,1148(sp)
 8003858:	014001c4 	movi	r5,7
 800385c:	2901fd16 	blt	r5,r4,8004054 <___vfprintf_internal_r+0x1cdc>
 8003860:	42000204 	addi	r8,r8,8
 8003864:	d9013317 	ldw	r4,1228(sp)
 8003868:	2085c83a 	sub	r2,r4,r2
 800386c:	8449c83a 	sub	r4,r16,r17
 8003870:	1021883a 	mov	r16,r2
 8003874:	2080010e 	bge	r4,r2,800387c <___vfprintf_internal_r+0x1504>
 8003878:	2021883a 	mov	r16,r4
 800387c:	04000a0e 	bge	zero,r16,80038a8 <___vfprintf_internal_r+0x1530>
 8003880:	d9011f17 	ldw	r4,1148(sp)
 8003884:	1c07883a 	add	r3,r3,r16
 8003888:	44400015 	stw	r17,0(r8)
 800388c:	21000044 	addi	r4,r4,1
 8003890:	44000115 	stw	r16,4(r8)
 8003894:	d8c12015 	stw	r3,1152(sp)
 8003898:	d9011f15 	stw	r4,1148(sp)
 800389c:	014001c4 	movi	r5,7
 80038a0:	29020916 	blt	r5,r4,80040c8 <___vfprintf_internal_r+0x1d50>
 80038a4:	42000204 	addi	r8,r8,8
 80038a8:	80020116 	blt	r16,zero,80040b0 <___vfprintf_internal_r+0x1d38>
 80038ac:	1421c83a 	sub	r16,r2,r16
 80038b0:	043cc40e 	bge	zero,r16,8002bc4 <__alt_data_end+0xfc002bc4>
 80038b4:	04400404 	movi	r17,16
 80038b8:	d8811f17 	ldw	r2,1148(sp)
 80038bc:	8c3f110e 	bge	r17,r16,8003504 <__alt_data_end+0xfc003504>
 80038c0:	01420074 	movhi	r5,2049
 80038c4:	2946c484 	addi	r5,r5,6930
 80038c8:	d9412c15 	stw	r5,1200(sp)
 80038cc:	04c001c4 	movi	r19,7
 80038d0:	00000306 	br	80038e0 <___vfprintf_internal_r+0x1568>
 80038d4:	42000204 	addi	r8,r8,8
 80038d8:	843ffc04 	addi	r16,r16,-16
 80038dc:	8c3f0c0e 	bge	r17,r16,8003510 <__alt_data_end+0xfc003510>
 80038e0:	18c00404 	addi	r3,r3,16
 80038e4:	10800044 	addi	r2,r2,1
 80038e8:	45000015 	stw	r20,0(r8)
 80038ec:	44400115 	stw	r17,4(r8)
 80038f0:	d8c12015 	stw	r3,1152(sp)
 80038f4:	d8811f15 	stw	r2,1148(sp)
 80038f8:	98bff60e 	bge	r19,r2,80038d4 <__alt_data_end+0xfc0038d4>
 80038fc:	b809883a 	mov	r4,r23
 8003900:	b00b883a 	mov	r5,r22
 8003904:	d9811e04 	addi	r6,sp,1144
 8003908:	80097b80 	call	80097b8 <__sprint_r>
 800390c:	103bb21e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003910:	d8c12017 	ldw	r3,1152(sp)
 8003914:	d8811f17 	ldw	r2,1148(sp)
 8003918:	da000404 	addi	r8,sp,16
 800391c:	003fee06 	br	80038d8 <__alt_data_end+0xfc0038d8>
 8003920:	e088703a 	and	r4,fp,r2
 8003924:	203ec01e 	bne	r4,zero,8003428 <__alt_data_end+0xfc003428>
 8003928:	dc011f17 	ldw	r16,1148(sp)
 800392c:	d9013117 	ldw	r4,1220(sp)
 8003930:	40800115 	stw	r2,4(r8)
 8003934:	84000044 	addi	r16,r16,1
 8003938:	41000015 	stw	r4,0(r8)
 800393c:	d8c12015 	stw	r3,1152(sp)
 8003940:	dc011f15 	stw	r16,1148(sp)
 8003944:	008001c4 	movi	r2,7
 8003948:	14000e16 	blt	r2,r16,8003984 <___vfprintf_internal_r+0x160c>
 800394c:	44400204 	addi	r17,r8,8
 8003950:	003ee006 	br	80034d4 <__alt_data_end+0xfc0034d4>
 8003954:	01020074 	movhi	r4,2049
 8003958:	2106c484 	addi	r4,r4,6930
 800395c:	d9012c15 	stw	r4,1200(sp)
 8003960:	d8812c17 	ldw	r2,1200(sp)
 8003964:	1cc7883a 	add	r3,r3,r19
 8003968:	84000044 	addi	r16,r16,1
 800396c:	88800015 	stw	r2,0(r17)
 8003970:	8cc00115 	stw	r19,4(r17)
 8003974:	d8c12015 	stw	r3,1152(sp)
 8003978:	dc011f15 	stw	r16,1148(sp)
 800397c:	008001c4 	movi	r2,7
 8003980:	143ed30e 	bge	r2,r16,80034d0 <__alt_data_end+0xfc0034d0>
 8003984:	b809883a 	mov	r4,r23
 8003988:	b00b883a 	mov	r5,r22
 800398c:	d9811e04 	addi	r6,sp,1144
 8003990:	80097b80 	call	80097b8 <__sprint_r>
 8003994:	103b901e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003998:	d8c12017 	ldw	r3,1152(sp)
 800399c:	dc011f17 	ldw	r16,1148(sp)
 80039a0:	dc400404 	addi	r17,sp,16
 80039a4:	003ecb06 	br	80034d4 <__alt_data_end+0xfc0034d4>
 80039a8:	b809883a 	mov	r4,r23
 80039ac:	b00b883a 	mov	r5,r22
 80039b0:	d9811e04 	addi	r6,sp,1144
 80039b4:	80097b80 	call	80097b8 <__sprint_r>
 80039b8:	103b871e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 80039bc:	d8c12017 	ldw	r3,1152(sp)
 80039c0:	dc011f17 	ldw	r16,1148(sp)
 80039c4:	da000404 	addi	r8,sp,16
 80039c8:	003ea206 	br	8003454 <__alt_data_end+0xfc003454>
 80039cc:	b809883a 	mov	r4,r23
 80039d0:	b00b883a 	mov	r5,r22
 80039d4:	d9811e04 	addi	r6,sp,1144
 80039d8:	80097b80 	call	80097b8 <__sprint_r>
 80039dc:	103b7e1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 80039e0:	d8c12017 	ldw	r3,1152(sp)
 80039e4:	dc011f17 	ldw	r16,1148(sp)
 80039e8:	dc400404 	addi	r17,sp,16
 80039ec:	003ea406 	br	8003480 <__alt_data_end+0xfc003480>
 80039f0:	b809883a 	mov	r4,r23
 80039f4:	b00b883a 	mov	r5,r22
 80039f8:	d9811e04 	addi	r6,sp,1144
 80039fc:	80097b80 	call	80097b8 <__sprint_r>
 8003a00:	103b751e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003a04:	d8c12017 	ldw	r3,1152(sp)
 8003a08:	da000404 	addi	r8,sp,16
 8003a0c:	003c3706 	br	8002aec <__alt_data_end+0xfc002aec>
 8003a10:	04a5c83a 	sub	r18,zero,r18
 8003a14:	9004c03a 	cmpne	r2,r18,zero
 8003a18:	056bc83a 	sub	r21,zero,r21
 8003a1c:	a8abc83a 	sub	r21,r21,r2
 8003a20:	04c00b44 	movi	r19,45
 8003a24:	dcc12785 	stb	r19,1182(sp)
 8003a28:	da413215 	stw	r9,1224(sp)
 8003a2c:	00800044 	movi	r2,1
 8003a30:	9546b03a 	or	r3,r18,r21
 8003a34:	003bb106 	br	80028fc <__alt_data_end+0xfc0028fc>
 8003a38:	da013f15 	stw	r8,1276(sp)
 8003a3c:	da413e15 	stw	r9,1272(sp)
 8003a40:	80094140 	call	8009414 <__fpclassifyd>
 8003a44:	da013f17 	ldw	r8,1276(sp)
 8003a48:	da413e17 	ldw	r9,1272(sp)
 8003a4c:	1000e526 	beq	r2,zero,8003de4 <___vfprintf_internal_r+0x1a6c>
 8003a50:	04fff7c4 	movi	r19,-33
 8003a54:	00bfffc4 	movi	r2,-1
 8003a58:	84e6703a 	and	r19,r16,r19
 8003a5c:	48822926 	beq	r9,r2,8004304 <___vfprintf_internal_r+0x1f8c>
 8003a60:	008011c4 	movi	r2,71
 8003a64:	98821626 	beq	r19,r2,80042c0 <___vfprintf_internal_r+0x1f48>
 8003a68:	d9013917 	ldw	r4,1252(sp)
 8003a6c:	e0c04014 	ori	r3,fp,256
 8003a70:	d8c12d15 	stw	r3,1204(sp)
 8003a74:	20021f16 	blt	r4,zero,80042f4 <___vfprintf_internal_r+0x1f7c>
 8003a78:	dc413917 	ldw	r17,1252(sp)
 8003a7c:	d8012b05 	stb	zero,1196(sp)
 8003a80:	00801984 	movi	r2,102
 8003a84:	80814d26 	beq	r16,r2,8003fbc <___vfprintf_internal_r+0x1c44>
 8003a88:	00801184 	movi	r2,70
 8003a8c:	80814b26 	beq	r16,r2,8003fbc <___vfprintf_internal_r+0x1c44>
 8003a90:	00801144 	movi	r2,69
 8003a94:	98821d26 	beq	r19,r2,800430c <___vfprintf_internal_r+0x1f94>
 8003a98:	482b883a 	mov	r21,r9
 8003a9c:	d8812604 	addi	r2,sp,1176
 8003aa0:	d8800115 	stw	r2,4(sp)
 8003aa4:	d9413717 	ldw	r5,1244(sp)
 8003aa8:	d8812504 	addi	r2,sp,1172
 8003aac:	d8800215 	stw	r2,8(sp)
 8003ab0:	d8812104 	addi	r2,sp,1156
 8003ab4:	dd400015 	stw	r21,0(sp)
 8003ab8:	d8800315 	stw	r2,12(sp)
 8003abc:	b809883a 	mov	r4,r23
 8003ac0:	880d883a 	mov	r6,r17
 8003ac4:	01c00084 	movi	r7,2
 8003ac8:	da013f15 	stw	r8,1276(sp)
 8003acc:	da413e15 	stw	r9,1272(sp)
 8003ad0:	80047f00 	call	80047f0 <_dtoa_r>
 8003ad4:	d8813115 	stw	r2,1220(sp)
 8003ad8:	008019c4 	movi	r2,103
 8003adc:	da013f17 	ldw	r8,1276(sp)
 8003ae0:	da413e17 	ldw	r9,1272(sp)
 8003ae4:	80800226 	beq	r16,r2,8003af0 <___vfprintf_internal_r+0x1778>
 8003ae8:	008011c4 	movi	r2,71
 8003aec:	8081451e 	bne	r16,r2,8004004 <___vfprintf_internal_r+0x1c8c>
 8003af0:	e080004c 	andi	r2,fp,1
 8003af4:	10021e26 	beq	r2,zero,8004370 <___vfprintf_internal_r+0x1ff8>
 8003af8:	d8c13117 	ldw	r3,1220(sp)
 8003afc:	1d55883a 	add	r10,r3,r21
 8003b00:	d9013717 	ldw	r4,1244(sp)
 8003b04:	880b883a 	mov	r5,r17
 8003b08:	000d883a 	mov	r6,zero
 8003b0c:	000f883a 	mov	r7,zero
 8003b10:	da013f15 	stw	r8,1276(sp)
 8003b14:	da413e15 	stw	r9,1272(sp)
 8003b18:	da813d15 	stw	r10,1268(sp)
 8003b1c:	800d5300 	call	800d530 <__eqdf2>
 8003b20:	da013f17 	ldw	r8,1276(sp)
 8003b24:	da413e17 	ldw	r9,1272(sp)
 8003b28:	da813d17 	ldw	r10,1268(sp)
 8003b2c:	1001a126 	beq	r2,zero,80041b4 <___vfprintf_internal_r+0x1e3c>
 8003b30:	d8812117 	ldw	r2,1156(sp)
 8003b34:	1280062e 	bgeu	r2,r10,8003b50 <___vfprintf_internal_r+0x17d8>
 8003b38:	01000c04 	movi	r4,48
 8003b3c:	10c00044 	addi	r3,r2,1
 8003b40:	d8c12115 	stw	r3,1156(sp)
 8003b44:	11000005 	stb	r4,0(r2)
 8003b48:	d8812117 	ldw	r2,1156(sp)
 8003b4c:	12bffb36 	bltu	r2,r10,8003b3c <__alt_data_end+0xfc003b3c>
 8003b50:	d8c13117 	ldw	r3,1220(sp)
 8003b54:	10c5c83a 	sub	r2,r2,r3
 8003b58:	d8813315 	stw	r2,1228(sp)
 8003b5c:	008011c4 	movi	r2,71
 8003b60:	98818926 	beq	r19,r2,8004188 <___vfprintf_internal_r+0x1e10>
 8003b64:	00801944 	movi	r2,101
 8003b68:	14023c0e 	bge	r2,r16,800445c <___vfprintf_internal_r+0x20e4>
 8003b6c:	d8c12617 	ldw	r3,1176(sp)
 8003b70:	00801984 	movi	r2,102
 8003b74:	d8c13415 	stw	r3,1232(sp)
 8003b78:	8081ef26 	beq	r16,r2,8004338 <___vfprintf_internal_r+0x1fc0>
 8003b7c:	d8c13417 	ldw	r3,1232(sp)
 8003b80:	d9013317 	ldw	r4,1228(sp)
 8003b84:	1901e316 	blt	r3,r4,8004314 <___vfprintf_internal_r+0x1f9c>
 8003b88:	e080004c 	andi	r2,fp,1
 8003b8c:	1001f426 	beq	r2,zero,8004360 <___vfprintf_internal_r+0x1fe8>
 8003b90:	d8c13417 	ldw	r3,1232(sp)
 8003b94:	1c400044 	addi	r17,r3,1
 8003b98:	8839883a 	mov	fp,r17
 8003b9c:	8801e416 	blt	r17,zero,8004330 <___vfprintf_internal_r+0x1fb8>
 8003ba0:	dd412b07 	ldb	r21,1196(sp)
 8003ba4:	a801701e 	bne	r21,zero,8004168 <___vfprintf_internal_r+0x1df0>
 8003ba8:	df012b15 	stw	fp,1196(sp)
 8003bac:	dcc12783 	ldbu	r19,1182(sp)
 8003bb0:	df012d17 	ldw	fp,1204(sp)
 8003bb4:	d8013215 	stw	zero,1224(sp)
 8003bb8:	dc812d15 	stw	r18,1204(sp)
 8003bbc:	003b6e06 	br	8002978 <__alt_data_end+0xfc002978>
 8003bc0:	e080040c 	andi	r2,fp,16
 8003bc4:	1000b51e 	bne	r2,zero,8003e9c <___vfprintf_internal_r+0x1b24>
 8003bc8:	e080100c 	andi	r2,fp,64
 8003bcc:	10015b26 	beq	r2,zero,800413c <___vfprintf_internal_r+0x1dc4>
 8003bd0:	d9012d17 	ldw	r4,1204(sp)
 8003bd4:	d9412f17 	ldw	r5,1212(sp)
 8003bd8:	20800017 	ldw	r2,0(r4)
 8003bdc:	21000104 	addi	r4,r4,4
 8003be0:	d9012d15 	stw	r4,1204(sp)
 8003be4:	1140000d 	sth	r5,0(r2)
 8003be8:	003a2006 	br	800246c <__alt_data_end+0xfc00246c>
 8003bec:	e0c0100c 	andi	r3,fp,64
 8003bf0:	1800a226 	beq	r3,zero,8003e7c <___vfprintf_internal_r+0x1b04>
 8003bf4:	d8c12d17 	ldw	r3,1204(sp)
 8003bf8:	1480000b 	ldhu	r18,0(r2)
 8003bfc:	002b883a 	mov	r21,zero
 8003c00:	18c00104 	addi	r3,r3,4
 8003c04:	d8c12d15 	stw	r3,1204(sp)
 8003c08:	0005883a 	mov	r2,zero
 8003c0c:	9007883a 	mov	r3,r18
 8003c10:	003c6906 	br	8002db8 <__alt_data_end+0xfc002db8>
 8003c14:	e0c0100c 	andi	r3,fp,64
 8003c18:	18009026 	beq	r3,zero,8003e5c <___vfprintf_internal_r+0x1ae4>
 8003c1c:	1480000b 	ldhu	r18,0(r2)
 8003c20:	d8812d17 	ldw	r2,1204(sp)
 8003c24:	002b883a 	mov	r21,zero
 8003c28:	9007883a 	mov	r3,r18
 8003c2c:	10800104 	addi	r2,r2,4
 8003c30:	d8812d15 	stw	r2,1204(sp)
 8003c34:	00800044 	movi	r2,1
 8003c38:	003c5f06 	br	8002db8 <__alt_data_end+0xfc002db8>
 8003c3c:	e0c0100c 	andi	r3,fp,64
 8003c40:	18008026 	beq	r3,zero,8003e44 <___vfprintf_internal_r+0x1acc>
 8003c44:	d9012d17 	ldw	r4,1204(sp)
 8003c48:	1480000b 	ldhu	r18,0(r2)
 8003c4c:	002b883a 	mov	r21,zero
 8003c50:	21000104 	addi	r4,r4,4
 8003c54:	d9012d15 	stw	r4,1204(sp)
 8003c58:	003c7906 	br	8002e40 <__alt_data_end+0xfc002e40>
 8003c5c:	e080100c 	andi	r2,fp,64
 8003c60:	10007126 	beq	r2,zero,8003e28 <___vfprintf_internal_r+0x1ab0>
 8003c64:	1c80000f 	ldh	r18,0(r3)
 8003c68:	d8812d17 	ldw	r2,1204(sp)
 8003c6c:	902bd7fa 	srai	r21,r18,31
 8003c70:	10800104 	addi	r2,r2,4
 8003c74:	d8812d15 	stw	r2,1204(sp)
 8003c78:	a805883a 	mov	r2,r21
 8003c7c:	003b1a06 	br	80028e8 <__alt_data_end+0xfc0028e8>
 8003c80:	e4000007 	ldb	r16,0(fp)
 8003c84:	e005883a 	mov	r2,fp
 8003c88:	003a2306 	br	8002518 <__alt_data_end+0xfc002518>
 8003c8c:	00800084 	movi	r2,2
 8003c90:	003c4906 	br	8002db8 <__alt_data_end+0xfc002db8>
 8003c94:	01020074 	movhi	r4,2049
 8003c98:	2106c484 	addi	r4,r4,6930
 8003c9c:	d9012c15 	stw	r4,1200(sp)
 8003ca0:	d9012c17 	ldw	r4,1200(sp)
 8003ca4:	1c47883a 	add	r3,r3,r17
 8003ca8:	10800044 	addi	r2,r2,1
 8003cac:	41000015 	stw	r4,0(r8)
 8003cb0:	44400115 	stw	r17,4(r8)
 8003cb4:	d8c12015 	stw	r3,1152(sp)
 8003cb8:	d8811f15 	stw	r2,1148(sp)
 8003cbc:	010001c4 	movi	r4,7
 8003cc0:	20becc16 	blt	r4,r2,80037f4 <__alt_data_end+0xfc0037f4>
 8003cc4:	42000204 	addi	r8,r8,8
 8003cc8:	003ed106 	br	8003810 <__alt_data_end+0xfc003810>
 8003ccc:	01020074 	movhi	r4,2049
 8003cd0:	2106c484 	addi	r4,r4,6930
 8003cd4:	d9012c15 	stw	r4,1200(sp)
 8003cd8:	003ba306 	br	8002b68 <__alt_data_end+0xfc002b68>
 8003cdc:	b809883a 	mov	r4,r23
 8003ce0:	b00b883a 	mov	r5,r22
 8003ce4:	d9811e04 	addi	r6,sp,1144
 8003ce8:	80097b80 	call	80097b8 <__sprint_r>
 8003cec:	103aba1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003cf0:	d8c12017 	ldw	r3,1152(sp)
 8003cf4:	da000404 	addi	r8,sp,16
 8003cf8:	003d6c06 	br	80032ac <__alt_data_end+0xfc0032ac>
 8003cfc:	d8811f17 	ldw	r2,1148(sp)
 8003d00:	01420074 	movhi	r5,2049
 8003d04:	01000044 	movi	r4,1
 8003d08:	18c00044 	addi	r3,r3,1
 8003d0c:	10800044 	addi	r2,r2,1
 8003d10:	2946c404 	addi	r5,r5,6928
 8003d14:	41000115 	stw	r4,4(r8)
 8003d18:	41400015 	stw	r5,0(r8)
 8003d1c:	d8c12015 	stw	r3,1152(sp)
 8003d20:	d8811f15 	stw	r2,1148(sp)
 8003d24:	010001c4 	movi	r4,7
 8003d28:	20806716 	blt	r4,r2,8003ec8 <___vfprintf_internal_r+0x1b50>
 8003d2c:	42000204 	addi	r8,r8,8
 8003d30:	8000041e 	bne	r16,zero,8003d44 <___vfprintf_internal_r+0x19cc>
 8003d34:	d8813317 	ldw	r2,1228(sp)
 8003d38:	1000021e 	bne	r2,zero,8003d44 <___vfprintf_internal_r+0x19cc>
 8003d3c:	e080004c 	andi	r2,fp,1
 8003d40:	103ba026 	beq	r2,zero,8002bc4 <__alt_data_end+0xfc002bc4>
 8003d44:	d9013817 	ldw	r4,1248(sp)
 8003d48:	d8811f17 	ldw	r2,1148(sp)
 8003d4c:	d9413517 	ldw	r5,1236(sp)
 8003d50:	1907883a 	add	r3,r3,r4
 8003d54:	10800044 	addi	r2,r2,1
 8003d58:	41000115 	stw	r4,4(r8)
 8003d5c:	41400015 	stw	r5,0(r8)
 8003d60:	d8c12015 	stw	r3,1152(sp)
 8003d64:	d8811f15 	stw	r2,1148(sp)
 8003d68:	010001c4 	movi	r4,7
 8003d6c:	20815716 	blt	r4,r2,80042cc <___vfprintf_internal_r+0x1f54>
 8003d70:	42000204 	addi	r8,r8,8
 8003d74:	0421c83a 	sub	r16,zero,r16
 8003d78:	0400810e 	bge	zero,r16,8003f80 <___vfprintf_internal_r+0x1c08>
 8003d7c:	04400404 	movi	r17,16
 8003d80:	8c00bd0e 	bge	r17,r16,8004078 <___vfprintf_internal_r+0x1d00>
 8003d84:	01420074 	movhi	r5,2049
 8003d88:	2946c484 	addi	r5,r5,6930
 8003d8c:	d9412c15 	stw	r5,1200(sp)
 8003d90:	04c001c4 	movi	r19,7
 8003d94:	00000306 	br	8003da4 <___vfprintf_internal_r+0x1a2c>
 8003d98:	42000204 	addi	r8,r8,8
 8003d9c:	843ffc04 	addi	r16,r16,-16
 8003da0:	8c00b80e 	bge	r17,r16,8004084 <___vfprintf_internal_r+0x1d0c>
 8003da4:	18c00404 	addi	r3,r3,16
 8003da8:	10800044 	addi	r2,r2,1
 8003dac:	45000015 	stw	r20,0(r8)
 8003db0:	44400115 	stw	r17,4(r8)
 8003db4:	d8c12015 	stw	r3,1152(sp)
 8003db8:	d8811f15 	stw	r2,1148(sp)
 8003dbc:	98bff60e 	bge	r19,r2,8003d98 <__alt_data_end+0xfc003d98>
 8003dc0:	b809883a 	mov	r4,r23
 8003dc4:	b00b883a 	mov	r5,r22
 8003dc8:	d9811e04 	addi	r6,sp,1144
 8003dcc:	80097b80 	call	80097b8 <__sprint_r>
 8003dd0:	103a811e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003dd4:	d8c12017 	ldw	r3,1152(sp)
 8003dd8:	d8811f17 	ldw	r2,1148(sp)
 8003ddc:	da000404 	addi	r8,sp,16
 8003de0:	003fee06 	br	8003d9c <__alt_data_end+0xfc003d9c>
 8003de4:	008011c4 	movi	r2,71
 8003de8:	1400db16 	blt	r2,r16,8004158 <___vfprintf_internal_r+0x1de0>
 8003dec:	01020074 	movhi	r4,2049
 8003df0:	2106b604 	addi	r4,r4,6872
 8003df4:	d9013115 	stw	r4,1220(sp)
 8003df8:	00c000c4 	movi	r3,3
 8003dfc:	00bfdfc4 	movi	r2,-129
 8003e00:	d8c12b15 	stw	r3,1196(sp)
 8003e04:	e0b8703a 	and	fp,fp,r2
 8003e08:	dcc12783 	ldbu	r19,1182(sp)
 8003e0c:	dc812d15 	stw	r18,1204(sp)
 8003e10:	1823883a 	mov	r17,r3
 8003e14:	d8013215 	stw	zero,1224(sp)
 8003e18:	d8013415 	stw	zero,1232(sp)
 8003e1c:	003ad606 	br	8002978 <__alt_data_end+0xfc002978>
 8003e20:	4823883a 	mov	r17,r9
 8003e24:	003cc906 	br	800314c <__alt_data_end+0xfc00314c>
 8003e28:	1c800017 	ldw	r18,0(r3)
 8003e2c:	d8c12d17 	ldw	r3,1204(sp)
 8003e30:	902bd7fa 	srai	r21,r18,31
 8003e34:	18c00104 	addi	r3,r3,4
 8003e38:	d8c12d15 	stw	r3,1204(sp)
 8003e3c:	a805883a 	mov	r2,r21
 8003e40:	003aa906 	br	80028e8 <__alt_data_end+0xfc0028e8>
 8003e44:	d9412d17 	ldw	r5,1204(sp)
 8003e48:	14800017 	ldw	r18,0(r2)
 8003e4c:	002b883a 	mov	r21,zero
 8003e50:	29400104 	addi	r5,r5,4
 8003e54:	d9412d15 	stw	r5,1204(sp)
 8003e58:	003bf906 	br	8002e40 <__alt_data_end+0xfc002e40>
 8003e5c:	d8c12d17 	ldw	r3,1204(sp)
 8003e60:	14800017 	ldw	r18,0(r2)
 8003e64:	002b883a 	mov	r21,zero
 8003e68:	18c00104 	addi	r3,r3,4
 8003e6c:	d8c12d15 	stw	r3,1204(sp)
 8003e70:	00800044 	movi	r2,1
 8003e74:	9007883a 	mov	r3,r18
 8003e78:	003bcf06 	br	8002db8 <__alt_data_end+0xfc002db8>
 8003e7c:	d9012d17 	ldw	r4,1204(sp)
 8003e80:	14800017 	ldw	r18,0(r2)
 8003e84:	002b883a 	mov	r21,zero
 8003e88:	21000104 	addi	r4,r4,4
 8003e8c:	d9012d15 	stw	r4,1204(sp)
 8003e90:	0005883a 	mov	r2,zero
 8003e94:	9007883a 	mov	r3,r18
 8003e98:	003bc706 	br	8002db8 <__alt_data_end+0xfc002db8>
 8003e9c:	d9412d17 	ldw	r5,1204(sp)
 8003ea0:	d8c12f17 	ldw	r3,1212(sp)
 8003ea4:	28800017 	ldw	r2,0(r5)
 8003ea8:	29400104 	addi	r5,r5,4
 8003eac:	d9412d15 	stw	r5,1204(sp)
 8003eb0:	10c00015 	stw	r3,0(r2)
 8003eb4:	00396d06 	br	800246c <__alt_data_end+0xfc00246c>
 8003eb8:	01020074 	movhi	r4,2049
 8003ebc:	2106b404 	addi	r4,r4,6864
 8003ec0:	d9013115 	stw	r4,1220(sp)
 8003ec4:	003ba206 	br	8002d50 <__alt_data_end+0xfc002d50>
 8003ec8:	b809883a 	mov	r4,r23
 8003ecc:	b00b883a 	mov	r5,r22
 8003ed0:	d9811e04 	addi	r6,sp,1144
 8003ed4:	80097b80 	call	80097b8 <__sprint_r>
 8003ed8:	103a3f1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003edc:	dc012617 	ldw	r16,1176(sp)
 8003ee0:	d8c12017 	ldw	r3,1152(sp)
 8003ee4:	da000404 	addi	r8,sp,16
 8003ee8:	003f9106 	br	8003d30 <__alt_data_end+0xfc003d30>
 8003eec:	e0800044 	addi	r2,fp,1
 8003ef0:	9cc00814 	ori	r19,r19,32
 8003ef4:	e4000047 	ldb	r16,1(fp)
 8003ef8:	00398706 	br	8002518 <__alt_data_end+0xfc002518>
 8003efc:	d8812e17 	ldw	r2,1208(sp)
 8003f00:	d8c12d15 	stw	r3,1204(sp)
 8003f04:	0085c83a 	sub	r2,zero,r2
 8003f08:	d8812e15 	stw	r2,1208(sp)
 8003f0c:	e005883a 	mov	r2,fp
 8003f10:	003a3a06 	br	80027fc <__alt_data_end+0xfc0027fc>
 8003f14:	b809883a 	mov	r4,r23
 8003f18:	b00b883a 	mov	r5,r22
 8003f1c:	d9811e04 	addi	r6,sp,1144
 8003f20:	80097b80 	call	80097b8 <__sprint_r>
 8003f24:	103a2c1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003f28:	d8c12017 	ldw	r3,1152(sp)
 8003f2c:	da000404 	addi	r8,sp,16
 8003f30:	003cf006 	br	80032f4 <__alt_data_end+0xfc0032f4>
 8003f34:	d8c12817 	ldw	r3,1184(sp)
 8003f38:	d9013117 	ldw	r4,1220(sp)
 8003f3c:	1923c83a 	sub	r17,r3,r4
 8003f40:	003a8806 	br	8002964 <__alt_data_end+0xfc002964>
 8003f44:	da013f15 	stw	r8,1276(sp)
 8003f48:	80022e00 	call	80022e0 <strlen>
 8003f4c:	1023883a 	mov	r17,r2
 8003f50:	da013f17 	ldw	r8,1276(sp)
 8003f54:	883c7f0e 	bge	r17,zero,8003154 <__alt_data_end+0xfc003154>
 8003f58:	0005883a 	mov	r2,zero
 8003f5c:	003c7d06 	br	8003154 <__alt_data_end+0xfc003154>
 8003f60:	b809883a 	mov	r4,r23
 8003f64:	b00b883a 	mov	r5,r22
 8003f68:	d9811e04 	addi	r6,sp,1144
 8003f6c:	80097b80 	call	80097b8 <__sprint_r>
 8003f70:	103a191e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8003f74:	d8c12017 	ldw	r3,1152(sp)
 8003f78:	d8811f17 	ldw	r2,1148(sp)
 8003f7c:	da000404 	addi	r8,sp,16
 8003f80:	d9413317 	ldw	r5,1228(sp)
 8003f84:	d9013117 	ldw	r4,1220(sp)
 8003f88:	10800044 	addi	r2,r2,1
 8003f8c:	28c7883a 	add	r3,r5,r3
 8003f90:	41000015 	stw	r4,0(r8)
 8003f94:	41400115 	stw	r5,4(r8)
 8003f98:	d8c12015 	stw	r3,1152(sp)
 8003f9c:	d8811f15 	stw	r2,1148(sp)
 8003fa0:	010001c4 	movi	r4,7
 8003fa4:	20bb060e 	bge	r4,r2,8002bc0 <__alt_data_end+0xfc002bc0>
 8003fa8:	003d6206 	br	8003534 <__alt_data_end+0xfc003534>
 8003fac:	01020074 	movhi	r4,2049
 8003fb0:	2106c884 	addi	r4,r4,6946
 8003fb4:	d9013615 	stw	r4,1240(sp)
 8003fb8:	003aa306 	br	8002a48 <__alt_data_end+0xfc002a48>
 8003fbc:	d8812604 	addi	r2,sp,1176
 8003fc0:	d8800115 	stw	r2,4(sp)
 8003fc4:	d9413717 	ldw	r5,1244(sp)
 8003fc8:	d8812504 	addi	r2,sp,1172
 8003fcc:	d8800215 	stw	r2,8(sp)
 8003fd0:	d8812104 	addi	r2,sp,1156
 8003fd4:	da400015 	stw	r9,0(sp)
 8003fd8:	d8800315 	stw	r2,12(sp)
 8003fdc:	b809883a 	mov	r4,r23
 8003fe0:	880d883a 	mov	r6,r17
 8003fe4:	01c000c4 	movi	r7,3
 8003fe8:	da013f15 	stw	r8,1276(sp)
 8003fec:	da413e15 	stw	r9,1272(sp)
 8003ff0:	80047f00 	call	80047f0 <_dtoa_r>
 8003ff4:	da413e17 	ldw	r9,1272(sp)
 8003ff8:	da013f17 	ldw	r8,1276(sp)
 8003ffc:	d8813115 	stw	r2,1220(sp)
 8004000:	482b883a 	mov	r21,r9
 8004004:	d8c13117 	ldw	r3,1220(sp)
 8004008:	00801184 	movi	r2,70
 800400c:	1d55883a 	add	r10,r3,r21
 8004010:	98bebb1e 	bne	r19,r2,8003b00 <__alt_data_end+0xfc003b00>
 8004014:	19000007 	ldb	r4,0(r3)
 8004018:	00800c04 	movi	r2,48
 800401c:	2080dd26 	beq	r4,r2,8004394 <___vfprintf_internal_r+0x201c>
 8004020:	d8c12617 	ldw	r3,1176(sp)
 8004024:	50d5883a 	add	r10,r10,r3
 8004028:	003eb506 	br	8003b00 <__alt_data_end+0xfc003b00>
 800402c:	0023883a 	mov	r17,zero
 8004030:	003d9b06 	br	80036a0 <__alt_data_end+0xfc0036a0>
 8004034:	b809883a 	mov	r4,r23
 8004038:	b00b883a 	mov	r5,r22
 800403c:	d9811e04 	addi	r6,sp,1144
 8004040:	80097b80 	call	80097b8 <__sprint_r>
 8004044:	1039e41e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8004048:	d8c12017 	ldw	r3,1152(sp)
 800404c:	da000404 	addi	r8,sp,16
 8004050:	003d9206 	br	800369c <__alt_data_end+0xfc00369c>
 8004054:	b809883a 	mov	r4,r23
 8004058:	b00b883a 	mov	r5,r22
 800405c:	d9811e04 	addi	r6,sp,1144
 8004060:	80097b80 	call	80097b8 <__sprint_r>
 8004064:	1039dc1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 8004068:	d8812617 	ldw	r2,1176(sp)
 800406c:	d8c12017 	ldw	r3,1152(sp)
 8004070:	da000404 	addi	r8,sp,16
 8004074:	003dfb06 	br	8003864 <__alt_data_end+0xfc003864>
 8004078:	01020074 	movhi	r4,2049
 800407c:	2106c484 	addi	r4,r4,6930
 8004080:	d9012c15 	stw	r4,1200(sp)
 8004084:	d9012c17 	ldw	r4,1200(sp)
 8004088:	1c07883a 	add	r3,r3,r16
 800408c:	10800044 	addi	r2,r2,1
 8004090:	41000015 	stw	r4,0(r8)
 8004094:	44000115 	stw	r16,4(r8)
 8004098:	d8c12015 	stw	r3,1152(sp)
 800409c:	d8811f15 	stw	r2,1148(sp)
 80040a0:	010001c4 	movi	r4,7
 80040a4:	20bfae16 	blt	r4,r2,8003f60 <__alt_data_end+0xfc003f60>
 80040a8:	42000204 	addi	r8,r8,8
 80040ac:	003fb406 	br	8003f80 <__alt_data_end+0xfc003f80>
 80040b0:	0021883a 	mov	r16,zero
 80040b4:	003dfd06 	br	80038ac <__alt_data_end+0xfc0038ac>
 80040b8:	01420074 	movhi	r5,2049
 80040bc:	2946c884 	addi	r5,r5,6946
 80040c0:	d9413615 	stw	r5,1240(sp)
 80040c4:	003ae306 	br	8002c54 <__alt_data_end+0xfc002c54>
 80040c8:	b809883a 	mov	r4,r23
 80040cc:	b00b883a 	mov	r5,r22
 80040d0:	d9811e04 	addi	r6,sp,1144
 80040d4:	80097b80 	call	80097b8 <__sprint_r>
 80040d8:	1039bf1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 80040dc:	d8812617 	ldw	r2,1176(sp)
 80040e0:	d9413317 	ldw	r5,1228(sp)
 80040e4:	d8c12017 	ldw	r3,1152(sp)
 80040e8:	da000404 	addi	r8,sp,16
 80040ec:	2885c83a 	sub	r2,r5,r2
 80040f0:	003ded06 	br	80038a8 <__alt_data_end+0xfc0038a8>
 80040f4:	00800184 	movi	r2,6
 80040f8:	1240012e 	bgeu	r2,r9,8004100 <___vfprintf_internal_r+0x1d88>
 80040fc:	1013883a 	mov	r9,r2
 8004100:	4823883a 	mov	r17,r9
 8004104:	4805883a 	mov	r2,r9
 8004108:	4800b216 	blt	r9,zero,80043d4 <___vfprintf_internal_r+0x205c>
 800410c:	01420074 	movhi	r5,2049
 8004110:	2946c204 	addi	r5,r5,6920
 8004114:	d8812b15 	stw	r2,1196(sp)
 8004118:	dc812d15 	stw	r18,1204(sp)
 800411c:	d8013215 	stw	zero,1224(sp)
 8004120:	d8013415 	stw	zero,1232(sp)
 8004124:	d9413115 	stw	r5,1220(sp)
 8004128:	0005883a 	mov	r2,zero
 800412c:	003a1906 	br	8002994 <__alt_data_end+0xfc002994>
 8004130:	04c00b44 	movi	r19,45
 8004134:	dcc12785 	stb	r19,1182(sp)
 8004138:	003b0006 	br	8002d3c <__alt_data_end+0xfc002d3c>
 800413c:	d8c12d17 	ldw	r3,1204(sp)
 8004140:	d9012f17 	ldw	r4,1212(sp)
 8004144:	18800017 	ldw	r2,0(r3)
 8004148:	18c00104 	addi	r3,r3,4
 800414c:	d8c12d15 	stw	r3,1204(sp)
 8004150:	11000015 	stw	r4,0(r2)
 8004154:	0038c506 	br	800246c <__alt_data_end+0xfc00246c>
 8004158:	01420074 	movhi	r5,2049
 800415c:	2946b704 	addi	r5,r5,6876
 8004160:	d9413115 	stw	r5,1220(sp)
 8004164:	003f2406 	br	8003df8 <__alt_data_end+0xfc003df8>
 8004168:	00800b44 	movi	r2,45
 800416c:	d8812785 	stb	r2,1182(sp)
 8004170:	df012b15 	stw	fp,1196(sp)
 8004174:	d8013215 	stw	zero,1224(sp)
 8004178:	df012d17 	ldw	fp,1204(sp)
 800417c:	00800b44 	movi	r2,45
 8004180:	dc812d15 	stw	r18,1204(sp)
 8004184:	003a0006 	br	8002988 <__alt_data_end+0xfc002988>
 8004188:	d8c12617 	ldw	r3,1176(sp)
 800418c:	00bfff44 	movi	r2,-3
 8004190:	18800a16 	blt	r3,r2,80041bc <___vfprintf_internal_r+0x1e44>
 8004194:	48c00916 	blt	r9,r3,80041bc <___vfprintf_internal_r+0x1e44>
 8004198:	d8c13415 	stw	r3,1232(sp)
 800419c:	040019c4 	movi	r16,103
 80041a0:	003e7606 	br	8003b7c <__alt_data_end+0xfc003b7c>
 80041a4:	01020074 	movhi	r4,2049
 80041a8:	2106c484 	addi	r4,r4,6930
 80041ac:	d9012c15 	stw	r4,1200(sp)
 80041b0:	003c8e06 	br	80033ec <__alt_data_end+0xfc0033ec>
 80041b4:	5005883a 	mov	r2,r10
 80041b8:	003e6506 	br	8003b50 <__alt_data_end+0xfc003b50>
 80041bc:	843fff84 	addi	r16,r16,-2
 80041c0:	1d7fffc4 	addi	r21,r3,-1
 80041c4:	dd412615 	stw	r21,1176(sp)
 80041c8:	dc0122c5 	stb	r16,1163(sp)
 80041cc:	a8009216 	blt	r21,zero,8004418 <___vfprintf_internal_r+0x20a0>
 80041d0:	00800ac4 	movi	r2,43
 80041d4:	d8812305 	stb	r2,1164(sp)
 80041d8:	00800244 	movi	r2,9
 80041dc:	1540660e 	bge	r2,r21,8004378 <___vfprintf_internal_r+0x2000>
 80041e0:	dcc122c4 	addi	r19,sp,1163
 80041e4:	dc012c15 	stw	r16,1200(sp)
 80041e8:	4023883a 	mov	r17,r8
 80041ec:	9821883a 	mov	r16,r19
 80041f0:	a809883a 	mov	r4,r21
 80041f4:	01400284 	movi	r5,10
 80041f8:	800c2800 	call	800c280 <__modsi3>
 80041fc:	10800c04 	addi	r2,r2,48
 8004200:	843fffc4 	addi	r16,r16,-1
 8004204:	a809883a 	mov	r4,r21
 8004208:	01400284 	movi	r5,10
 800420c:	80800005 	stb	r2,0(r16)
 8004210:	800c22c0 	call	800c22c <__divsi3>
 8004214:	01000244 	movi	r4,9
 8004218:	102b883a 	mov	r21,r2
 800421c:	20bff416 	blt	r4,r2,80041f0 <__alt_data_end+0xfc0041f0>
 8004220:	8811883a 	mov	r8,r17
 8004224:	10800c04 	addi	r2,r2,48
 8004228:	8023883a 	mov	r17,r16
 800422c:	897fffc4 	addi	r5,r17,-1
 8004230:	88bfffc5 	stb	r2,-1(r17)
 8004234:	dc012c17 	ldw	r16,1200(sp)
 8004238:	2cc08a2e 	bgeu	r5,r19,8004464 <___vfprintf_internal_r+0x20ec>
 800423c:	d9812384 	addi	r6,sp,1166
 8004240:	344dc83a 	sub	r6,r6,r17
 8004244:	d9012344 	addi	r4,sp,1165
 8004248:	998d883a 	add	r6,r19,r6
 800424c:	00000106 	br	8004254 <___vfprintf_internal_r+0x1edc>
 8004250:	28800003 	ldbu	r2,0(r5)
 8004254:	20800005 	stb	r2,0(r4)
 8004258:	21000044 	addi	r4,r4,1
 800425c:	29400044 	addi	r5,r5,1
 8004260:	21bffb1e 	bne	r4,r6,8004250 <__alt_data_end+0xfc004250>
 8004264:	d8812304 	addi	r2,sp,1164
 8004268:	1445c83a 	sub	r2,r2,r17
 800426c:	d9412344 	addi	r5,sp,1165
 8004270:	2885883a 	add	r2,r5,r2
 8004274:	14e7c83a 	sub	r19,r2,r19
 8004278:	d8813317 	ldw	r2,1228(sp)
 800427c:	d8c13317 	ldw	r3,1228(sp)
 8004280:	dcc13a15 	stw	r19,1256(sp)
 8004284:	14e3883a 	add	r17,r2,r19
 8004288:	00800044 	movi	r2,1
 800428c:	10c0550e 	bge	r2,r3,80043e4 <___vfprintf_internal_r+0x206c>
 8004290:	8c400044 	addi	r17,r17,1
 8004294:	8839883a 	mov	fp,r17
 8004298:	88005016 	blt	r17,zero,80043dc <___vfprintf_internal_r+0x2064>
 800429c:	d8013415 	stw	zero,1232(sp)
 80042a0:	003e3f06 	br	8003ba0 <__alt_data_end+0xfc003ba0>
 80042a4:	da412b15 	stw	r9,1196(sp)
 80042a8:	dcc12783 	ldbu	r19,1182(sp)
 80042ac:	4823883a 	mov	r17,r9
 80042b0:	dc812d15 	stw	r18,1204(sp)
 80042b4:	d8013215 	stw	zero,1224(sp)
 80042b8:	d8013415 	stw	zero,1232(sp)
 80042bc:	0039ae06 	br	8002978 <__alt_data_end+0xfc002978>
 80042c0:	483de91e 	bne	r9,zero,8003a68 <__alt_data_end+0xfc003a68>
 80042c4:	8813883a 	mov	r9,r17
 80042c8:	003de706 	br	8003a68 <__alt_data_end+0xfc003a68>
 80042cc:	b809883a 	mov	r4,r23
 80042d0:	b00b883a 	mov	r5,r22
 80042d4:	d9811e04 	addi	r6,sp,1144
 80042d8:	80097b80 	call	80097b8 <__sprint_r>
 80042dc:	10393e1e 	bne	r2,zero,80027d8 <__alt_data_end+0xfc0027d8>
 80042e0:	dc012617 	ldw	r16,1176(sp)
 80042e4:	d8c12017 	ldw	r3,1152(sp)
 80042e8:	d8811f17 	ldw	r2,1148(sp)
 80042ec:	da000404 	addi	r8,sp,16
 80042f0:	003ea006 	br	8003d74 <__alt_data_end+0xfc003d74>
 80042f4:	00c00b44 	movi	r3,45
 80042f8:	2460003c 	xorhi	r17,r4,32768
 80042fc:	d8c12b05 	stb	r3,1196(sp)
 8004300:	003ddf06 	br	8003a80 <__alt_data_end+0xfc003a80>
 8004304:	02400184 	movi	r9,6
 8004308:	003dd706 	br	8003a68 <__alt_data_end+0xfc003a68>
 800430c:	4d400044 	addi	r21,r9,1
 8004310:	003de206 	br	8003a9c <__alt_data_end+0xfc003a9c>
 8004314:	d8c13417 	ldw	r3,1232(sp)
 8004318:	00c0490e 	bge	zero,r3,8004440 <___vfprintf_internal_r+0x20c8>
 800431c:	04400044 	movi	r17,1
 8004320:	d9013317 	ldw	r4,1228(sp)
 8004324:	8923883a 	add	r17,r17,r4
 8004328:	8839883a 	mov	fp,r17
 800432c:	883e1c0e 	bge	r17,zero,8003ba0 <__alt_data_end+0xfc003ba0>
 8004330:	0039883a 	mov	fp,zero
 8004334:	003e1a06 	br	8003ba0 <__alt_data_end+0xfc003ba0>
 8004338:	00c03b0e 	bge	zero,r3,8004428 <___vfprintf_internal_r+0x20b0>
 800433c:	4800021e 	bne	r9,zero,8004348 <___vfprintf_internal_r+0x1fd0>
 8004340:	e080004c 	andi	r2,fp,1
 8004344:	10000626 	beq	r2,zero,8004360 <___vfprintf_internal_r+0x1fe8>
 8004348:	d8c13417 	ldw	r3,1232(sp)
 800434c:	4a400044 	addi	r9,r9,1
 8004350:	1a63883a 	add	r17,r3,r9
 8004354:	8839883a 	mov	fp,r17
 8004358:	883e110e 	bge	r17,zero,8003ba0 <__alt_data_end+0xfc003ba0>
 800435c:	003ff406 	br	8004330 <__alt_data_end+0xfc004330>
 8004360:	1839883a 	mov	fp,r3
 8004364:	18004116 	blt	r3,zero,800446c <___vfprintf_internal_r+0x20f4>
 8004368:	dc413417 	ldw	r17,1232(sp)
 800436c:	003e0c06 	br	8003ba0 <__alt_data_end+0xfc003ba0>
 8004370:	d8812117 	ldw	r2,1156(sp)
 8004374:	003df606 	br	8003b50 <__alt_data_end+0xfc003b50>
 8004378:	00800c04 	movi	r2,48
 800437c:	a8c00c04 	addi	r3,r21,48
 8004380:	d8812345 	stb	r2,1165(sp)
 8004384:	d8c12385 	stb	r3,1166(sp)
 8004388:	d88123c4 	addi	r2,sp,1167
 800438c:	dcc122c4 	addi	r19,sp,1163
 8004390:	003fb806 	br	8004274 <__alt_data_end+0xfc004274>
 8004394:	d9013717 	ldw	r4,1244(sp)
 8004398:	880b883a 	mov	r5,r17
 800439c:	000d883a 	mov	r6,zero
 80043a0:	000f883a 	mov	r7,zero
 80043a4:	da013f15 	stw	r8,1276(sp)
 80043a8:	da413e15 	stw	r9,1272(sp)
 80043ac:	da813d15 	stw	r10,1268(sp)
 80043b0:	800d5300 	call	800d530 <__eqdf2>
 80043b4:	da013f17 	ldw	r8,1276(sp)
 80043b8:	da413e17 	ldw	r9,1272(sp)
 80043bc:	da813d17 	ldw	r10,1268(sp)
 80043c0:	103f1726 	beq	r2,zero,8004020 <__alt_data_end+0xfc004020>
 80043c4:	00800044 	movi	r2,1
 80043c8:	1547c83a 	sub	r3,r2,r21
 80043cc:	d8c12615 	stw	r3,1176(sp)
 80043d0:	003f1406 	br	8004024 <__alt_data_end+0xfc004024>
 80043d4:	0005883a 	mov	r2,zero
 80043d8:	003f4c06 	br	800410c <__alt_data_end+0xfc00410c>
 80043dc:	0039883a 	mov	fp,zero
 80043e0:	003fae06 	br	800429c <__alt_data_end+0xfc00429c>
 80043e4:	e084703a 	and	r2,fp,r2
 80043e8:	103faa26 	beq	r2,zero,8004294 <__alt_data_end+0xfc004294>
 80043ec:	003fa806 	br	8004290 <__alt_data_end+0xfc004290>
 80043f0:	d9412d17 	ldw	r5,1204(sp)
 80043f4:	2a400017 	ldw	r9,0(r5)
 80043f8:	28c00104 	addi	r3,r5,4
 80043fc:	d8c12d15 	stw	r3,1204(sp)
 8004400:	483ebc0e 	bge	r9,zero,8003ef4 <__alt_data_end+0xfc003ef4>
 8004404:	027fffc4 	movi	r9,-1
 8004408:	e4000047 	ldb	r16,1(fp)
 800440c:	00384206 	br	8002518 <__alt_data_end+0xfc002518>
 8004410:	043fffc4 	movi	r16,-1
 8004414:	0038ce06 	br	8002750 <__alt_data_end+0xfc002750>
 8004418:	00800b44 	movi	r2,45
 800441c:	056bc83a 	sub	r21,zero,r21
 8004420:	d8812305 	stb	r2,1164(sp)
 8004424:	003f6c06 	br	80041d8 <__alt_data_end+0xfc0041d8>
 8004428:	4800081e 	bne	r9,zero,800444c <___vfprintf_internal_r+0x20d4>
 800442c:	e080004c 	andi	r2,fp,1
 8004430:	1000061e 	bne	r2,zero,800444c <___vfprintf_internal_r+0x20d4>
 8004434:	07000044 	movi	fp,1
 8004438:	e023883a 	mov	r17,fp
 800443c:	003dd806 	br	8003ba0 <__alt_data_end+0xfc003ba0>
 8004440:	04400084 	movi	r17,2
 8004444:	88e3c83a 	sub	r17,r17,r3
 8004448:	003fb506 	br	8004320 <__alt_data_end+0xfc004320>
 800444c:	4c400084 	addi	r17,r9,2
 8004450:	8839883a 	mov	fp,r17
 8004454:	883dd20e 	bge	r17,zero,8003ba0 <__alt_data_end+0xfc003ba0>
 8004458:	003fb506 	br	8004330 <__alt_data_end+0xfc004330>
 800445c:	d8c12617 	ldw	r3,1176(sp)
 8004460:	003f5706 	br	80041c0 <__alt_data_end+0xfc0041c0>
 8004464:	d8812344 	addi	r2,sp,1165
 8004468:	003f8206 	br	8004274 <__alt_data_end+0xfc004274>
 800446c:	0039883a 	mov	fp,zero
 8004470:	003fbd06 	br	8004368 <__alt_data_end+0xfc004368>

08004474 <__vfprintf_internal>:
 8004474:	2007883a 	mov	r3,r4
 8004478:	01020074 	movhi	r4,2049
 800447c:	210e1f04 	addi	r4,r4,14460
 8004480:	21000017 	ldw	r4,0(r4)
 8004484:	2805883a 	mov	r2,r5
 8004488:	300f883a 	mov	r7,r6
 800448c:	180b883a 	mov	r5,r3
 8004490:	100d883a 	mov	r6,r2
 8004494:	80023781 	jmpi	8002378 <___vfprintf_internal_r>

08004498 <__swsetup_r>:
 8004498:	00820074 	movhi	r2,2049
 800449c:	defffd04 	addi	sp,sp,-12
 80044a0:	108e1f04 	addi	r2,r2,14460
 80044a4:	dc400115 	stw	r17,4(sp)
 80044a8:	2023883a 	mov	r17,r4
 80044ac:	11000017 	ldw	r4,0(r2)
 80044b0:	dc000015 	stw	r16,0(sp)
 80044b4:	dfc00215 	stw	ra,8(sp)
 80044b8:	2821883a 	mov	r16,r5
 80044bc:	20000226 	beq	r4,zero,80044c8 <__swsetup_r+0x30>
 80044c0:	20c00e17 	ldw	r3,56(r4)
 80044c4:	18002e26 	beq	r3,zero,8004580 <__swsetup_r+0xe8>
 80044c8:	8080030b 	ldhu	r2,12(r16)
 80044cc:	10c0020c 	andi	r3,r2,8
 80044d0:	100d883a 	mov	r6,r2
 80044d4:	18000f26 	beq	r3,zero,8004514 <__swsetup_r+0x7c>
 80044d8:	80c00417 	ldw	r3,16(r16)
 80044dc:	18001526 	beq	r3,zero,8004534 <__swsetup_r+0x9c>
 80044e0:	1100004c 	andi	r4,r2,1
 80044e4:	20001c1e 	bne	r4,zero,8004558 <__swsetup_r+0xc0>
 80044e8:	1080008c 	andi	r2,r2,2
 80044ec:	1000261e 	bne	r2,zero,8004588 <__swsetup_r+0xf0>
 80044f0:	80800517 	ldw	r2,20(r16)
 80044f4:	80800215 	stw	r2,8(r16)
 80044f8:	18001c26 	beq	r3,zero,800456c <__swsetup_r+0xd4>
 80044fc:	0005883a 	mov	r2,zero
 8004500:	dfc00217 	ldw	ra,8(sp)
 8004504:	dc400117 	ldw	r17,4(sp)
 8004508:	dc000017 	ldw	r16,0(sp)
 800450c:	dec00304 	addi	sp,sp,12
 8004510:	f800283a 	ret
 8004514:	3080040c 	andi	r2,r6,16
 8004518:	10001726 	beq	r2,zero,8004578 <__swsetup_r+0xe0>
 800451c:	3080010c 	andi	r2,r6,4
 8004520:	10001b1e 	bne	r2,zero,8004590 <__swsetup_r+0xf8>
 8004524:	80c00417 	ldw	r3,16(r16)
 8004528:	30800214 	ori	r2,r6,8
 800452c:	8080030d 	sth	r2,12(r16)
 8004530:	183feb1e 	bne	r3,zero,80044e0 <__alt_data_end+0xfc0044e0>
 8004534:	1140a00c 	andi	r5,r2,640
 8004538:	01008004 	movi	r4,512
 800453c:	293fe826 	beq	r5,r4,80044e0 <__alt_data_end+0xfc0044e0>
 8004540:	8809883a 	mov	r4,r17
 8004544:	800b883a 	mov	r5,r16
 8004548:	800702c0 	call	800702c <__smakebuf_r>
 800454c:	8080030b 	ldhu	r2,12(r16)
 8004550:	80c00417 	ldw	r3,16(r16)
 8004554:	003fe206 	br	80044e0 <__alt_data_end+0xfc0044e0>
 8004558:	80800517 	ldw	r2,20(r16)
 800455c:	80000215 	stw	zero,8(r16)
 8004560:	0085c83a 	sub	r2,zero,r2
 8004564:	80800615 	stw	r2,24(r16)
 8004568:	183fe41e 	bne	r3,zero,80044fc <__alt_data_end+0xfc0044fc>
 800456c:	8080030b 	ldhu	r2,12(r16)
 8004570:	1080200c 	andi	r2,r2,128
 8004574:	103fe226 	beq	r2,zero,8004500 <__alt_data_end+0xfc004500>
 8004578:	00bfffc4 	movi	r2,-1
 800457c:	003fe006 	br	8004500 <__alt_data_end+0xfc004500>
 8004580:	80064d40 	call	80064d4 <__sinit>
 8004584:	003fd006 	br	80044c8 <__alt_data_end+0xfc0044c8>
 8004588:	0005883a 	mov	r2,zero
 800458c:	003fd906 	br	80044f4 <__alt_data_end+0xfc0044f4>
 8004590:	81400c17 	ldw	r5,48(r16)
 8004594:	28000626 	beq	r5,zero,80045b0 <__swsetup_r+0x118>
 8004598:	80801004 	addi	r2,r16,64
 800459c:	28800326 	beq	r5,r2,80045ac <__swsetup_r+0x114>
 80045a0:	8809883a 	mov	r4,r17
 80045a4:	80066480 	call	8006648 <_free_r>
 80045a8:	8180030b 	ldhu	r6,12(r16)
 80045ac:	80000c15 	stw	zero,48(r16)
 80045b0:	80c00417 	ldw	r3,16(r16)
 80045b4:	00bff6c4 	movi	r2,-37
 80045b8:	118c703a 	and	r6,r2,r6
 80045bc:	80000115 	stw	zero,4(r16)
 80045c0:	80c00015 	stw	r3,0(r16)
 80045c4:	003fd806 	br	8004528 <__alt_data_end+0xfc004528>

080045c8 <quorem>:
 80045c8:	defff204 	addi	sp,sp,-56
 80045cc:	ddc00b15 	stw	r23,44(sp)
 80045d0:	20800417 	ldw	r2,16(r4)
 80045d4:	2dc00417 	ldw	r23,16(r5)
 80045d8:	dfc00d15 	stw	ra,52(sp)
 80045dc:	df000c15 	stw	fp,48(sp)
 80045e0:	dd800a15 	stw	r22,40(sp)
 80045e4:	dd400915 	stw	r21,36(sp)
 80045e8:	dd000815 	stw	r20,32(sp)
 80045ec:	dcc00715 	stw	r19,28(sp)
 80045f0:	dc800615 	stw	r18,24(sp)
 80045f4:	dc400515 	stw	r17,20(sp)
 80045f8:	dc000415 	stw	r16,16(sp)
 80045fc:	15c07a16 	blt	r2,r23,80047e8 <quorem+0x220>
 8004600:	bdffffc4 	addi	r23,r23,-1
 8004604:	bde9883a 	add	r20,r23,r23
 8004608:	28c00504 	addi	r3,r5,20
 800460c:	a529883a 	add	r20,r20,r20
 8004610:	1d39883a 	add	fp,r3,r20
 8004614:	24c00504 	addi	r19,r4,20
 8004618:	d9400215 	stw	r5,8(sp)
 800461c:	9d29883a 	add	r20,r19,r20
 8004620:	e1400017 	ldw	r5,0(fp)
 8004624:	d9000015 	stw	r4,0(sp)
 8004628:	a1000017 	ldw	r4,0(r20)
 800462c:	29400044 	addi	r5,r5,1
 8004630:	d8c00115 	stw	r3,4(sp)
 8004634:	dd000315 	stw	r20,12(sp)
 8004638:	800c2dc0 	call	800c2dc <__udivsi3>
 800463c:	1025883a 	mov	r18,r2
 8004640:	10003026 	beq	r2,zero,8004704 <quorem+0x13c>
 8004644:	dc400117 	ldw	r17,4(sp)
 8004648:	9829883a 	mov	r20,r19
 800464c:	002d883a 	mov	r22,zero
 8004650:	0021883a 	mov	r16,zero
 8004654:	8d400017 	ldw	r21,0(r17)
 8004658:	900b883a 	mov	r5,r18
 800465c:	8c400104 	addi	r17,r17,4
 8004660:	a93fffcc 	andi	r4,r21,65535
 8004664:	800c2ec0 	call	800c2ec <__mulsi3>
 8004668:	a808d43a 	srli	r4,r21,16
 800466c:	900b883a 	mov	r5,r18
 8004670:	b0ad883a 	add	r22,r22,r2
 8004674:	800c2ec0 	call	800c2ec <__mulsi3>
 8004678:	a1000017 	ldw	r4,0(r20)
 800467c:	b00cd43a 	srli	r6,r22,16
 8004680:	b0ffffcc 	andi	r3,r22,65535
 8004684:	217fffcc 	andi	r5,r4,65535
 8004688:	2c21883a 	add	r16,r5,r16
 800468c:	80c7c83a 	sub	r3,r16,r3
 8004690:	2008d43a 	srli	r4,r4,16
 8004694:	3085883a 	add	r2,r6,r2
 8004698:	1821d43a 	srai	r16,r3,16
 800469c:	117fffcc 	andi	r5,r2,65535
 80046a0:	2149c83a 	sub	r4,r4,r5
 80046a4:	2421883a 	add	r16,r4,r16
 80046a8:	8008943a 	slli	r4,r16,16
 80046ac:	18ffffcc 	andi	r3,r3,65535
 80046b0:	102cd43a 	srli	r22,r2,16
 80046b4:	20c8b03a 	or	r4,r4,r3
 80046b8:	a1000015 	stw	r4,0(r20)
 80046bc:	8021d43a 	srai	r16,r16,16
 80046c0:	a5000104 	addi	r20,r20,4
 80046c4:	e47fe32e 	bgeu	fp,r17,8004654 <__alt_data_end+0xfc004654>
 80046c8:	d8c00317 	ldw	r3,12(sp)
 80046cc:	18800017 	ldw	r2,0(r3)
 80046d0:	10000c1e 	bne	r2,zero,8004704 <quorem+0x13c>
 80046d4:	18bfff04 	addi	r2,r3,-4
 80046d8:	9880082e 	bgeu	r19,r2,80046fc <quorem+0x134>
 80046dc:	18ffff17 	ldw	r3,-4(r3)
 80046e0:	18000326 	beq	r3,zero,80046f0 <quorem+0x128>
 80046e4:	00000506 	br	80046fc <quorem+0x134>
 80046e8:	10c00017 	ldw	r3,0(r2)
 80046ec:	1800031e 	bne	r3,zero,80046fc <quorem+0x134>
 80046f0:	10bfff04 	addi	r2,r2,-4
 80046f4:	bdffffc4 	addi	r23,r23,-1
 80046f8:	98bffb36 	bltu	r19,r2,80046e8 <__alt_data_end+0xfc0046e8>
 80046fc:	d8c00017 	ldw	r3,0(sp)
 8004700:	1dc00415 	stw	r23,16(r3)
 8004704:	d9000017 	ldw	r4,0(sp)
 8004708:	d9400217 	ldw	r5,8(sp)
 800470c:	80087a80 	call	80087a8 <__mcmp>
 8004710:	10002816 	blt	r2,zero,80047b4 <quorem+0x1ec>
 8004714:	dc400117 	ldw	r17,4(sp)
 8004718:	94800044 	addi	r18,r18,1
 800471c:	980d883a 	mov	r6,r19
 8004720:	0007883a 	mov	r3,zero
 8004724:	31000017 	ldw	r4,0(r6)
 8004728:	89400017 	ldw	r5,0(r17)
 800472c:	31800104 	addi	r6,r6,4
 8004730:	20bfffcc 	andi	r2,r4,65535
 8004734:	10c7883a 	add	r3,r2,r3
 8004738:	28bfffcc 	andi	r2,r5,65535
 800473c:	1885c83a 	sub	r2,r3,r2
 8004740:	280ad43a 	srli	r5,r5,16
 8004744:	2008d43a 	srli	r4,r4,16
 8004748:	1007d43a 	srai	r3,r2,16
 800474c:	10bfffcc 	andi	r2,r2,65535
 8004750:	2149c83a 	sub	r4,r4,r5
 8004754:	20c9883a 	add	r4,r4,r3
 8004758:	200a943a 	slli	r5,r4,16
 800475c:	8c400104 	addi	r17,r17,4
 8004760:	2007d43a 	srai	r3,r4,16
 8004764:	2884b03a 	or	r2,r5,r2
 8004768:	30bfff15 	stw	r2,-4(r6)
 800476c:	e47fed2e 	bgeu	fp,r17,8004724 <__alt_data_end+0xfc004724>
 8004770:	bdc5883a 	add	r2,r23,r23
 8004774:	1085883a 	add	r2,r2,r2
 8004778:	9887883a 	add	r3,r19,r2
 800477c:	18800017 	ldw	r2,0(r3)
 8004780:	10000c1e 	bne	r2,zero,80047b4 <quorem+0x1ec>
 8004784:	18bfff04 	addi	r2,r3,-4
 8004788:	9880082e 	bgeu	r19,r2,80047ac <quorem+0x1e4>
 800478c:	18ffff17 	ldw	r3,-4(r3)
 8004790:	18000326 	beq	r3,zero,80047a0 <quorem+0x1d8>
 8004794:	00000506 	br	80047ac <quorem+0x1e4>
 8004798:	10c00017 	ldw	r3,0(r2)
 800479c:	1800031e 	bne	r3,zero,80047ac <quorem+0x1e4>
 80047a0:	10bfff04 	addi	r2,r2,-4
 80047a4:	bdffffc4 	addi	r23,r23,-1
 80047a8:	98bffb36 	bltu	r19,r2,8004798 <__alt_data_end+0xfc004798>
 80047ac:	d8c00017 	ldw	r3,0(sp)
 80047b0:	1dc00415 	stw	r23,16(r3)
 80047b4:	9005883a 	mov	r2,r18
 80047b8:	dfc00d17 	ldw	ra,52(sp)
 80047bc:	df000c17 	ldw	fp,48(sp)
 80047c0:	ddc00b17 	ldw	r23,44(sp)
 80047c4:	dd800a17 	ldw	r22,40(sp)
 80047c8:	dd400917 	ldw	r21,36(sp)
 80047cc:	dd000817 	ldw	r20,32(sp)
 80047d0:	dcc00717 	ldw	r19,28(sp)
 80047d4:	dc800617 	ldw	r18,24(sp)
 80047d8:	dc400517 	ldw	r17,20(sp)
 80047dc:	dc000417 	ldw	r16,16(sp)
 80047e0:	dec00e04 	addi	sp,sp,56
 80047e4:	f800283a 	ret
 80047e8:	0005883a 	mov	r2,zero
 80047ec:	003ff206 	br	80047b8 <__alt_data_end+0xfc0047b8>

080047f0 <_dtoa_r>:
 80047f0:	20801017 	ldw	r2,64(r4)
 80047f4:	deffde04 	addi	sp,sp,-136
 80047f8:	dd401d15 	stw	r21,116(sp)
 80047fc:	dcc01b15 	stw	r19,108(sp)
 8004800:	dc801a15 	stw	r18,104(sp)
 8004804:	dc401915 	stw	r17,100(sp)
 8004808:	dc001815 	stw	r16,96(sp)
 800480c:	dfc02115 	stw	ra,132(sp)
 8004810:	df002015 	stw	fp,128(sp)
 8004814:	ddc01f15 	stw	r23,124(sp)
 8004818:	dd801e15 	stw	r22,120(sp)
 800481c:	dd001c15 	stw	r20,112(sp)
 8004820:	d9c00315 	stw	r7,12(sp)
 8004824:	2021883a 	mov	r16,r4
 8004828:	302b883a 	mov	r21,r6
 800482c:	2825883a 	mov	r18,r5
 8004830:	dc402417 	ldw	r17,144(sp)
 8004834:	3027883a 	mov	r19,r6
 8004838:	10000826 	beq	r2,zero,800485c <_dtoa_r+0x6c>
 800483c:	21801117 	ldw	r6,68(r4)
 8004840:	00c00044 	movi	r3,1
 8004844:	100b883a 	mov	r5,r2
 8004848:	1986983a 	sll	r3,r3,r6
 800484c:	11800115 	stw	r6,4(r2)
 8004850:	10c00215 	stw	r3,8(r2)
 8004854:	8007ed40 	call	8007ed4 <_Bfree>
 8004858:	80001015 	stw	zero,64(r16)
 800485c:	a8002d16 	blt	r21,zero,8004914 <_dtoa_r+0x124>
 8004860:	88000015 	stw	zero,0(r17)
 8004864:	a8dffc2c 	andhi	r3,r21,32752
 8004868:	009ffc34 	movhi	r2,32752
 800486c:	18801b26 	beq	r3,r2,80048dc <_dtoa_r+0xec>
 8004870:	9009883a 	mov	r4,r18
 8004874:	980b883a 	mov	r5,r19
 8004878:	000d883a 	mov	r6,zero
 800487c:	000f883a 	mov	r7,zero
 8004880:	800d5300 	call	800d530 <__eqdf2>
 8004884:	10002a1e 	bne	r2,zero,8004930 <_dtoa_r+0x140>
 8004888:	d8c02317 	ldw	r3,140(sp)
 800488c:	d9002517 	ldw	r4,148(sp)
 8004890:	00800044 	movi	r2,1
 8004894:	18800015 	stw	r2,0(r3)
 8004898:	2001a226 	beq	r4,zero,8004f24 <_dtoa_r+0x734>
 800489c:	00820074 	movhi	r2,2049
 80048a0:	1086c444 	addi	r2,r2,6929
 80048a4:	20800015 	stw	r2,0(r4)
 80048a8:	10bfffc4 	addi	r2,r2,-1
 80048ac:	dfc02117 	ldw	ra,132(sp)
 80048b0:	df002017 	ldw	fp,128(sp)
 80048b4:	ddc01f17 	ldw	r23,124(sp)
 80048b8:	dd801e17 	ldw	r22,120(sp)
 80048bc:	dd401d17 	ldw	r21,116(sp)
 80048c0:	dd001c17 	ldw	r20,112(sp)
 80048c4:	dcc01b17 	ldw	r19,108(sp)
 80048c8:	dc801a17 	ldw	r18,104(sp)
 80048cc:	dc401917 	ldw	r17,100(sp)
 80048d0:	dc001817 	ldw	r16,96(sp)
 80048d4:	dec02204 	addi	sp,sp,136
 80048d8:	f800283a 	ret
 80048dc:	d8c02317 	ldw	r3,140(sp)
 80048e0:	0089c3c4 	movi	r2,9999
 80048e4:	18800015 	stw	r2,0(r3)
 80048e8:	90017c26 	beq	r18,zero,8004edc <_dtoa_r+0x6ec>
 80048ec:	00820074 	movhi	r2,2049
 80048f0:	1086d004 	addi	r2,r2,6976
 80048f4:	d9002517 	ldw	r4,148(sp)
 80048f8:	203fec26 	beq	r4,zero,80048ac <__alt_data_end+0xfc0048ac>
 80048fc:	10c000c7 	ldb	r3,3(r2)
 8004900:	18017d1e 	bne	r3,zero,8004ef8 <_dtoa_r+0x708>
 8004904:	10c000c4 	addi	r3,r2,3
 8004908:	d9802517 	ldw	r6,148(sp)
 800490c:	30c00015 	stw	r3,0(r6)
 8004910:	003fe606 	br	80048ac <__alt_data_end+0xfc0048ac>
 8004914:	04e00034 	movhi	r19,32768
 8004918:	9cffffc4 	addi	r19,r19,-1
 800491c:	00800044 	movi	r2,1
 8004920:	ace6703a 	and	r19,r21,r19
 8004924:	88800015 	stw	r2,0(r17)
 8004928:	982b883a 	mov	r21,r19
 800492c:	003fcd06 	br	8004864 <__alt_data_end+0xfc004864>
 8004930:	d8800204 	addi	r2,sp,8
 8004934:	a822d53a 	srli	r17,r21,20
 8004938:	d8800015 	stw	r2,0(sp)
 800493c:	8009883a 	mov	r4,r16
 8004940:	900b883a 	mov	r5,r18
 8004944:	980d883a 	mov	r6,r19
 8004948:	d9c00104 	addi	r7,sp,4
 800494c:	8008b1c0 	call	8008b1c <__d2b>
 8004950:	1039883a 	mov	fp,r2
 8004954:	88016a1e 	bne	r17,zero,8004f00 <_dtoa_r+0x710>
 8004958:	dd000217 	ldw	r20,8(sp)
 800495c:	dc400117 	ldw	r17,4(sp)
 8004960:	00befbc4 	movi	r2,-1041
 8004964:	a463883a 	add	r17,r20,r17
 8004968:	8882ea16 	blt	r17,r2,8005514 <_dtoa_r+0xd24>
 800496c:	00bf0384 	movi	r2,-1010
 8004970:	1445c83a 	sub	r2,r2,r17
 8004974:	89010484 	addi	r4,r17,1042
 8004978:	a8aa983a 	sll	r21,r21,r2
 800497c:	9108d83a 	srl	r4,r18,r4
 8004980:	a908b03a 	or	r4,r21,r4
 8004984:	800ea080 	call	800ea08 <__floatunsidf>
 8004988:	017f8434 	movhi	r5,65040
 800498c:	01800044 	movi	r6,1
 8004990:	1009883a 	mov	r4,r2
 8004994:	194b883a 	add	r5,r3,r5
 8004998:	8c7fffc4 	addi	r17,r17,-1
 800499c:	d9800f15 	stw	r6,60(sp)
 80049a0:	000d883a 	mov	r6,zero
 80049a4:	01cffe34 	movhi	r7,16376
 80049a8:	800dfe00 	call	800dfe0 <__subdf3>
 80049ac:	0198dbf4 	movhi	r6,25455
 80049b0:	01cff4f4 	movhi	r7,16339
 80049b4:	1009883a 	mov	r4,r2
 80049b8:	180b883a 	mov	r5,r3
 80049bc:	3190d844 	addi	r6,r6,17249
 80049c0:	39e1e9c4 	addi	r7,r7,-30809
 80049c4:	800d7740 	call	800d774 <__muldf3>
 80049c8:	01a2d874 	movhi	r6,35681
 80049cc:	01cff1f4 	movhi	r7,16327
 80049d0:	180b883a 	mov	r5,r3
 80049d4:	31b22cc4 	addi	r6,r6,-14157
 80049d8:	39e28a04 	addi	r7,r7,-30168
 80049dc:	1009883a 	mov	r4,r2
 80049e0:	800c3140 	call	800c314 <__adddf3>
 80049e4:	8809883a 	mov	r4,r17
 80049e8:	102d883a 	mov	r22,r2
 80049ec:	182b883a 	mov	r21,r3
 80049f0:	800e9380 	call	800e938 <__floatsidf>
 80049f4:	019427f4 	movhi	r6,20639
 80049f8:	01cff4f4 	movhi	r7,16339
 80049fc:	1009883a 	mov	r4,r2
 8004a00:	180b883a 	mov	r5,r3
 8004a04:	319e7ec4 	addi	r6,r6,31227
 8004a08:	39d104c4 	addi	r7,r7,17427
 8004a0c:	800d7740 	call	800d774 <__muldf3>
 8004a10:	b009883a 	mov	r4,r22
 8004a14:	a80b883a 	mov	r5,r21
 8004a18:	100d883a 	mov	r6,r2
 8004a1c:	180f883a 	mov	r7,r3
 8004a20:	800c3140 	call	800c314 <__adddf3>
 8004a24:	1009883a 	mov	r4,r2
 8004a28:	180b883a 	mov	r5,r3
 8004a2c:	102d883a 	mov	r22,r2
 8004a30:	182b883a 	mov	r21,r3
 8004a34:	800e8b00 	call	800e8b0 <__fixdfsi>
 8004a38:	b009883a 	mov	r4,r22
 8004a3c:	a80b883a 	mov	r5,r21
 8004a40:	000d883a 	mov	r6,zero
 8004a44:	000f883a 	mov	r7,zero
 8004a48:	d8800515 	stw	r2,20(sp)
 8004a4c:	800d6940 	call	800d694 <__ledf2>
 8004a50:	10023116 	blt	r2,zero,8005318 <_dtoa_r+0xb28>
 8004a54:	d8c00517 	ldw	r3,20(sp)
 8004a58:	00800584 	movi	r2,22
 8004a5c:	10c21f36 	bltu	r2,r3,80052dc <_dtoa_r+0xaec>
 8004a60:	180490fa 	slli	r2,r3,3
 8004a64:	00c20074 	movhi	r3,2049
 8004a68:	18c6ec04 	addi	r3,r3,7088
 8004a6c:	1885883a 	add	r2,r3,r2
 8004a70:	11000017 	ldw	r4,0(r2)
 8004a74:	11400117 	ldw	r5,4(r2)
 8004a78:	900d883a 	mov	r6,r18
 8004a7c:	980f883a 	mov	r7,r19
 8004a80:	800d5b40 	call	800d5b4 <__gedf2>
 8004a84:	0082a70e 	bge	zero,r2,8005524 <_dtoa_r+0xd34>
 8004a88:	d9000517 	ldw	r4,20(sp)
 8004a8c:	d8000c15 	stw	zero,48(sp)
 8004a90:	213fffc4 	addi	r4,r4,-1
 8004a94:	d9000515 	stw	r4,20(sp)
 8004a98:	a463c83a 	sub	r17,r20,r17
 8004a9c:	8dbfffc4 	addi	r22,r17,-1
 8004aa0:	b0021916 	blt	r22,zero,8005308 <_dtoa_r+0xb18>
 8004aa4:	d8000815 	stw	zero,32(sp)
 8004aa8:	d8800517 	ldw	r2,20(sp)
 8004aac:	10020e16 	blt	r2,zero,80052e8 <_dtoa_r+0xaf8>
 8004ab0:	b0ad883a 	add	r22,r22,r2
 8004ab4:	d8800a15 	stw	r2,40(sp)
 8004ab8:	d8000915 	stw	zero,36(sp)
 8004abc:	d8c00317 	ldw	r3,12(sp)
 8004ac0:	00800244 	movi	r2,9
 8004ac4:	10c11a36 	bltu	r2,r3,8004f30 <_dtoa_r+0x740>
 8004ac8:	00800144 	movi	r2,5
 8004acc:	10c4fc0e 	bge	r2,r3,8005ec0 <_dtoa_r+0x16d0>
 8004ad0:	18ffff04 	addi	r3,r3,-4
 8004ad4:	d8c00315 	stw	r3,12(sp)
 8004ad8:	0029883a 	mov	r20,zero
 8004adc:	d9800317 	ldw	r6,12(sp)
 8004ae0:	008000c4 	movi	r2,3
 8004ae4:	3083bd26 	beq	r6,r2,80059dc <_dtoa_r+0x11ec>
 8004ae8:	1183670e 	bge	r2,r6,8005888 <_dtoa_r+0x1098>
 8004aec:	d8c00317 	ldw	r3,12(sp)
 8004af0:	00800104 	movi	r2,4
 8004af4:	1882e726 	beq	r3,r2,8005694 <_dtoa_r+0xea4>
 8004af8:	00800144 	movi	r2,5
 8004afc:	1884f21e 	bne	r3,r2,8005ec8 <_dtoa_r+0x16d8>
 8004b00:	00800044 	movi	r2,1
 8004b04:	d8800b15 	stw	r2,44(sp)
 8004b08:	d8c02217 	ldw	r3,136(sp)
 8004b0c:	d9000517 	ldw	r4,20(sp)
 8004b10:	1907883a 	add	r3,r3,r4
 8004b14:	19800044 	addi	r6,r3,1
 8004b18:	d8c00d15 	stw	r3,52(sp)
 8004b1c:	d9800615 	stw	r6,24(sp)
 8004b20:	0183c30e 	bge	zero,r6,8005a30 <_dtoa_r+0x1240>
 8004b24:	d9800617 	ldw	r6,24(sp)
 8004b28:	3023883a 	mov	r17,r6
 8004b2c:	80001115 	stw	zero,68(r16)
 8004b30:	008005c4 	movi	r2,23
 8004b34:	1184f62e 	bgeu	r2,r6,8005f10 <_dtoa_r+0x1720>
 8004b38:	00c00044 	movi	r3,1
 8004b3c:	00800104 	movi	r2,4
 8004b40:	1085883a 	add	r2,r2,r2
 8004b44:	11000504 	addi	r4,r2,20
 8004b48:	180b883a 	mov	r5,r3
 8004b4c:	18c00044 	addi	r3,r3,1
 8004b50:	313ffb2e 	bgeu	r6,r4,8004b40 <__alt_data_end+0xfc004b40>
 8004b54:	81401115 	stw	r5,68(r16)
 8004b58:	8009883a 	mov	r4,r16
 8004b5c:	8007e2c0 	call	8007e2c <_Balloc>
 8004b60:	d8800715 	stw	r2,28(sp)
 8004b64:	80801015 	stw	r2,64(r16)
 8004b68:	00800384 	movi	r2,14
 8004b6c:	1440fd36 	bltu	r2,r17,8004f64 <_dtoa_r+0x774>
 8004b70:	a000fc26 	beq	r20,zero,8004f64 <_dtoa_r+0x774>
 8004b74:	d8800517 	ldw	r2,20(sp)
 8004b78:	0083b90e 	bge	zero,r2,8005a60 <_dtoa_r+0x1270>
 8004b7c:	d8c00517 	ldw	r3,20(sp)
 8004b80:	108003cc 	andi	r2,r2,15
 8004b84:	100490fa 	slli	r2,r2,3
 8004b88:	182fd13a 	srai	r23,r3,4
 8004b8c:	00c20074 	movhi	r3,2049
 8004b90:	18c6ec04 	addi	r3,r3,7088
 8004b94:	1885883a 	add	r2,r3,r2
 8004b98:	b8c0040c 	andi	r3,r23,16
 8004b9c:	12c00017 	ldw	r11,0(r2)
 8004ba0:	12800117 	ldw	r10,4(r2)
 8004ba4:	18039726 	beq	r3,zero,8005a04 <_dtoa_r+0x1214>
 8004ba8:	00820074 	movhi	r2,2049
 8004bac:	1086e204 	addi	r2,r2,7048
 8004bb0:	11800817 	ldw	r6,32(r2)
 8004bb4:	11c00917 	ldw	r7,36(r2)
 8004bb8:	9009883a 	mov	r4,r18
 8004bbc:	980b883a 	mov	r5,r19
 8004bc0:	da801615 	stw	r10,88(sp)
 8004bc4:	dac01515 	stw	r11,84(sp)
 8004bc8:	800cbb00 	call	800cbb0 <__divdf3>
 8004bcc:	da801617 	ldw	r10,88(sp)
 8004bd0:	dac01517 	ldw	r11,84(sp)
 8004bd4:	bdc003cc 	andi	r23,r23,15
 8004bd8:	044000c4 	movi	r17,3
 8004bdc:	d8800e15 	stw	r2,56(sp)
 8004be0:	182b883a 	mov	r21,r3
 8004be4:	b8001126 	beq	r23,zero,8004c2c <_dtoa_r+0x43c>
 8004be8:	05020074 	movhi	r20,2049
 8004bec:	a506e204 	addi	r20,r20,7048
 8004bf0:	5805883a 	mov	r2,r11
 8004bf4:	5007883a 	mov	r3,r10
 8004bf8:	b980004c 	andi	r6,r23,1
 8004bfc:	1009883a 	mov	r4,r2
 8004c00:	b82fd07a 	srai	r23,r23,1
 8004c04:	180b883a 	mov	r5,r3
 8004c08:	30000426 	beq	r6,zero,8004c1c <_dtoa_r+0x42c>
 8004c0c:	a1800017 	ldw	r6,0(r20)
 8004c10:	a1c00117 	ldw	r7,4(r20)
 8004c14:	8c400044 	addi	r17,r17,1
 8004c18:	800d7740 	call	800d774 <__muldf3>
 8004c1c:	a5000204 	addi	r20,r20,8
 8004c20:	b83ff51e 	bne	r23,zero,8004bf8 <__alt_data_end+0xfc004bf8>
 8004c24:	1017883a 	mov	r11,r2
 8004c28:	1815883a 	mov	r10,r3
 8004c2c:	d9000e17 	ldw	r4,56(sp)
 8004c30:	a80b883a 	mov	r5,r21
 8004c34:	580d883a 	mov	r6,r11
 8004c38:	500f883a 	mov	r7,r10
 8004c3c:	800cbb00 	call	800cbb0 <__divdf3>
 8004c40:	1029883a 	mov	r20,r2
 8004c44:	182b883a 	mov	r21,r3
 8004c48:	d9800c17 	ldw	r6,48(sp)
 8004c4c:	30000626 	beq	r6,zero,8004c68 <_dtoa_r+0x478>
 8004c50:	a009883a 	mov	r4,r20
 8004c54:	a80b883a 	mov	r5,r21
 8004c58:	000d883a 	mov	r6,zero
 8004c5c:	01cffc34 	movhi	r7,16368
 8004c60:	800d6940 	call	800d694 <__ledf2>
 8004c64:	10043216 	blt	r2,zero,8005d30 <_dtoa_r+0x1540>
 8004c68:	8809883a 	mov	r4,r17
 8004c6c:	800e9380 	call	800e938 <__floatsidf>
 8004c70:	1009883a 	mov	r4,r2
 8004c74:	180b883a 	mov	r5,r3
 8004c78:	a00d883a 	mov	r6,r20
 8004c7c:	a80f883a 	mov	r7,r21
 8004c80:	800d7740 	call	800d774 <__muldf3>
 8004c84:	000d883a 	mov	r6,zero
 8004c88:	1009883a 	mov	r4,r2
 8004c8c:	180b883a 	mov	r5,r3
 8004c90:	01d00734 	movhi	r7,16412
 8004c94:	800c3140 	call	800c314 <__adddf3>
 8004c98:	1023883a 	mov	r17,r2
 8004c9c:	d9800617 	ldw	r6,24(sp)
 8004ca0:	00bf3034 	movhi	r2,64704
 8004ca4:	1885883a 	add	r2,r3,r2
 8004ca8:	d8800e15 	stw	r2,56(sp)
 8004cac:	30032e26 	beq	r6,zero,8005968 <_dtoa_r+0x1178>
 8004cb0:	d8c00517 	ldw	r3,20(sp)
 8004cb4:	da800617 	ldw	r10,24(sp)
 8004cb8:	d8c01215 	stw	r3,72(sp)
 8004cbc:	d9000b17 	ldw	r4,44(sp)
 8004cc0:	2003b026 	beq	r4,zero,8005b84 <_dtoa_r+0x1394>
 8004cc4:	50bfffc4 	addi	r2,r10,-1
 8004cc8:	100490fa 	slli	r2,r2,3
 8004ccc:	00c20074 	movhi	r3,2049
 8004cd0:	18c6ec04 	addi	r3,r3,7088
 8004cd4:	1885883a 	add	r2,r3,r2
 8004cd8:	11800017 	ldw	r6,0(r2)
 8004cdc:	11c00117 	ldw	r7,4(r2)
 8004ce0:	d8800717 	ldw	r2,28(sp)
 8004ce4:	0009883a 	mov	r4,zero
 8004ce8:	014ff834 	movhi	r5,16352
 8004cec:	da801615 	stw	r10,88(sp)
 8004cf0:	15c00044 	addi	r23,r2,1
 8004cf4:	800cbb00 	call	800cbb0 <__divdf3>
 8004cf8:	d9c00e17 	ldw	r7,56(sp)
 8004cfc:	880d883a 	mov	r6,r17
 8004d00:	1009883a 	mov	r4,r2
 8004d04:	180b883a 	mov	r5,r3
 8004d08:	800dfe00 	call	800dfe0 <__subdf3>
 8004d0c:	a80b883a 	mov	r5,r21
 8004d10:	a009883a 	mov	r4,r20
 8004d14:	d8c01015 	stw	r3,64(sp)
 8004d18:	d8800e15 	stw	r2,56(sp)
 8004d1c:	800e8b00 	call	800e8b0 <__fixdfsi>
 8004d20:	1009883a 	mov	r4,r2
 8004d24:	d8801715 	stw	r2,92(sp)
 8004d28:	800e9380 	call	800e938 <__floatsidf>
 8004d2c:	a009883a 	mov	r4,r20
 8004d30:	a80b883a 	mov	r5,r21
 8004d34:	100d883a 	mov	r6,r2
 8004d38:	180f883a 	mov	r7,r3
 8004d3c:	800dfe00 	call	800dfe0 <__subdf3>
 8004d40:	da001717 	ldw	r8,92(sp)
 8004d44:	1829883a 	mov	r20,r3
 8004d48:	d8c00717 	ldw	r3,28(sp)
 8004d4c:	d9000e17 	ldw	r4,56(sp)
 8004d50:	d9401017 	ldw	r5,64(sp)
 8004d54:	42000c04 	addi	r8,r8,48
 8004d58:	1023883a 	mov	r17,r2
 8004d5c:	1a000005 	stb	r8,0(r3)
 8004d60:	880d883a 	mov	r6,r17
 8004d64:	a00f883a 	mov	r7,r20
 8004d68:	402b883a 	mov	r21,r8
 8004d6c:	800d5b40 	call	800d5b4 <__gedf2>
 8004d70:	00844516 	blt	zero,r2,8005e88 <_dtoa_r+0x1698>
 8004d74:	0009883a 	mov	r4,zero
 8004d78:	014ffc34 	movhi	r5,16368
 8004d7c:	880d883a 	mov	r6,r17
 8004d80:	a00f883a 	mov	r7,r20
 8004d84:	800dfe00 	call	800dfe0 <__subdf3>
 8004d88:	d9000e17 	ldw	r4,56(sp)
 8004d8c:	d9401017 	ldw	r5,64(sp)
 8004d90:	100d883a 	mov	r6,r2
 8004d94:	180f883a 	mov	r7,r3
 8004d98:	800d5b40 	call	800d5b4 <__gedf2>
 8004d9c:	da801617 	ldw	r10,88(sp)
 8004da0:	00843616 	blt	zero,r2,8005e7c <_dtoa_r+0x168c>
 8004da4:	00800044 	movi	r2,1
 8004da8:	12806e0e 	bge	r2,r10,8004f64 <_dtoa_r+0x774>
 8004dac:	d9000717 	ldw	r4,28(sp)
 8004db0:	dd801315 	stw	r22,76(sp)
 8004db4:	dc001115 	stw	r16,68(sp)
 8004db8:	2295883a 	add	r10,r4,r10
 8004dbc:	dcc01415 	stw	r19,80(sp)
 8004dc0:	502d883a 	mov	r22,r10
 8004dc4:	dcc01017 	ldw	r19,64(sp)
 8004dc8:	b821883a 	mov	r16,r23
 8004dcc:	dc801015 	stw	r18,64(sp)
 8004dd0:	dc800e17 	ldw	r18,56(sp)
 8004dd4:	00000906 	br	8004dfc <_dtoa_r+0x60c>
 8004dd8:	800dfe00 	call	800dfe0 <__subdf3>
 8004ddc:	1009883a 	mov	r4,r2
 8004de0:	180b883a 	mov	r5,r3
 8004de4:	900d883a 	mov	r6,r18
 8004de8:	980f883a 	mov	r7,r19
 8004dec:	800d6940 	call	800d694 <__ledf2>
 8004df0:	10040e16 	blt	r2,zero,8005e2c <_dtoa_r+0x163c>
 8004df4:	b821883a 	mov	r16,r23
 8004df8:	bd841026 	beq	r23,r22,8005e3c <_dtoa_r+0x164c>
 8004dfc:	9009883a 	mov	r4,r18
 8004e00:	980b883a 	mov	r5,r19
 8004e04:	000d883a 	mov	r6,zero
 8004e08:	01d00934 	movhi	r7,16420
 8004e0c:	800d7740 	call	800d774 <__muldf3>
 8004e10:	000d883a 	mov	r6,zero
 8004e14:	01d00934 	movhi	r7,16420
 8004e18:	8809883a 	mov	r4,r17
 8004e1c:	a00b883a 	mov	r5,r20
 8004e20:	1025883a 	mov	r18,r2
 8004e24:	1827883a 	mov	r19,r3
 8004e28:	800d7740 	call	800d774 <__muldf3>
 8004e2c:	180b883a 	mov	r5,r3
 8004e30:	1009883a 	mov	r4,r2
 8004e34:	1823883a 	mov	r17,r3
 8004e38:	1029883a 	mov	r20,r2
 8004e3c:	800e8b00 	call	800e8b0 <__fixdfsi>
 8004e40:	1009883a 	mov	r4,r2
 8004e44:	102b883a 	mov	r21,r2
 8004e48:	800e9380 	call	800e938 <__floatsidf>
 8004e4c:	a009883a 	mov	r4,r20
 8004e50:	880b883a 	mov	r5,r17
 8004e54:	100d883a 	mov	r6,r2
 8004e58:	180f883a 	mov	r7,r3
 8004e5c:	800dfe00 	call	800dfe0 <__subdf3>
 8004e60:	ad400c04 	addi	r21,r21,48
 8004e64:	1009883a 	mov	r4,r2
 8004e68:	180b883a 	mov	r5,r3
 8004e6c:	900d883a 	mov	r6,r18
 8004e70:	980f883a 	mov	r7,r19
 8004e74:	85400005 	stb	r21,0(r16)
 8004e78:	1023883a 	mov	r17,r2
 8004e7c:	1829883a 	mov	r20,r3
 8004e80:	800d6940 	call	800d694 <__ledf2>
 8004e84:	bdc00044 	addi	r23,r23,1
 8004e88:	0009883a 	mov	r4,zero
 8004e8c:	014ffc34 	movhi	r5,16368
 8004e90:	880d883a 	mov	r6,r17
 8004e94:	a00f883a 	mov	r7,r20
 8004e98:	103fcf0e 	bge	r2,zero,8004dd8 <__alt_data_end+0xfc004dd8>
 8004e9c:	d9801217 	ldw	r6,72(sp)
 8004ea0:	dc001117 	ldw	r16,68(sp)
 8004ea4:	d9800515 	stw	r6,20(sp)
 8004ea8:	8009883a 	mov	r4,r16
 8004eac:	e00b883a 	mov	r5,fp
 8004eb0:	8007ed40 	call	8007ed4 <_Bfree>
 8004eb4:	d8c00517 	ldw	r3,20(sp)
 8004eb8:	d9002317 	ldw	r4,140(sp)
 8004ebc:	d9802517 	ldw	r6,148(sp)
 8004ec0:	b8000005 	stb	zero,0(r23)
 8004ec4:	18800044 	addi	r2,r3,1
 8004ec8:	20800015 	stw	r2,0(r4)
 8004ecc:	30027226 	beq	r6,zero,8005898 <_dtoa_r+0x10a8>
 8004ed0:	35c00015 	stw	r23,0(r6)
 8004ed4:	d8800717 	ldw	r2,28(sp)
 8004ed8:	003e7406 	br	80048ac <__alt_data_end+0xfc0048ac>
 8004edc:	00800434 	movhi	r2,16
 8004ee0:	10bfffc4 	addi	r2,r2,-1
 8004ee4:	a8aa703a 	and	r21,r21,r2
 8004ee8:	a83e801e 	bne	r21,zero,80048ec <__alt_data_end+0xfc0048ec>
 8004eec:	00820074 	movhi	r2,2049
 8004ef0:	1086cd04 	addi	r2,r2,6964
 8004ef4:	003e7f06 	br	80048f4 <__alt_data_end+0xfc0048f4>
 8004ef8:	10c00204 	addi	r3,r2,8
 8004efc:	003e8206 	br	8004908 <__alt_data_end+0xfc004908>
 8004f00:	01400434 	movhi	r5,16
 8004f04:	297fffc4 	addi	r5,r5,-1
 8004f08:	994a703a 	and	r5,r19,r5
 8004f0c:	9009883a 	mov	r4,r18
 8004f10:	8c7f0044 	addi	r17,r17,-1023
 8004f14:	294ffc34 	orhi	r5,r5,16368
 8004f18:	dd000217 	ldw	r20,8(sp)
 8004f1c:	d8000f15 	stw	zero,60(sp)
 8004f20:	003e9f06 	br	80049a0 <__alt_data_end+0xfc0049a0>
 8004f24:	00820074 	movhi	r2,2049
 8004f28:	1086c404 	addi	r2,r2,6928
 8004f2c:	003e5f06 	br	80048ac <__alt_data_end+0xfc0048ac>
 8004f30:	80001115 	stw	zero,68(r16)
 8004f34:	8009883a 	mov	r4,r16
 8004f38:	000b883a 	mov	r5,zero
 8004f3c:	8007e2c0 	call	8007e2c <_Balloc>
 8004f40:	01bfffc4 	movi	r6,-1
 8004f44:	d8800715 	stw	r2,28(sp)
 8004f48:	80801015 	stw	r2,64(r16)
 8004f4c:	00800044 	movi	r2,1
 8004f50:	d9800615 	stw	r6,24(sp)
 8004f54:	d8800b15 	stw	r2,44(sp)
 8004f58:	d8002215 	stw	zero,136(sp)
 8004f5c:	d9800d15 	stw	r6,52(sp)
 8004f60:	d8000315 	stw	zero,12(sp)
 8004f64:	d8800117 	ldw	r2,4(sp)
 8004f68:	10008e16 	blt	r2,zero,80051a4 <_dtoa_r+0x9b4>
 8004f6c:	d9000517 	ldw	r4,20(sp)
 8004f70:	00c00384 	movi	r3,14
 8004f74:	19008b16 	blt	r3,r4,80051a4 <_dtoa_r+0x9b4>
 8004f78:	200490fa 	slli	r2,r4,3
 8004f7c:	00c20074 	movhi	r3,2049
 8004f80:	d9802217 	ldw	r6,136(sp)
 8004f84:	18c6ec04 	addi	r3,r3,7088
 8004f88:	1885883a 	add	r2,r3,r2
 8004f8c:	14400017 	ldw	r17,0(r2)
 8004f90:	15000117 	ldw	r20,4(r2)
 8004f94:	3001c716 	blt	r6,zero,80056b4 <_dtoa_r+0xec4>
 8004f98:	880d883a 	mov	r6,r17
 8004f9c:	a00f883a 	mov	r7,r20
 8004fa0:	9009883a 	mov	r4,r18
 8004fa4:	980b883a 	mov	r5,r19
 8004fa8:	800cbb00 	call	800cbb0 <__divdf3>
 8004fac:	180b883a 	mov	r5,r3
 8004fb0:	1009883a 	mov	r4,r2
 8004fb4:	800e8b00 	call	800e8b0 <__fixdfsi>
 8004fb8:	1009883a 	mov	r4,r2
 8004fbc:	102d883a 	mov	r22,r2
 8004fc0:	800e9380 	call	800e938 <__floatsidf>
 8004fc4:	1009883a 	mov	r4,r2
 8004fc8:	180b883a 	mov	r5,r3
 8004fcc:	880d883a 	mov	r6,r17
 8004fd0:	a00f883a 	mov	r7,r20
 8004fd4:	800d7740 	call	800d774 <__muldf3>
 8004fd8:	9009883a 	mov	r4,r18
 8004fdc:	980b883a 	mov	r5,r19
 8004fe0:	100d883a 	mov	r6,r2
 8004fe4:	180f883a 	mov	r7,r3
 8004fe8:	800dfe00 	call	800dfe0 <__subdf3>
 8004fec:	d9000717 	ldw	r4,28(sp)
 8004ff0:	d9800617 	ldw	r6,24(sp)
 8004ff4:	180b883a 	mov	r5,r3
 8004ff8:	b0c00c04 	addi	r3,r22,48
 8004ffc:	20c00005 	stb	r3,0(r4)
 8005000:	25c00044 	addi	r23,r4,1
 8005004:	01000044 	movi	r4,1
 8005008:	1011883a 	mov	r8,r2
 800500c:	2807883a 	mov	r3,r5
 8005010:	31003d26 	beq	r6,r4,8005108 <_dtoa_r+0x918>
 8005014:	000d883a 	mov	r6,zero
 8005018:	01d00934 	movhi	r7,16420
 800501c:	1009883a 	mov	r4,r2
 8005020:	800d7740 	call	800d774 <__muldf3>
 8005024:	1009883a 	mov	r4,r2
 8005028:	180b883a 	mov	r5,r3
 800502c:	000d883a 	mov	r6,zero
 8005030:	000f883a 	mov	r7,zero
 8005034:	1027883a 	mov	r19,r2
 8005038:	182b883a 	mov	r21,r3
 800503c:	800d5300 	call	800d530 <__eqdf2>
 8005040:	103f9926 	beq	r2,zero,8004ea8 <__alt_data_end+0xfc004ea8>
 8005044:	d8c00617 	ldw	r3,24(sp)
 8005048:	d9000717 	ldw	r4,28(sp)
 800504c:	b825883a 	mov	r18,r23
 8005050:	18bfffc4 	addi	r2,r3,-1
 8005054:	20ad883a 	add	r22,r4,r2
 8005058:	dc000315 	stw	r16,12(sp)
 800505c:	00000a06 	br	8005088 <_dtoa_r+0x898>
 8005060:	800d7740 	call	800d774 <__muldf3>
 8005064:	1009883a 	mov	r4,r2
 8005068:	180b883a 	mov	r5,r3
 800506c:	000d883a 	mov	r6,zero
 8005070:	000f883a 	mov	r7,zero
 8005074:	1027883a 	mov	r19,r2
 8005078:	182b883a 	mov	r21,r3
 800507c:	b825883a 	mov	r18,r23
 8005080:	800d5300 	call	800d530 <__eqdf2>
 8005084:	10022626 	beq	r2,zero,8005920 <_dtoa_r+0x1130>
 8005088:	880d883a 	mov	r6,r17
 800508c:	a00f883a 	mov	r7,r20
 8005090:	9809883a 	mov	r4,r19
 8005094:	a80b883a 	mov	r5,r21
 8005098:	800cbb00 	call	800cbb0 <__divdf3>
 800509c:	180b883a 	mov	r5,r3
 80050a0:	1009883a 	mov	r4,r2
 80050a4:	800e8b00 	call	800e8b0 <__fixdfsi>
 80050a8:	1009883a 	mov	r4,r2
 80050ac:	1021883a 	mov	r16,r2
 80050b0:	800e9380 	call	800e938 <__floatsidf>
 80050b4:	1009883a 	mov	r4,r2
 80050b8:	180b883a 	mov	r5,r3
 80050bc:	880d883a 	mov	r6,r17
 80050c0:	a00f883a 	mov	r7,r20
 80050c4:	800d7740 	call	800d774 <__muldf3>
 80050c8:	9809883a 	mov	r4,r19
 80050cc:	a80b883a 	mov	r5,r21
 80050d0:	100d883a 	mov	r6,r2
 80050d4:	180f883a 	mov	r7,r3
 80050d8:	800dfe00 	call	800dfe0 <__subdf3>
 80050dc:	82000c04 	addi	r8,r16,48
 80050e0:	92000005 	stb	r8,0(r18)
 80050e4:	1009883a 	mov	r4,r2
 80050e8:	180b883a 	mov	r5,r3
 80050ec:	000d883a 	mov	r6,zero
 80050f0:	01d00934 	movhi	r7,16420
 80050f4:	1011883a 	mov	r8,r2
 80050f8:	bdc00044 	addi	r23,r23,1
 80050fc:	95bfd81e 	bne	r18,r22,8005060 <__alt_data_end+0xfc005060>
 8005100:	802d883a 	mov	r22,r16
 8005104:	dc000317 	ldw	r16,12(sp)
 8005108:	4009883a 	mov	r4,r8
 800510c:	180b883a 	mov	r5,r3
 8005110:	400d883a 	mov	r6,r8
 8005114:	180f883a 	mov	r7,r3
 8005118:	800c3140 	call	800c314 <__adddf3>
 800511c:	8809883a 	mov	r4,r17
 8005120:	a00b883a 	mov	r5,r20
 8005124:	100d883a 	mov	r6,r2
 8005128:	180f883a 	mov	r7,r3
 800512c:	1027883a 	mov	r19,r2
 8005130:	1825883a 	mov	r18,r3
 8005134:	800d6940 	call	800d694 <__ledf2>
 8005138:	10000816 	blt	r2,zero,800515c <_dtoa_r+0x96c>
 800513c:	8809883a 	mov	r4,r17
 8005140:	a00b883a 	mov	r5,r20
 8005144:	980d883a 	mov	r6,r19
 8005148:	900f883a 	mov	r7,r18
 800514c:	800d5300 	call	800d530 <__eqdf2>
 8005150:	103f551e 	bne	r2,zero,8004ea8 <__alt_data_end+0xfc004ea8>
 8005154:	b580004c 	andi	r22,r22,1
 8005158:	b03f5326 	beq	r22,zero,8004ea8 <__alt_data_end+0xfc004ea8>
 800515c:	bd7fffc3 	ldbu	r21,-1(r23)
 8005160:	b8bfffc4 	addi	r2,r23,-1
 8005164:	1007883a 	mov	r3,r2
 8005168:	01400e44 	movi	r5,57
 800516c:	d9800717 	ldw	r6,28(sp)
 8005170:	00000506 	br	8005188 <_dtoa_r+0x998>
 8005174:	18ffffc4 	addi	r3,r3,-1
 8005178:	30825e26 	beq	r6,r2,8005af4 <_dtoa_r+0x1304>
 800517c:	1d400003 	ldbu	r21,0(r3)
 8005180:	102f883a 	mov	r23,r2
 8005184:	10bfffc4 	addi	r2,r2,-1
 8005188:	a9003fcc 	andi	r4,r21,255
 800518c:	2100201c 	xori	r4,r4,128
 8005190:	213fe004 	addi	r4,r4,-128
 8005194:	217ff726 	beq	r4,r5,8005174 <__alt_data_end+0xfc005174>
 8005198:	aa000044 	addi	r8,r21,1
 800519c:	12000005 	stb	r8,0(r2)
 80051a0:	003f4106 	br	8004ea8 <__alt_data_end+0xfc004ea8>
 80051a4:	d8c00b17 	ldw	r3,44(sp)
 80051a8:	18006726 	beq	r3,zero,8005348 <_dtoa_r+0xb58>
 80051ac:	d9000317 	ldw	r4,12(sp)
 80051b0:	00c00044 	movi	r3,1
 80051b4:	19016a0e 	bge	r3,r4,8005760 <_dtoa_r+0xf70>
 80051b8:	d8800617 	ldw	r2,24(sp)
 80051bc:	d8c00917 	ldw	r3,36(sp)
 80051c0:	157fffc4 	addi	r21,r2,-1
 80051c4:	1d420716 	blt	r3,r21,80059e4 <_dtoa_r+0x11f4>
 80051c8:	1d6bc83a 	sub	r21,r3,r21
 80051cc:	d8800617 	ldw	r2,24(sp)
 80051d0:	1002c716 	blt	r2,zero,8005cf0 <_dtoa_r+0x1500>
 80051d4:	dd000817 	ldw	r20,32(sp)
 80051d8:	d8800617 	ldw	r2,24(sp)
 80051dc:	d9800817 	ldw	r6,32(sp)
 80051e0:	8009883a 	mov	r4,r16
 80051e4:	01400044 	movi	r5,1
 80051e8:	308d883a 	add	r6,r6,r2
 80051ec:	d9800815 	stw	r6,32(sp)
 80051f0:	b0ad883a 	add	r22,r22,r2
 80051f4:	80082540 	call	8008254 <__i2b>
 80051f8:	1023883a 	mov	r17,r2
 80051fc:	a0000826 	beq	r20,zero,8005220 <_dtoa_r+0xa30>
 8005200:	0580070e 	bge	zero,r22,8005220 <_dtoa_r+0xa30>
 8005204:	b005883a 	mov	r2,r22
 8005208:	a5812016 	blt	r20,r22,800568c <_dtoa_r+0xe9c>
 800520c:	d8c00817 	ldw	r3,32(sp)
 8005210:	a0a9c83a 	sub	r20,r20,r2
 8005214:	b0adc83a 	sub	r22,r22,r2
 8005218:	1887c83a 	sub	r3,r3,r2
 800521c:	d8c00815 	stw	r3,32(sp)
 8005220:	d9000917 	ldw	r4,36(sp)
 8005224:	0100140e 	bge	zero,r4,8005278 <_dtoa_r+0xa88>
 8005228:	d9800b17 	ldw	r6,44(sp)
 800522c:	3001e526 	beq	r6,zero,80059c4 <_dtoa_r+0x11d4>
 8005230:	05400e0e 	bge	zero,r21,800526c <_dtoa_r+0xa7c>
 8005234:	880b883a 	mov	r5,r17
 8005238:	8009883a 	mov	r4,r16
 800523c:	a80d883a 	mov	r6,r21
 8005240:	80085200 	call	8008520 <__pow5mult>
 8005244:	e00d883a 	mov	r6,fp
 8005248:	8009883a 	mov	r4,r16
 800524c:	100b883a 	mov	r5,r2
 8005250:	1023883a 	mov	r17,r2
 8005254:	80082900 	call	8008290 <__multiply>
 8005258:	102f883a 	mov	r23,r2
 800525c:	e00b883a 	mov	r5,fp
 8005260:	8009883a 	mov	r4,r16
 8005264:	8007ed40 	call	8007ed4 <_Bfree>
 8005268:	b839883a 	mov	fp,r23
 800526c:	d8800917 	ldw	r2,36(sp)
 8005270:	154dc83a 	sub	r6,r2,r21
 8005274:	3001281e 	bne	r6,zero,8005718 <_dtoa_r+0xf28>
 8005278:	05c00044 	movi	r23,1
 800527c:	8009883a 	mov	r4,r16
 8005280:	b80b883a 	mov	r5,r23
 8005284:	80082540 	call	8008254 <__i2b>
 8005288:	d8c00a17 	ldw	r3,40(sp)
 800528c:	102b883a 	mov	r21,r2
 8005290:	00c0310e 	bge	zero,r3,8005358 <_dtoa_r+0xb68>
 8005294:	8009883a 	mov	r4,r16
 8005298:	100b883a 	mov	r5,r2
 800529c:	180d883a 	mov	r6,r3
 80052a0:	80085200 	call	8008520 <__pow5mult>
 80052a4:	d9000317 	ldw	r4,12(sp)
 80052a8:	102b883a 	mov	r21,r2
 80052ac:	b9011f0e 	bge	r23,r4,800572c <_dtoa_r+0xf3c>
 80052b0:	0027883a 	mov	r19,zero
 80052b4:	a8800417 	ldw	r2,16(r21)
 80052b8:	10800104 	addi	r2,r2,4
 80052bc:	1085883a 	add	r2,r2,r2
 80052c0:	1085883a 	add	r2,r2,r2
 80052c4:	a885883a 	add	r2,r21,r2
 80052c8:	11000017 	ldw	r4,0(r2)
 80052cc:	800813c0 	call	800813c <__hi0bits>
 80052d0:	00c00804 	movi	r3,32
 80052d4:	1885c83a 	sub	r2,r3,r2
 80052d8:	00002506 	br	8005370 <_dtoa_r+0xb80>
 80052dc:	01800044 	movi	r6,1
 80052e0:	d9800c15 	stw	r6,48(sp)
 80052e4:	003dec06 	br	8004a98 <__alt_data_end+0xfc004a98>
 80052e8:	d8c00817 	ldw	r3,32(sp)
 80052ec:	d9000517 	ldw	r4,20(sp)
 80052f0:	d8000a15 	stw	zero,40(sp)
 80052f4:	1907c83a 	sub	r3,r3,r4
 80052f8:	010dc83a 	sub	r6,zero,r4
 80052fc:	d8c00815 	stw	r3,32(sp)
 8005300:	d9800915 	stw	r6,36(sp)
 8005304:	003ded06 	br	8004abc <__alt_data_end+0xfc004abc>
 8005308:	05adc83a 	sub	r22,zero,r22
 800530c:	dd800815 	stw	r22,32(sp)
 8005310:	002d883a 	mov	r22,zero
 8005314:	003de406 	br	8004aa8 <__alt_data_end+0xfc004aa8>
 8005318:	d9000517 	ldw	r4,20(sp)
 800531c:	800e9380 	call	800e938 <__floatsidf>
 8005320:	1009883a 	mov	r4,r2
 8005324:	180b883a 	mov	r5,r3
 8005328:	b00d883a 	mov	r6,r22
 800532c:	a80f883a 	mov	r7,r21
 8005330:	800d5300 	call	800d530 <__eqdf2>
 8005334:	103dc726 	beq	r2,zero,8004a54 <__alt_data_end+0xfc004a54>
 8005338:	d8800517 	ldw	r2,20(sp)
 800533c:	10bfffc4 	addi	r2,r2,-1
 8005340:	d8800515 	stw	r2,20(sp)
 8005344:	003dc306 	br	8004a54 <__alt_data_end+0xfc004a54>
 8005348:	dd400917 	ldw	r21,36(sp)
 800534c:	dd000817 	ldw	r20,32(sp)
 8005350:	0023883a 	mov	r17,zero
 8005354:	003fa906 	br	80051fc <__alt_data_end+0xfc0051fc>
 8005358:	d9800317 	ldw	r6,12(sp)
 800535c:	b981670e 	bge	r23,r6,80058fc <_dtoa_r+0x110c>
 8005360:	0027883a 	mov	r19,zero
 8005364:	d8c00a17 	ldw	r3,40(sp)
 8005368:	183fd21e 	bne	r3,zero,80052b4 <__alt_data_end+0xfc0052b4>
 800536c:	00800044 	movi	r2,1
 8005370:	1585883a 	add	r2,r2,r22
 8005374:	108007cc 	andi	r2,r2,31
 8005378:	10005f26 	beq	r2,zero,80054f8 <_dtoa_r+0xd08>
 800537c:	00c00804 	movi	r3,32
 8005380:	1887c83a 	sub	r3,r3,r2
 8005384:	01000104 	movi	r4,4
 8005388:	20c2dd0e 	bge	r4,r3,8005f00 <_dtoa_r+0x1710>
 800538c:	d9000817 	ldw	r4,32(sp)
 8005390:	00c00704 	movi	r3,28
 8005394:	1885c83a 	sub	r2,r3,r2
 8005398:	2089883a 	add	r4,r4,r2
 800539c:	d9000815 	stw	r4,32(sp)
 80053a0:	a0a9883a 	add	r20,r20,r2
 80053a4:	b0ad883a 	add	r22,r22,r2
 80053a8:	d8800817 	ldw	r2,32(sp)
 80053ac:	0080050e 	bge	zero,r2,80053c4 <_dtoa_r+0xbd4>
 80053b0:	e00b883a 	mov	r5,fp
 80053b4:	8009883a 	mov	r4,r16
 80053b8:	100d883a 	mov	r6,r2
 80053bc:	80086600 	call	8008660 <__lshift>
 80053c0:	1039883a 	mov	fp,r2
 80053c4:	0580050e 	bge	zero,r22,80053dc <_dtoa_r+0xbec>
 80053c8:	a80b883a 	mov	r5,r21
 80053cc:	8009883a 	mov	r4,r16
 80053d0:	b00d883a 	mov	r6,r22
 80053d4:	80086600 	call	8008660 <__lshift>
 80053d8:	102b883a 	mov	r21,r2
 80053dc:	d8c00c17 	ldw	r3,48(sp)
 80053e0:	1801161e 	bne	r3,zero,800583c <_dtoa_r+0x104c>
 80053e4:	d8c00617 	ldw	r3,24(sp)
 80053e8:	00c12d0e 	bge	zero,r3,80058a0 <_dtoa_r+0x10b0>
 80053ec:	d8c00b17 	ldw	r3,44(sp)
 80053f0:	1800571e 	bne	r3,zero,8005550 <_dtoa_r+0xd60>
 80053f4:	dc800717 	ldw	r18,28(sp)
 80053f8:	dcc00617 	ldw	r19,24(sp)
 80053fc:	9029883a 	mov	r20,r18
 8005400:	00000206 	br	800540c <_dtoa_r+0xc1c>
 8005404:	8007efc0 	call	8007efc <__multadd>
 8005408:	1039883a 	mov	fp,r2
 800540c:	e009883a 	mov	r4,fp
 8005410:	a80b883a 	mov	r5,r21
 8005414:	80045c80 	call	80045c8 <quorem>
 8005418:	10800c04 	addi	r2,r2,48
 800541c:	90800005 	stb	r2,0(r18)
 8005420:	94800044 	addi	r18,r18,1
 8005424:	9507c83a 	sub	r3,r18,r20
 8005428:	8009883a 	mov	r4,r16
 800542c:	e00b883a 	mov	r5,fp
 8005430:	01800284 	movi	r6,10
 8005434:	000f883a 	mov	r7,zero
 8005438:	1cfff216 	blt	r3,r19,8005404 <__alt_data_end+0xfc005404>
 800543c:	1011883a 	mov	r8,r2
 8005440:	d8800617 	ldw	r2,24(sp)
 8005444:	00822e0e 	bge	zero,r2,8005d00 <_dtoa_r+0x1510>
 8005448:	d9000717 	ldw	r4,28(sp)
 800544c:	0025883a 	mov	r18,zero
 8005450:	20af883a 	add	r23,r4,r2
 8005454:	e00b883a 	mov	r5,fp
 8005458:	01800044 	movi	r6,1
 800545c:	8009883a 	mov	r4,r16
 8005460:	da001715 	stw	r8,92(sp)
 8005464:	80086600 	call	8008660 <__lshift>
 8005468:	1009883a 	mov	r4,r2
 800546c:	a80b883a 	mov	r5,r21
 8005470:	1039883a 	mov	fp,r2
 8005474:	80087a80 	call	80087a8 <__mcmp>
 8005478:	da001717 	ldw	r8,92(sp)
 800547c:	00816e0e 	bge	zero,r2,8005a38 <_dtoa_r+0x1248>
 8005480:	b93fffc3 	ldbu	r4,-1(r23)
 8005484:	b8bfffc4 	addi	r2,r23,-1
 8005488:	1007883a 	mov	r3,r2
 800548c:	01800e44 	movi	r6,57
 8005490:	d9c00717 	ldw	r7,28(sp)
 8005494:	00000506 	br	80054ac <_dtoa_r+0xcbc>
 8005498:	18ffffc4 	addi	r3,r3,-1
 800549c:	38811926 	beq	r7,r2,8005904 <_dtoa_r+0x1114>
 80054a0:	19000003 	ldbu	r4,0(r3)
 80054a4:	102f883a 	mov	r23,r2
 80054a8:	10bfffc4 	addi	r2,r2,-1
 80054ac:	21403fcc 	andi	r5,r4,255
 80054b0:	2940201c 	xori	r5,r5,128
 80054b4:	297fe004 	addi	r5,r5,-128
 80054b8:	29bff726 	beq	r5,r6,8005498 <__alt_data_end+0xfc005498>
 80054bc:	21000044 	addi	r4,r4,1
 80054c0:	11000005 	stb	r4,0(r2)
 80054c4:	8009883a 	mov	r4,r16
 80054c8:	a80b883a 	mov	r5,r21
 80054cc:	8007ed40 	call	8007ed4 <_Bfree>
 80054d0:	883e7526 	beq	r17,zero,8004ea8 <__alt_data_end+0xfc004ea8>
 80054d4:	90000426 	beq	r18,zero,80054e8 <_dtoa_r+0xcf8>
 80054d8:	94400326 	beq	r18,r17,80054e8 <_dtoa_r+0xcf8>
 80054dc:	8009883a 	mov	r4,r16
 80054e0:	900b883a 	mov	r5,r18
 80054e4:	8007ed40 	call	8007ed4 <_Bfree>
 80054e8:	8009883a 	mov	r4,r16
 80054ec:	880b883a 	mov	r5,r17
 80054f0:	8007ed40 	call	8007ed4 <_Bfree>
 80054f4:	003e6c06 	br	8004ea8 <__alt_data_end+0xfc004ea8>
 80054f8:	00800704 	movi	r2,28
 80054fc:	d9800817 	ldw	r6,32(sp)
 8005500:	a0a9883a 	add	r20,r20,r2
 8005504:	b0ad883a 	add	r22,r22,r2
 8005508:	308d883a 	add	r6,r6,r2
 800550c:	d9800815 	stw	r6,32(sp)
 8005510:	003fa506 	br	80053a8 <__alt_data_end+0xfc0053a8>
 8005514:	013efb84 	movi	r4,-1042
 8005518:	246bc83a 	sub	r21,r4,r17
 800551c:	9548983a 	sll	r4,r18,r21
 8005520:	003d1806 	br	8004984 <__alt_data_end+0xfc004984>
 8005524:	d8000c15 	stw	zero,48(sp)
 8005528:	003d5b06 	br	8004a98 <__alt_data_end+0xfc004a98>
 800552c:	880b883a 	mov	r5,r17
 8005530:	8009883a 	mov	r4,r16
 8005534:	01800284 	movi	r6,10
 8005538:	000f883a 	mov	r7,zero
 800553c:	8007efc0 	call	8007efc <__multadd>
 8005540:	1023883a 	mov	r17,r2
 8005544:	d8800d17 	ldw	r2,52(sp)
 8005548:	0082550e 	bge	zero,r2,8005ea0 <_dtoa_r+0x16b0>
 800554c:	d8800615 	stw	r2,24(sp)
 8005550:	0500050e 	bge	zero,r20,8005568 <_dtoa_r+0xd78>
 8005554:	880b883a 	mov	r5,r17
 8005558:	8009883a 	mov	r4,r16
 800555c:	a00d883a 	mov	r6,r20
 8005560:	80086600 	call	8008660 <__lshift>
 8005564:	1023883a 	mov	r17,r2
 8005568:	98016a1e 	bne	r19,zero,8005b14 <_dtoa_r+0x1324>
 800556c:	8829883a 	mov	r20,r17
 8005570:	d9000617 	ldw	r4,24(sp)
 8005574:	dcc00717 	ldw	r19,28(sp)
 8005578:	9480004c 	andi	r18,r18,1
 800557c:	20bfffc4 	addi	r2,r4,-1
 8005580:	9885883a 	add	r2,r19,r2
 8005584:	d8800415 	stw	r2,16(sp)
 8005588:	dc800615 	stw	r18,24(sp)
 800558c:	e009883a 	mov	r4,fp
 8005590:	a80b883a 	mov	r5,r21
 8005594:	80045c80 	call	80045c8 <quorem>
 8005598:	e009883a 	mov	r4,fp
 800559c:	880b883a 	mov	r5,r17
 80055a0:	102f883a 	mov	r23,r2
 80055a4:	80087a80 	call	80087a8 <__mcmp>
 80055a8:	8009883a 	mov	r4,r16
 80055ac:	a80b883a 	mov	r5,r21
 80055b0:	a00d883a 	mov	r6,r20
 80055b4:	102d883a 	mov	r22,r2
 80055b8:	80088080 	call	8008808 <__mdiff>
 80055bc:	1007883a 	mov	r3,r2
 80055c0:	10800317 	ldw	r2,12(r2)
 80055c4:	bc800c04 	addi	r18,r23,48
 80055c8:	1000971e 	bne	r2,zero,8005828 <_dtoa_r+0x1038>
 80055cc:	180b883a 	mov	r5,r3
 80055d0:	e009883a 	mov	r4,fp
 80055d4:	d8c01515 	stw	r3,84(sp)
 80055d8:	80087a80 	call	80087a8 <__mcmp>
 80055dc:	d8c01517 	ldw	r3,84(sp)
 80055e0:	8009883a 	mov	r4,r16
 80055e4:	d8801515 	stw	r2,84(sp)
 80055e8:	180b883a 	mov	r5,r3
 80055ec:	8007ed40 	call	8007ed4 <_Bfree>
 80055f0:	d8801517 	ldw	r2,84(sp)
 80055f4:	1000041e 	bne	r2,zero,8005608 <_dtoa_r+0xe18>
 80055f8:	d9800317 	ldw	r6,12(sp)
 80055fc:	3000021e 	bne	r6,zero,8005608 <_dtoa_r+0xe18>
 8005600:	d8c00617 	ldw	r3,24(sp)
 8005604:	18007626 	beq	r3,zero,80057e0 <_dtoa_r+0xff0>
 8005608:	b0005b16 	blt	r22,zero,8005778 <_dtoa_r+0xf88>
 800560c:	b000041e 	bne	r22,zero,8005620 <_dtoa_r+0xe30>
 8005610:	d9000317 	ldw	r4,12(sp)
 8005614:	2000021e 	bne	r4,zero,8005620 <_dtoa_r+0xe30>
 8005618:	d8c00617 	ldw	r3,24(sp)
 800561c:	18005626 	beq	r3,zero,8005778 <_dtoa_r+0xf88>
 8005620:	00814d16 	blt	zero,r2,8005b58 <_dtoa_r+0x1368>
 8005624:	d8c00417 	ldw	r3,16(sp)
 8005628:	9d800044 	addi	r22,r19,1
 800562c:	9c800005 	stb	r18,0(r19)
 8005630:	b02f883a 	mov	r23,r22
 8005634:	98c14c26 	beq	r19,r3,8005b68 <_dtoa_r+0x1378>
 8005638:	e00b883a 	mov	r5,fp
 800563c:	8009883a 	mov	r4,r16
 8005640:	01800284 	movi	r6,10
 8005644:	000f883a 	mov	r7,zero
 8005648:	8007efc0 	call	8007efc <__multadd>
 800564c:	1039883a 	mov	fp,r2
 8005650:	8d006d26 	beq	r17,r20,8005808 <_dtoa_r+0x1018>
 8005654:	880b883a 	mov	r5,r17
 8005658:	01800284 	movi	r6,10
 800565c:	000f883a 	mov	r7,zero
 8005660:	8009883a 	mov	r4,r16
 8005664:	8007efc0 	call	8007efc <__multadd>
 8005668:	a00b883a 	mov	r5,r20
 800566c:	8009883a 	mov	r4,r16
 8005670:	01800284 	movi	r6,10
 8005674:	000f883a 	mov	r7,zero
 8005678:	1023883a 	mov	r17,r2
 800567c:	8007efc0 	call	8007efc <__multadd>
 8005680:	1029883a 	mov	r20,r2
 8005684:	b027883a 	mov	r19,r22
 8005688:	003fc006 	br	800558c <__alt_data_end+0xfc00558c>
 800568c:	a005883a 	mov	r2,r20
 8005690:	003ede06 	br	800520c <__alt_data_end+0xfc00520c>
 8005694:	01000044 	movi	r4,1
 8005698:	d9000b15 	stw	r4,44(sp)
 800569c:	d9802217 	ldw	r6,136(sp)
 80056a0:	0180dc0e 	bge	zero,r6,8005a14 <_dtoa_r+0x1224>
 80056a4:	3023883a 	mov	r17,r6
 80056a8:	d9800d15 	stw	r6,52(sp)
 80056ac:	d9800615 	stw	r6,24(sp)
 80056b0:	003d1e06 	br	8004b2c <__alt_data_end+0xfc004b2c>
 80056b4:	d8800617 	ldw	r2,24(sp)
 80056b8:	00be3716 	blt	zero,r2,8004f98 <__alt_data_end+0xfc004f98>
 80056bc:	1000be1e 	bne	r2,zero,80059b8 <_dtoa_r+0x11c8>
 80056c0:	8809883a 	mov	r4,r17
 80056c4:	a00b883a 	mov	r5,r20
 80056c8:	000d883a 	mov	r6,zero
 80056cc:	01d00534 	movhi	r7,16404
 80056d0:	800d7740 	call	800d774 <__muldf3>
 80056d4:	1009883a 	mov	r4,r2
 80056d8:	180b883a 	mov	r5,r3
 80056dc:	900d883a 	mov	r6,r18
 80056e0:	980f883a 	mov	r7,r19
 80056e4:	800d5b40 	call	800d5b4 <__gedf2>
 80056e8:	002b883a 	mov	r21,zero
 80056ec:	0023883a 	mov	r17,zero
 80056f0:	10007a16 	blt	r2,zero,80058dc <_dtoa_r+0x10ec>
 80056f4:	d9002217 	ldw	r4,136(sp)
 80056f8:	ddc00717 	ldw	r23,28(sp)
 80056fc:	0108303a 	nor	r4,zero,r4
 8005700:	d9000515 	stw	r4,20(sp)
 8005704:	8009883a 	mov	r4,r16
 8005708:	a80b883a 	mov	r5,r21
 800570c:	8007ed40 	call	8007ed4 <_Bfree>
 8005710:	883f751e 	bne	r17,zero,80054e8 <__alt_data_end+0xfc0054e8>
 8005714:	003de406 	br	8004ea8 <__alt_data_end+0xfc004ea8>
 8005718:	e00b883a 	mov	r5,fp
 800571c:	8009883a 	mov	r4,r16
 8005720:	80085200 	call	8008520 <__pow5mult>
 8005724:	1039883a 	mov	fp,r2
 8005728:	003ed306 	br	8005278 <__alt_data_end+0xfc005278>
 800572c:	903ee01e 	bne	r18,zero,80052b0 <__alt_data_end+0xfc0052b0>
 8005730:	00800434 	movhi	r2,16
 8005734:	10bfffc4 	addi	r2,r2,-1
 8005738:	9884703a 	and	r2,r19,r2
 800573c:	103f081e 	bne	r2,zero,8005360 <__alt_data_end+0xfc005360>
 8005740:	9cdffc2c 	andhi	r19,r19,32752
 8005744:	983f0626 	beq	r19,zero,8005360 <__alt_data_end+0xfc005360>
 8005748:	d8800817 	ldw	r2,32(sp)
 800574c:	b5800044 	addi	r22,r22,1
 8005750:	04c00044 	movi	r19,1
 8005754:	10800044 	addi	r2,r2,1
 8005758:	d8800815 	stw	r2,32(sp)
 800575c:	003f0106 	br	8005364 <__alt_data_end+0xfc005364>
 8005760:	d9800f17 	ldw	r6,60(sp)
 8005764:	30016826 	beq	r6,zero,8005d08 <_dtoa_r+0x1518>
 8005768:	10810cc4 	addi	r2,r2,1075
 800576c:	dd400917 	ldw	r21,36(sp)
 8005770:	dd000817 	ldw	r20,32(sp)
 8005774:	003e9906 	br	80051dc <__alt_data_end+0xfc0051dc>
 8005778:	9011883a 	mov	r8,r18
 800577c:	4007883a 	mov	r3,r8
 8005780:	e02d883a 	mov	r22,fp
 8005784:	0080100e 	bge	zero,r2,80057c8 <_dtoa_r+0xfd8>
 8005788:	01800044 	movi	r6,1
 800578c:	8009883a 	mov	r4,r16
 8005790:	e00b883a 	mov	r5,fp
 8005794:	da001515 	stw	r8,84(sp)
 8005798:	da001715 	stw	r8,92(sp)
 800579c:	80086600 	call	8008660 <__lshift>
 80057a0:	1009883a 	mov	r4,r2
 80057a4:	a80b883a 	mov	r5,r21
 80057a8:	102d883a 	mov	r22,r2
 80057ac:	80087a80 	call	80087a8 <__mcmp>
 80057b0:	d8c01517 	ldw	r3,84(sp)
 80057b4:	da001717 	ldw	r8,92(sp)
 80057b8:	0081a50e 	bge	zero,r2,8005e50 <_dtoa_r+0x1660>
 80057bc:	00800e44 	movi	r2,57
 80057c0:	40817b26 	beq	r8,r2,8005db0 <_dtoa_r+0x15c0>
 80057c4:	40c00044 	addi	r3,r8,1
 80057c8:	8825883a 	mov	r18,r17
 80057cc:	9dc00044 	addi	r23,r19,1
 80057d0:	98c00005 	stb	r3,0(r19)
 80057d4:	a023883a 	mov	r17,r20
 80057d8:	b039883a 	mov	fp,r22
 80057dc:	003f3906 	br	80054c4 <__alt_data_end+0xfc0054c4>
 80057e0:	00800e44 	movi	r2,57
 80057e4:	9011883a 	mov	r8,r18
 80057e8:	90817226 	beq	r18,r2,8005db4 <_dtoa_r+0x15c4>
 80057ec:	0580010e 	bge	zero,r22,80057f4 <_dtoa_r+0x1004>
 80057f0:	ba000c44 	addi	r8,r23,49
 80057f4:	8825883a 	mov	r18,r17
 80057f8:	9dc00044 	addi	r23,r19,1
 80057fc:	9a000005 	stb	r8,0(r19)
 8005800:	a023883a 	mov	r17,r20
 8005804:	003f2f06 	br	80054c4 <__alt_data_end+0xfc0054c4>
 8005808:	880b883a 	mov	r5,r17
 800580c:	8009883a 	mov	r4,r16
 8005810:	01800284 	movi	r6,10
 8005814:	000f883a 	mov	r7,zero
 8005818:	8007efc0 	call	8007efc <__multadd>
 800581c:	1023883a 	mov	r17,r2
 8005820:	1029883a 	mov	r20,r2
 8005824:	003f9706 	br	8005684 <__alt_data_end+0xfc005684>
 8005828:	8009883a 	mov	r4,r16
 800582c:	180b883a 	mov	r5,r3
 8005830:	8007ed40 	call	8007ed4 <_Bfree>
 8005834:	00800044 	movi	r2,1
 8005838:	003f7306 	br	8005608 <__alt_data_end+0xfc005608>
 800583c:	e009883a 	mov	r4,fp
 8005840:	a80b883a 	mov	r5,r21
 8005844:	80087a80 	call	80087a8 <__mcmp>
 8005848:	103ee60e 	bge	r2,zero,80053e4 <__alt_data_end+0xfc0053e4>
 800584c:	8009883a 	mov	r4,r16
 8005850:	e00b883a 	mov	r5,fp
 8005854:	01800284 	movi	r6,10
 8005858:	000f883a 	mov	r7,zero
 800585c:	8007efc0 	call	8007efc <__multadd>
 8005860:	d9000517 	ldw	r4,20(sp)
 8005864:	d9800b17 	ldw	r6,44(sp)
 8005868:	1039883a 	mov	fp,r2
 800586c:	213fffc4 	addi	r4,r4,-1
 8005870:	d9000515 	stw	r4,20(sp)
 8005874:	303f2d1e 	bne	r6,zero,800552c <__alt_data_end+0xfc00552c>
 8005878:	d9000d17 	ldw	r4,52(sp)
 800587c:	0101780e 	bge	zero,r4,8005e60 <_dtoa_r+0x1670>
 8005880:	d9000615 	stw	r4,24(sp)
 8005884:	003edb06 	br	80053f4 <__alt_data_end+0xfc0053f4>
 8005888:	00800084 	movi	r2,2
 800588c:	30818e1e 	bne	r6,r2,8005ec8 <_dtoa_r+0x16d8>
 8005890:	d8000b15 	stw	zero,44(sp)
 8005894:	003f8106 	br	800569c <__alt_data_end+0xfc00569c>
 8005898:	d8800717 	ldw	r2,28(sp)
 800589c:	003c0306 	br	80048ac <__alt_data_end+0xfc0048ac>
 80058a0:	d9000317 	ldw	r4,12(sp)
 80058a4:	00800084 	movi	r2,2
 80058a8:	113ed00e 	bge	r2,r4,80053ec <__alt_data_end+0xfc0053ec>
 80058ac:	d8c00617 	ldw	r3,24(sp)
 80058b0:	183f901e 	bne	r3,zero,80056f4 <__alt_data_end+0xfc0056f4>
 80058b4:	a80b883a 	mov	r5,r21
 80058b8:	8009883a 	mov	r4,r16
 80058bc:	01800144 	movi	r6,5
 80058c0:	000f883a 	mov	r7,zero
 80058c4:	8007efc0 	call	8007efc <__multadd>
 80058c8:	e009883a 	mov	r4,fp
 80058cc:	100b883a 	mov	r5,r2
 80058d0:	102b883a 	mov	r21,r2
 80058d4:	80087a80 	call	80087a8 <__mcmp>
 80058d8:	00bf860e 	bge	zero,r2,80056f4 <__alt_data_end+0xfc0056f4>
 80058dc:	d9800717 	ldw	r6,28(sp)
 80058e0:	00800c44 	movi	r2,49
 80058e4:	30800005 	stb	r2,0(r6)
 80058e8:	d8800517 	ldw	r2,20(sp)
 80058ec:	35c00044 	addi	r23,r6,1
 80058f0:	10800044 	addi	r2,r2,1
 80058f4:	d8800515 	stw	r2,20(sp)
 80058f8:	003f8206 	br	8005704 <__alt_data_end+0xfc005704>
 80058fc:	903e981e 	bne	r18,zero,8005360 <__alt_data_end+0xfc005360>
 8005900:	003f8b06 	br	8005730 <__alt_data_end+0xfc005730>
 8005904:	d9800517 	ldw	r6,20(sp)
 8005908:	d8c00717 	ldw	r3,28(sp)
 800590c:	00800c44 	movi	r2,49
 8005910:	31800044 	addi	r6,r6,1
 8005914:	d9800515 	stw	r6,20(sp)
 8005918:	18800005 	stb	r2,0(r3)
 800591c:	003ee906 	br	80054c4 <__alt_data_end+0xfc0054c4>
 8005920:	dc000317 	ldw	r16,12(sp)
 8005924:	003d6006 	br	8004ea8 <__alt_data_end+0xfc004ea8>
 8005928:	8809883a 	mov	r4,r17
 800592c:	800e9380 	call	800e938 <__floatsidf>
 8005930:	a009883a 	mov	r4,r20
 8005934:	a80b883a 	mov	r5,r21
 8005938:	100d883a 	mov	r6,r2
 800593c:	180f883a 	mov	r7,r3
 8005940:	800d7740 	call	800d774 <__muldf3>
 8005944:	1009883a 	mov	r4,r2
 8005948:	180b883a 	mov	r5,r3
 800594c:	000d883a 	mov	r6,zero
 8005950:	01d00734 	movhi	r7,16412
 8005954:	800c3140 	call	800c314 <__adddf3>
 8005958:	1023883a 	mov	r17,r2
 800595c:	00bf3034 	movhi	r2,64704
 8005960:	1885883a 	add	r2,r3,r2
 8005964:	d8800e15 	stw	r2,56(sp)
 8005968:	a009883a 	mov	r4,r20
 800596c:	a80b883a 	mov	r5,r21
 8005970:	000d883a 	mov	r6,zero
 8005974:	01d00534 	movhi	r7,16404
 8005978:	800dfe00 	call	800dfe0 <__subdf3>
 800597c:	d9c00e17 	ldw	r7,56(sp)
 8005980:	1009883a 	mov	r4,r2
 8005984:	180b883a 	mov	r5,r3
 8005988:	880d883a 	mov	r6,r17
 800598c:	102b883a 	mov	r21,r2
 8005990:	1829883a 	mov	r20,r3
 8005994:	800d5b40 	call	800d5b4 <__gedf2>
 8005998:	00807716 	blt	zero,r2,8005b78 <_dtoa_r+0x1388>
 800599c:	d8800e17 	ldw	r2,56(sp)
 80059a0:	a809883a 	mov	r4,r21
 80059a4:	a00b883a 	mov	r5,r20
 80059a8:	11e0003c 	xorhi	r7,r2,32768
 80059ac:	880d883a 	mov	r6,r17
 80059b0:	800d6940 	call	800d694 <__ledf2>
 80059b4:	103d6b0e 	bge	r2,zero,8004f64 <__alt_data_end+0xfc004f64>
 80059b8:	002b883a 	mov	r21,zero
 80059bc:	0023883a 	mov	r17,zero
 80059c0:	003f4c06 	br	80056f4 <__alt_data_end+0xfc0056f4>
 80059c4:	d9800917 	ldw	r6,36(sp)
 80059c8:	e00b883a 	mov	r5,fp
 80059cc:	8009883a 	mov	r4,r16
 80059d0:	80085200 	call	8008520 <__pow5mult>
 80059d4:	1039883a 	mov	fp,r2
 80059d8:	003e2706 	br	8005278 <__alt_data_end+0xfc005278>
 80059dc:	d8000b15 	stw	zero,44(sp)
 80059e0:	003c4906 	br	8004b08 <__alt_data_end+0xfc004b08>
 80059e4:	d9000917 	ldw	r4,36(sp)
 80059e8:	d9800a17 	ldw	r6,40(sp)
 80059ec:	dd400915 	stw	r21,36(sp)
 80059f0:	a905c83a 	sub	r2,r21,r4
 80059f4:	308d883a 	add	r6,r6,r2
 80059f8:	d9800a15 	stw	r6,40(sp)
 80059fc:	002b883a 	mov	r21,zero
 8005a00:	003df206 	br	80051cc <__alt_data_end+0xfc0051cc>
 8005a04:	dc800e15 	stw	r18,56(sp)
 8005a08:	982b883a 	mov	r21,r19
 8005a0c:	04400084 	movi	r17,2
 8005a10:	003c7406 	br	8004be4 <__alt_data_end+0xfc004be4>
 8005a14:	04400044 	movi	r17,1
 8005a18:	dc400d15 	stw	r17,52(sp)
 8005a1c:	dc400615 	stw	r17,24(sp)
 8005a20:	dc402215 	stw	r17,136(sp)
 8005a24:	80001115 	stw	zero,68(r16)
 8005a28:	000b883a 	mov	r5,zero
 8005a2c:	003c4a06 	br	8004b58 <__alt_data_end+0xfc004b58>
 8005a30:	3023883a 	mov	r17,r6
 8005a34:	003ffb06 	br	8005a24 <__alt_data_end+0xfc005a24>
 8005a38:	1000021e 	bne	r2,zero,8005a44 <_dtoa_r+0x1254>
 8005a3c:	4200004c 	andi	r8,r8,1
 8005a40:	403e8f1e 	bne	r8,zero,8005480 <__alt_data_end+0xfc005480>
 8005a44:	01000c04 	movi	r4,48
 8005a48:	00000106 	br	8005a50 <_dtoa_r+0x1260>
 8005a4c:	102f883a 	mov	r23,r2
 8005a50:	b8bfffc4 	addi	r2,r23,-1
 8005a54:	10c00007 	ldb	r3,0(r2)
 8005a58:	193ffc26 	beq	r3,r4,8005a4c <__alt_data_end+0xfc005a4c>
 8005a5c:	003e9906 	br	80054c4 <__alt_data_end+0xfc0054c4>
 8005a60:	d9000517 	ldw	r4,20(sp)
 8005a64:	012fc83a 	sub	r23,zero,r4
 8005a68:	b800ad26 	beq	r23,zero,8005d20 <_dtoa_r+0x1530>
 8005a6c:	b88003cc 	andi	r2,r23,15
 8005a70:	100490fa 	slli	r2,r2,3
 8005a74:	00c20074 	movhi	r3,2049
 8005a78:	18c6ec04 	addi	r3,r3,7088
 8005a7c:	1885883a 	add	r2,r3,r2
 8005a80:	11800017 	ldw	r6,0(r2)
 8005a84:	11c00117 	ldw	r7,4(r2)
 8005a88:	b82fd13a 	srai	r23,r23,4
 8005a8c:	9009883a 	mov	r4,r18
 8005a90:	980b883a 	mov	r5,r19
 8005a94:	800d7740 	call	800d774 <__muldf3>
 8005a98:	1029883a 	mov	r20,r2
 8005a9c:	182b883a 	mov	r21,r3
 8005aa0:	b800f426 	beq	r23,zero,8005e74 <_dtoa_r+0x1684>
 8005aa4:	02020074 	movhi	r8,2049
 8005aa8:	4206e204 	addi	r8,r8,7048
 8005aac:	8029883a 	mov	r20,r16
 8005ab0:	04400084 	movi	r17,2
 8005ab4:	4021883a 	mov	r16,r8
 8005ab8:	b980004c 	andi	r6,r23,1
 8005abc:	1009883a 	mov	r4,r2
 8005ac0:	b82fd07a 	srai	r23,r23,1
 8005ac4:	180b883a 	mov	r5,r3
 8005ac8:	30000426 	beq	r6,zero,8005adc <_dtoa_r+0x12ec>
 8005acc:	81800017 	ldw	r6,0(r16)
 8005ad0:	81c00117 	ldw	r7,4(r16)
 8005ad4:	8c400044 	addi	r17,r17,1
 8005ad8:	800d7740 	call	800d774 <__muldf3>
 8005adc:	84000204 	addi	r16,r16,8
 8005ae0:	b83ff51e 	bne	r23,zero,8005ab8 <__alt_data_end+0xfc005ab8>
 8005ae4:	a021883a 	mov	r16,r20
 8005ae8:	182b883a 	mov	r21,r3
 8005aec:	1029883a 	mov	r20,r2
 8005af0:	003c5506 	br	8004c48 <__alt_data_end+0xfc004c48>
 8005af4:	d9800517 	ldw	r6,20(sp)
 8005af8:	d9000717 	ldw	r4,28(sp)
 8005afc:	00c00c04 	movi	r3,48
 8005b00:	31800044 	addi	r6,r6,1
 8005b04:	d9800515 	stw	r6,20(sp)
 8005b08:	20c00005 	stb	r3,0(r4)
 8005b0c:	02000c44 	movi	r8,49
 8005b10:	003da206 	br	800519c <__alt_data_end+0xfc00519c>
 8005b14:	89400117 	ldw	r5,4(r17)
 8005b18:	8009883a 	mov	r4,r16
 8005b1c:	8007e2c0 	call	8007e2c <_Balloc>
 8005b20:	89800417 	ldw	r6,16(r17)
 8005b24:	11000304 	addi	r4,r2,12
 8005b28:	89400304 	addi	r5,r17,12
 8005b2c:	31800084 	addi	r6,r6,2
 8005b30:	318d883a 	add	r6,r6,r6
 8005b34:	318d883a 	add	r6,r6,r6
 8005b38:	1027883a 	mov	r19,r2
 8005b3c:	8007a740 	call	8007a74 <memcpy>
 8005b40:	8009883a 	mov	r4,r16
 8005b44:	980b883a 	mov	r5,r19
 8005b48:	01800044 	movi	r6,1
 8005b4c:	80086600 	call	8008660 <__lshift>
 8005b50:	1029883a 	mov	r20,r2
 8005b54:	003e8606 	br	8005570 <__alt_data_end+0xfc005570>
 8005b58:	00800e44 	movi	r2,57
 8005b5c:	90809526 	beq	r18,r2,8005db4 <_dtoa_r+0x15c4>
 8005b60:	92000044 	addi	r8,r18,1
 8005b64:	003f2306 	br	80057f4 <__alt_data_end+0xfc0057f4>
 8005b68:	9011883a 	mov	r8,r18
 8005b6c:	8825883a 	mov	r18,r17
 8005b70:	a023883a 	mov	r17,r20
 8005b74:	003e3706 	br	8005454 <__alt_data_end+0xfc005454>
 8005b78:	002b883a 	mov	r21,zero
 8005b7c:	0023883a 	mov	r17,zero
 8005b80:	003f5606 	br	80058dc <__alt_data_end+0xfc0058dc>
 8005b84:	51bfffc4 	addi	r6,r10,-1
 8005b88:	300490fa 	slli	r2,r6,3
 8005b8c:	00c20074 	movhi	r3,2049
 8005b90:	18c6ec04 	addi	r3,r3,7088
 8005b94:	1885883a 	add	r2,r3,r2
 8005b98:	d9c00e17 	ldw	r7,56(sp)
 8005b9c:	11000017 	ldw	r4,0(r2)
 8005ba0:	11400117 	ldw	r5,4(r2)
 8005ba4:	d8800717 	ldw	r2,28(sp)
 8005ba8:	d9801015 	stw	r6,64(sp)
 8005bac:	880d883a 	mov	r6,r17
 8005bb0:	da801615 	stw	r10,88(sp)
 8005bb4:	15c00044 	addi	r23,r2,1
 8005bb8:	800d7740 	call	800d774 <__muldf3>
 8005bbc:	a80b883a 	mov	r5,r21
 8005bc0:	a009883a 	mov	r4,r20
 8005bc4:	d8c01115 	stw	r3,68(sp)
 8005bc8:	d8800e15 	stw	r2,56(sp)
 8005bcc:	800e8b00 	call	800e8b0 <__fixdfsi>
 8005bd0:	1009883a 	mov	r4,r2
 8005bd4:	1023883a 	mov	r17,r2
 8005bd8:	800e9380 	call	800e938 <__floatsidf>
 8005bdc:	a009883a 	mov	r4,r20
 8005be0:	a80b883a 	mov	r5,r21
 8005be4:	100d883a 	mov	r6,r2
 8005be8:	180f883a 	mov	r7,r3
 8005bec:	800dfe00 	call	800dfe0 <__subdf3>
 8005bf0:	1813883a 	mov	r9,r3
 8005bf4:	d8c00717 	ldw	r3,28(sp)
 8005bf8:	8c400c04 	addi	r17,r17,48
 8005bfc:	1011883a 	mov	r8,r2
 8005c00:	1c400005 	stb	r17,0(r3)
 8005c04:	da801617 	ldw	r10,88(sp)
 8005c08:	00800044 	movi	r2,1
 8005c0c:	50802326 	beq	r10,r2,8005c9c <_dtoa_r+0x14ac>
 8005c10:	d8800717 	ldw	r2,28(sp)
 8005c14:	b82b883a 	mov	r21,r23
 8005c18:	dc001315 	stw	r16,76(sp)
 8005c1c:	12a9883a 	add	r20,r2,r10
 8005c20:	4807883a 	mov	r3,r9
 8005c24:	4005883a 	mov	r2,r8
 8005c28:	dc801415 	stw	r18,80(sp)
 8005c2c:	000d883a 	mov	r6,zero
 8005c30:	01d00934 	movhi	r7,16420
 8005c34:	1009883a 	mov	r4,r2
 8005c38:	180b883a 	mov	r5,r3
 8005c3c:	800d7740 	call	800d774 <__muldf3>
 8005c40:	180b883a 	mov	r5,r3
 8005c44:	1009883a 	mov	r4,r2
 8005c48:	1821883a 	mov	r16,r3
 8005c4c:	1025883a 	mov	r18,r2
 8005c50:	800e8b00 	call	800e8b0 <__fixdfsi>
 8005c54:	1009883a 	mov	r4,r2
 8005c58:	1023883a 	mov	r17,r2
 8005c5c:	800e9380 	call	800e938 <__floatsidf>
 8005c60:	9009883a 	mov	r4,r18
 8005c64:	800b883a 	mov	r5,r16
 8005c68:	100d883a 	mov	r6,r2
 8005c6c:	180f883a 	mov	r7,r3
 8005c70:	8c400c04 	addi	r17,r17,48
 8005c74:	800dfe00 	call	800dfe0 <__subdf3>
 8005c78:	ad400044 	addi	r21,r21,1
 8005c7c:	ac7fffc5 	stb	r17,-1(r21)
 8005c80:	ad3fea1e 	bne	r21,r20,8005c2c <__alt_data_end+0xfc005c2c>
 8005c84:	1813883a 	mov	r9,r3
 8005c88:	d8c01017 	ldw	r3,64(sp)
 8005c8c:	dc001317 	ldw	r16,76(sp)
 8005c90:	dc801417 	ldw	r18,80(sp)
 8005c94:	1011883a 	mov	r8,r2
 8005c98:	b8ef883a 	add	r23,r23,r3
 8005c9c:	d9000e17 	ldw	r4,56(sp)
 8005ca0:	d9401117 	ldw	r5,68(sp)
 8005ca4:	000d883a 	mov	r6,zero
 8005ca8:	01cff834 	movhi	r7,16352
 8005cac:	da001715 	stw	r8,92(sp)
 8005cb0:	da401515 	stw	r9,84(sp)
 8005cb4:	800c3140 	call	800c314 <__adddf3>
 8005cb8:	da001717 	ldw	r8,92(sp)
 8005cbc:	da401517 	ldw	r9,84(sp)
 8005cc0:	1009883a 	mov	r4,r2
 8005cc4:	400d883a 	mov	r6,r8
 8005cc8:	480f883a 	mov	r7,r9
 8005ccc:	180b883a 	mov	r5,r3
 8005cd0:	800d6940 	call	800d694 <__ledf2>
 8005cd4:	da001717 	ldw	r8,92(sp)
 8005cd8:	da401517 	ldw	r9,84(sp)
 8005cdc:	10003b0e 	bge	r2,zero,8005dcc <_dtoa_r+0x15dc>
 8005ce0:	d9001217 	ldw	r4,72(sp)
 8005ce4:	bd7fffc3 	ldbu	r21,-1(r23)
 8005ce8:	d9000515 	stw	r4,20(sp)
 8005cec:	003d1c06 	br	8005160 <__alt_data_end+0xfc005160>
 8005cf0:	d8c00817 	ldw	r3,32(sp)
 8005cf4:	18a9c83a 	sub	r20,r3,r2
 8005cf8:	0005883a 	mov	r2,zero
 8005cfc:	003d3706 	br	80051dc <__alt_data_end+0xfc0051dc>
 8005d00:	00800044 	movi	r2,1
 8005d04:	003dd006 	br	8005448 <__alt_data_end+0xfc005448>
 8005d08:	d8c00217 	ldw	r3,8(sp)
 8005d0c:	00800d84 	movi	r2,54
 8005d10:	dd400917 	ldw	r21,36(sp)
 8005d14:	10c5c83a 	sub	r2,r2,r3
 8005d18:	dd000817 	ldw	r20,32(sp)
 8005d1c:	003d2f06 	br	80051dc <__alt_data_end+0xfc0051dc>
 8005d20:	9029883a 	mov	r20,r18
 8005d24:	982b883a 	mov	r21,r19
 8005d28:	04400084 	movi	r17,2
 8005d2c:	003bc606 	br	8004c48 <__alt_data_end+0xfc004c48>
 8005d30:	d8800617 	ldw	r2,24(sp)
 8005d34:	103efc26 	beq	r2,zero,8005928 <__alt_data_end+0xfc005928>
 8005d38:	d8c00d17 	ldw	r3,52(sp)
 8005d3c:	00fc890e 	bge	zero,r3,8004f64 <__alt_data_end+0xfc004f64>
 8005d40:	a80b883a 	mov	r5,r21
 8005d44:	a009883a 	mov	r4,r20
 8005d48:	000d883a 	mov	r6,zero
 8005d4c:	01d00934 	movhi	r7,16420
 8005d50:	800d7740 	call	800d774 <__muldf3>
 8005d54:	89000044 	addi	r4,r17,1
 8005d58:	1029883a 	mov	r20,r2
 8005d5c:	182b883a 	mov	r21,r3
 8005d60:	800e9380 	call	800e938 <__floatsidf>
 8005d64:	a009883a 	mov	r4,r20
 8005d68:	a80b883a 	mov	r5,r21
 8005d6c:	100d883a 	mov	r6,r2
 8005d70:	180f883a 	mov	r7,r3
 8005d74:	800d7740 	call	800d774 <__muldf3>
 8005d78:	1009883a 	mov	r4,r2
 8005d7c:	180b883a 	mov	r5,r3
 8005d80:	000d883a 	mov	r6,zero
 8005d84:	01d00734 	movhi	r7,16412
 8005d88:	800c3140 	call	800c314 <__adddf3>
 8005d8c:	d9000517 	ldw	r4,20(sp)
 8005d90:	1023883a 	mov	r17,r2
 8005d94:	00bf3034 	movhi	r2,64704
 8005d98:	213fffc4 	addi	r4,r4,-1
 8005d9c:	1885883a 	add	r2,r3,r2
 8005da0:	d9001215 	stw	r4,72(sp)
 8005da4:	d8800e15 	stw	r2,56(sp)
 8005da8:	da800d17 	ldw	r10,52(sp)
 8005dac:	003bc306 	br	8004cbc <__alt_data_end+0xfc004cbc>
 8005db0:	b039883a 	mov	fp,r22
 8005db4:	01000e44 	movi	r4,57
 8005db8:	8825883a 	mov	r18,r17
 8005dbc:	9dc00044 	addi	r23,r19,1
 8005dc0:	99000005 	stb	r4,0(r19)
 8005dc4:	a023883a 	mov	r17,r20
 8005dc8:	003dae06 	br	8005484 <__alt_data_end+0xfc005484>
 8005dcc:	d9800e17 	ldw	r6,56(sp)
 8005dd0:	d9c01117 	ldw	r7,68(sp)
 8005dd4:	0009883a 	mov	r4,zero
 8005dd8:	014ff834 	movhi	r5,16352
 8005ddc:	da001715 	stw	r8,92(sp)
 8005de0:	da401515 	stw	r9,84(sp)
 8005de4:	800dfe00 	call	800dfe0 <__subdf3>
 8005de8:	da001717 	ldw	r8,92(sp)
 8005dec:	da401517 	ldw	r9,84(sp)
 8005df0:	1009883a 	mov	r4,r2
 8005df4:	180b883a 	mov	r5,r3
 8005df8:	400d883a 	mov	r6,r8
 8005dfc:	480f883a 	mov	r7,r9
 8005e00:	800d5b40 	call	800d5b4 <__gedf2>
 8005e04:	00bc570e 	bge	zero,r2,8004f64 <__alt_data_end+0xfc004f64>
 8005e08:	01000c04 	movi	r4,48
 8005e0c:	00000106 	br	8005e14 <_dtoa_r+0x1624>
 8005e10:	102f883a 	mov	r23,r2
 8005e14:	b8bfffc4 	addi	r2,r23,-1
 8005e18:	10c00007 	ldb	r3,0(r2)
 8005e1c:	193ffc26 	beq	r3,r4,8005e10 <__alt_data_end+0xfc005e10>
 8005e20:	d9801217 	ldw	r6,72(sp)
 8005e24:	d9800515 	stw	r6,20(sp)
 8005e28:	003c1f06 	br	8004ea8 <__alt_data_end+0xfc004ea8>
 8005e2c:	d8801217 	ldw	r2,72(sp)
 8005e30:	dc001117 	ldw	r16,68(sp)
 8005e34:	d8800515 	stw	r2,20(sp)
 8005e38:	003cc906 	br	8005160 <__alt_data_end+0xfc005160>
 8005e3c:	dd801317 	ldw	r22,76(sp)
 8005e40:	dc001117 	ldw	r16,68(sp)
 8005e44:	dcc01417 	ldw	r19,80(sp)
 8005e48:	dc801017 	ldw	r18,64(sp)
 8005e4c:	003c4506 	br	8004f64 <__alt_data_end+0xfc004f64>
 8005e50:	103e5d1e 	bne	r2,zero,80057c8 <__alt_data_end+0xfc0057c8>
 8005e54:	4080004c 	andi	r2,r8,1
 8005e58:	103e5b26 	beq	r2,zero,80057c8 <__alt_data_end+0xfc0057c8>
 8005e5c:	003e5706 	br	80057bc <__alt_data_end+0xfc0057bc>
 8005e60:	d8c00317 	ldw	r3,12(sp)
 8005e64:	00800084 	movi	r2,2
 8005e68:	10c00a16 	blt	r2,r3,8005e94 <_dtoa_r+0x16a4>
 8005e6c:	d9000d17 	ldw	r4,52(sp)
 8005e70:	003e8306 	br	8005880 <__alt_data_end+0xfc005880>
 8005e74:	04400084 	movi	r17,2
 8005e78:	003b7306 	br	8004c48 <__alt_data_end+0xfc004c48>
 8005e7c:	d9801217 	ldw	r6,72(sp)
 8005e80:	d9800515 	stw	r6,20(sp)
 8005e84:	003cb606 	br	8005160 <__alt_data_end+0xfc005160>
 8005e88:	d9001217 	ldw	r4,72(sp)
 8005e8c:	d9000515 	stw	r4,20(sp)
 8005e90:	003c0506 	br	8004ea8 <__alt_data_end+0xfc004ea8>
 8005e94:	d9800d17 	ldw	r6,52(sp)
 8005e98:	d9800615 	stw	r6,24(sp)
 8005e9c:	003e8306 	br	80058ac <__alt_data_end+0xfc0058ac>
 8005ea0:	d9800317 	ldw	r6,12(sp)
 8005ea4:	00800084 	movi	r2,2
 8005ea8:	11800216 	blt	r2,r6,8005eb4 <_dtoa_r+0x16c4>
 8005eac:	d8800d17 	ldw	r2,52(sp)
 8005eb0:	003da606 	br	800554c <__alt_data_end+0xfc00554c>
 8005eb4:	d8800d17 	ldw	r2,52(sp)
 8005eb8:	d8800615 	stw	r2,24(sp)
 8005ebc:	003e7b06 	br	80058ac <__alt_data_end+0xfc0058ac>
 8005ec0:	05000044 	movi	r20,1
 8005ec4:	003b0506 	br	8004adc <__alt_data_end+0xfc004adc>
 8005ec8:	8009883a 	mov	r4,r16
 8005ecc:	80001115 	stw	zero,68(r16)
 8005ed0:	000b883a 	mov	r5,zero
 8005ed4:	8007e2c0 	call	8007e2c <_Balloc>
 8005ed8:	d8800715 	stw	r2,28(sp)
 8005edc:	d8c00717 	ldw	r3,28(sp)
 8005ee0:	00bfffc4 	movi	r2,-1
 8005ee4:	01000044 	movi	r4,1
 8005ee8:	d8800615 	stw	r2,24(sp)
 8005eec:	80c01015 	stw	r3,64(r16)
 8005ef0:	d9000b15 	stw	r4,44(sp)
 8005ef4:	d8002215 	stw	zero,136(sp)
 8005ef8:	d8800d15 	stw	r2,52(sp)
 8005efc:	003c1906 	br	8004f64 <__alt_data_end+0xfc004f64>
 8005f00:	193d2926 	beq	r3,r4,80053a8 <__alt_data_end+0xfc0053a8>
 8005f04:	00c00f04 	movi	r3,60
 8005f08:	1885c83a 	sub	r2,r3,r2
 8005f0c:	003d7b06 	br	80054fc <__alt_data_end+0xfc0054fc>
 8005f10:	000b883a 	mov	r5,zero
 8005f14:	003b1006 	br	8004b58 <__alt_data_end+0xfc004b58>

08005f18 <_fflush_r>:
 8005f18:	defffb04 	addi	sp,sp,-20
 8005f1c:	dcc00315 	stw	r19,12(sp)
 8005f20:	dc000015 	stw	r16,0(sp)
 8005f24:	dfc00415 	stw	ra,16(sp)
 8005f28:	dc800215 	stw	r18,8(sp)
 8005f2c:	dc400115 	stw	r17,4(sp)
 8005f30:	2027883a 	mov	r19,r4
 8005f34:	2821883a 	mov	r16,r5
 8005f38:	20000226 	beq	r4,zero,8005f44 <_fflush_r+0x2c>
 8005f3c:	20800e17 	ldw	r2,56(r4)
 8005f40:	10005326 	beq	r2,zero,8006090 <_fflush_r+0x178>
 8005f44:	8080030b 	ldhu	r2,12(r16)
 8005f48:	10ffffcc 	andi	r3,r2,65535
 8005f4c:	18e0001c 	xori	r3,r3,32768
 8005f50:	18e00004 	addi	r3,r3,-32768
 8005f54:	18002c26 	beq	r3,zero,8006008 <_fflush_r+0xf0>
 8005f58:	10c0020c 	andi	r3,r2,8
 8005f5c:	1800321e 	bne	r3,zero,8006028 <_fflush_r+0x110>
 8005f60:	80c00117 	ldw	r3,4(r16)
 8005f64:	10820014 	ori	r2,r2,2048
 8005f68:	8080030d 	sth	r2,12(r16)
 8005f6c:	00c0570e 	bge	zero,r3,80060cc <_fflush_r+0x1b4>
 8005f70:	82000a17 	ldw	r8,40(r16)
 8005f74:	40002426 	beq	r8,zero,8006008 <_fflush_r+0xf0>
 8005f78:	9c400017 	ldw	r17,0(r19)
 8005f7c:	10c4000c 	andi	r3,r2,4096
 8005f80:	98000015 	stw	zero,0(r19)
 8005f84:	18004626 	beq	r3,zero,80060a0 <_fflush_r+0x188>
 8005f88:	81801417 	ldw	r6,80(r16)
 8005f8c:	10c0010c 	andi	r3,r2,4
 8005f90:	18000626 	beq	r3,zero,8005fac <_fflush_r+0x94>
 8005f94:	80c00117 	ldw	r3,4(r16)
 8005f98:	80800c17 	ldw	r2,48(r16)
 8005f9c:	30cdc83a 	sub	r6,r6,r3
 8005fa0:	10000226 	beq	r2,zero,8005fac <_fflush_r+0x94>
 8005fa4:	80800f17 	ldw	r2,60(r16)
 8005fa8:	308dc83a 	sub	r6,r6,r2
 8005fac:	81400717 	ldw	r5,28(r16)
 8005fb0:	9809883a 	mov	r4,r19
 8005fb4:	000f883a 	mov	r7,zero
 8005fb8:	403ee83a 	callr	r8
 8005fbc:	00ffffc4 	movi	r3,-1
 8005fc0:	10c04526 	beq	r2,r3,80060d8 <_fflush_r+0x1c0>
 8005fc4:	80c0030b 	ldhu	r3,12(r16)
 8005fc8:	81000417 	ldw	r4,16(r16)
 8005fcc:	80000115 	stw	zero,4(r16)
 8005fd0:	197dffcc 	andi	r5,r3,63487
 8005fd4:	8140030d 	sth	r5,12(r16)
 8005fd8:	81000015 	stw	r4,0(r16)
 8005fdc:	18c4000c 	andi	r3,r3,4096
 8005fe0:	18000126 	beq	r3,zero,8005fe8 <_fflush_r+0xd0>
 8005fe4:	80801415 	stw	r2,80(r16)
 8005fe8:	81400c17 	ldw	r5,48(r16)
 8005fec:	9c400015 	stw	r17,0(r19)
 8005ff0:	28000526 	beq	r5,zero,8006008 <_fflush_r+0xf0>
 8005ff4:	80801004 	addi	r2,r16,64
 8005ff8:	28800226 	beq	r5,r2,8006004 <_fflush_r+0xec>
 8005ffc:	9809883a 	mov	r4,r19
 8006000:	80066480 	call	8006648 <_free_r>
 8006004:	80000c15 	stw	zero,48(r16)
 8006008:	0005883a 	mov	r2,zero
 800600c:	dfc00417 	ldw	ra,16(sp)
 8006010:	dcc00317 	ldw	r19,12(sp)
 8006014:	dc800217 	ldw	r18,8(sp)
 8006018:	dc400117 	ldw	r17,4(sp)
 800601c:	dc000017 	ldw	r16,0(sp)
 8006020:	dec00504 	addi	sp,sp,20
 8006024:	f800283a 	ret
 8006028:	84800417 	ldw	r18,16(r16)
 800602c:	903ff626 	beq	r18,zero,8006008 <__alt_data_end+0xfc006008>
 8006030:	84400017 	ldw	r17,0(r16)
 8006034:	108000cc 	andi	r2,r2,3
 8006038:	84800015 	stw	r18,0(r16)
 800603c:	8ca3c83a 	sub	r17,r17,r18
 8006040:	10001526 	beq	r2,zero,8006098 <_fflush_r+0x180>
 8006044:	0005883a 	mov	r2,zero
 8006048:	80800215 	stw	r2,8(r16)
 800604c:	04400316 	blt	zero,r17,800605c <_fflush_r+0x144>
 8006050:	003fed06 	br	8006008 <__alt_data_end+0xfc006008>
 8006054:	90a5883a 	add	r18,r18,r2
 8006058:	047feb0e 	bge	zero,r17,8006008 <__alt_data_end+0xfc006008>
 800605c:	80800917 	ldw	r2,36(r16)
 8006060:	81400717 	ldw	r5,28(r16)
 8006064:	880f883a 	mov	r7,r17
 8006068:	900d883a 	mov	r6,r18
 800606c:	9809883a 	mov	r4,r19
 8006070:	103ee83a 	callr	r2
 8006074:	88a3c83a 	sub	r17,r17,r2
 8006078:	00bff616 	blt	zero,r2,8006054 <__alt_data_end+0xfc006054>
 800607c:	80c0030b 	ldhu	r3,12(r16)
 8006080:	00bfffc4 	movi	r2,-1
 8006084:	18c01014 	ori	r3,r3,64
 8006088:	80c0030d 	sth	r3,12(r16)
 800608c:	003fdf06 	br	800600c <__alt_data_end+0xfc00600c>
 8006090:	80064d40 	call	80064d4 <__sinit>
 8006094:	003fab06 	br	8005f44 <__alt_data_end+0xfc005f44>
 8006098:	80800517 	ldw	r2,20(r16)
 800609c:	003fea06 	br	8006048 <__alt_data_end+0xfc006048>
 80060a0:	81400717 	ldw	r5,28(r16)
 80060a4:	000d883a 	mov	r6,zero
 80060a8:	9809883a 	mov	r4,r19
 80060ac:	01c00044 	movi	r7,1
 80060b0:	403ee83a 	callr	r8
 80060b4:	100d883a 	mov	r6,r2
 80060b8:	00bfffc4 	movi	r2,-1
 80060bc:	30801326 	beq	r6,r2,800610c <_fflush_r+0x1f4>
 80060c0:	8080030b 	ldhu	r2,12(r16)
 80060c4:	82000a17 	ldw	r8,40(r16)
 80060c8:	003fb006 	br	8005f8c <__alt_data_end+0xfc005f8c>
 80060cc:	80c00f17 	ldw	r3,60(r16)
 80060d0:	00ffa716 	blt	zero,r3,8005f70 <__alt_data_end+0xfc005f70>
 80060d4:	003fcc06 	br	8006008 <__alt_data_end+0xfc006008>
 80060d8:	98c00017 	ldw	r3,0(r19)
 80060dc:	183fb926 	beq	r3,zero,8005fc4 <__alt_data_end+0xfc005fc4>
 80060e0:	01000744 	movi	r4,29
 80060e4:	19000226 	beq	r3,r4,80060f0 <_fflush_r+0x1d8>
 80060e8:	01000584 	movi	r4,22
 80060ec:	1900101e 	bne	r3,r4,8006130 <_fflush_r+0x218>
 80060f0:	8080030b 	ldhu	r2,12(r16)
 80060f4:	80c00417 	ldw	r3,16(r16)
 80060f8:	80000115 	stw	zero,4(r16)
 80060fc:	10bdffcc 	andi	r2,r2,63487
 8006100:	8080030d 	sth	r2,12(r16)
 8006104:	80c00015 	stw	r3,0(r16)
 8006108:	003fb706 	br	8005fe8 <__alt_data_end+0xfc005fe8>
 800610c:	98800017 	ldw	r2,0(r19)
 8006110:	103feb26 	beq	r2,zero,80060c0 <__alt_data_end+0xfc0060c0>
 8006114:	00c00744 	movi	r3,29
 8006118:	10c00226 	beq	r2,r3,8006124 <_fflush_r+0x20c>
 800611c:	00c00584 	movi	r3,22
 8006120:	10ffd61e 	bne	r2,r3,800607c <__alt_data_end+0xfc00607c>
 8006124:	9c400015 	stw	r17,0(r19)
 8006128:	0005883a 	mov	r2,zero
 800612c:	003fb706 	br	800600c <__alt_data_end+0xfc00600c>
 8006130:	80c0030b 	ldhu	r3,12(r16)
 8006134:	18c01014 	ori	r3,r3,64
 8006138:	80c0030d 	sth	r3,12(r16)
 800613c:	003fb306 	br	800600c <__alt_data_end+0xfc00600c>

08006140 <fflush>:
 8006140:	20000526 	beq	r4,zero,8006158 <fflush+0x18>
 8006144:	00820074 	movhi	r2,2049
 8006148:	108e1f04 	addi	r2,r2,14460
 800614c:	200b883a 	mov	r5,r4
 8006150:	11000017 	ldw	r4,0(r2)
 8006154:	8005f181 	jmpi	8005f18 <_fflush_r>
 8006158:	00820074 	movhi	r2,2049
 800615c:	108e1e04 	addi	r2,r2,14456
 8006160:	11000017 	ldw	r4,0(r2)
 8006164:	01420034 	movhi	r5,2048
 8006168:	2957c604 	addi	r5,r5,24344
 800616c:	8006e941 	jmpi	8006e94 <_fwalk_reent>

08006170 <__fp_lock>:
 8006170:	0005883a 	mov	r2,zero
 8006174:	f800283a 	ret

08006178 <__fp_unlock>:
 8006178:	0005883a 	mov	r2,zero
 800617c:	f800283a 	ret

08006180 <_cleanup_r>:
 8006180:	01420074 	movhi	r5,2049
 8006184:	296ba804 	addi	r5,r5,-20832
 8006188:	8006ddc1 	jmpi	8006ddc <_fwalk>

0800618c <__sinit.part.1>:
 800618c:	defff604 	addi	sp,sp,-40
 8006190:	00c20034 	movhi	r3,2048
 8006194:	dfc00915 	stw	ra,36(sp)
 8006198:	df000815 	stw	fp,32(sp)
 800619c:	ddc00715 	stw	r23,28(sp)
 80061a0:	dd800615 	stw	r22,24(sp)
 80061a4:	dd400515 	stw	r21,20(sp)
 80061a8:	dd000415 	stw	r20,16(sp)
 80061ac:	dcc00315 	stw	r19,12(sp)
 80061b0:	dc800215 	stw	r18,8(sp)
 80061b4:	dc400115 	stw	r17,4(sp)
 80061b8:	dc000015 	stw	r16,0(sp)
 80061bc:	18d86004 	addi	r3,r3,24960
 80061c0:	24000117 	ldw	r16,4(r4)
 80061c4:	20c00f15 	stw	r3,60(r4)
 80061c8:	07000044 	movi	fp,1
 80061cc:	00c000c4 	movi	r3,3
 80061d0:	2080bb04 	addi	r2,r4,748
 80061d4:	20c0b915 	stw	r3,740(r4)
 80061d8:	27000e15 	stw	fp,56(r4)
 80061dc:	2080ba15 	stw	r2,744(r4)
 80061e0:	2000b815 	stw	zero,736(r4)
 80061e4:	05c00204 	movi	r23,8
 80061e8:	00800104 	movi	r2,4
 80061ec:	2025883a 	mov	r18,r4
 80061f0:	b80d883a 	mov	r6,r23
 80061f4:	81001704 	addi	r4,r16,92
 80061f8:	000b883a 	mov	r5,zero
 80061fc:	80000015 	stw	zero,0(r16)
 8006200:	80000115 	stw	zero,4(r16)
 8006204:	80000215 	stw	zero,8(r16)
 8006208:	8080030d 	sth	r2,12(r16)
 800620c:	80001915 	stw	zero,100(r16)
 8006210:	8000038d 	sth	zero,14(r16)
 8006214:	80000415 	stw	zero,16(r16)
 8006218:	80000515 	stw	zero,20(r16)
 800621c:	80000615 	stw	zero,24(r16)
 8006220:	8007d080 	call	8007d08 <memset>
 8006224:	05820074 	movhi	r22,2049
 8006228:	94400217 	ldw	r17,8(r18)
 800622c:	05420074 	movhi	r21,2049
 8006230:	05020074 	movhi	r20,2049
 8006234:	04c20074 	movhi	r19,2049
 8006238:	b5a53704 	addi	r22,r22,-27428
 800623c:	ad654e04 	addi	r21,r21,-27336
 8006240:	a5256d04 	addi	r20,r20,-27212
 8006244:	9ce58404 	addi	r19,r19,-27120
 8006248:	85800815 	stw	r22,32(r16)
 800624c:	85400915 	stw	r21,36(r16)
 8006250:	85000a15 	stw	r20,40(r16)
 8006254:	84c00b15 	stw	r19,44(r16)
 8006258:	84000715 	stw	r16,28(r16)
 800625c:	00800284 	movi	r2,10
 8006260:	89001704 	addi	r4,r17,92
 8006264:	b80d883a 	mov	r6,r23
 8006268:	000b883a 	mov	r5,zero
 800626c:	88000015 	stw	zero,0(r17)
 8006270:	88000115 	stw	zero,4(r17)
 8006274:	88000215 	stw	zero,8(r17)
 8006278:	8880030d 	sth	r2,12(r17)
 800627c:	88001915 	stw	zero,100(r17)
 8006280:	8f00038d 	sth	fp,14(r17)
 8006284:	88000415 	stw	zero,16(r17)
 8006288:	88000515 	stw	zero,20(r17)
 800628c:	88000615 	stw	zero,24(r17)
 8006290:	8007d080 	call	8007d08 <memset>
 8006294:	94000317 	ldw	r16,12(r18)
 8006298:	00800484 	movi	r2,18
 800629c:	8c400715 	stw	r17,28(r17)
 80062a0:	8d800815 	stw	r22,32(r17)
 80062a4:	8d400915 	stw	r21,36(r17)
 80062a8:	8d000a15 	stw	r20,40(r17)
 80062ac:	8cc00b15 	stw	r19,44(r17)
 80062b0:	8080030d 	sth	r2,12(r16)
 80062b4:	00800084 	movi	r2,2
 80062b8:	80000015 	stw	zero,0(r16)
 80062bc:	80000115 	stw	zero,4(r16)
 80062c0:	80000215 	stw	zero,8(r16)
 80062c4:	80001915 	stw	zero,100(r16)
 80062c8:	8080038d 	sth	r2,14(r16)
 80062cc:	80000415 	stw	zero,16(r16)
 80062d0:	80000515 	stw	zero,20(r16)
 80062d4:	80000615 	stw	zero,24(r16)
 80062d8:	81001704 	addi	r4,r16,92
 80062dc:	000b883a 	mov	r5,zero
 80062e0:	b80d883a 	mov	r6,r23
 80062e4:	8007d080 	call	8007d08 <memset>
 80062e8:	84000715 	stw	r16,28(r16)
 80062ec:	85800815 	stw	r22,32(r16)
 80062f0:	85400915 	stw	r21,36(r16)
 80062f4:	85000a15 	stw	r20,40(r16)
 80062f8:	84c00b15 	stw	r19,44(r16)
 80062fc:	dfc00917 	ldw	ra,36(sp)
 8006300:	df000817 	ldw	fp,32(sp)
 8006304:	ddc00717 	ldw	r23,28(sp)
 8006308:	dd800617 	ldw	r22,24(sp)
 800630c:	dd400517 	ldw	r21,20(sp)
 8006310:	dd000417 	ldw	r20,16(sp)
 8006314:	dcc00317 	ldw	r19,12(sp)
 8006318:	dc800217 	ldw	r18,8(sp)
 800631c:	dc400117 	ldw	r17,4(sp)
 8006320:	dc000017 	ldw	r16,0(sp)
 8006324:	dec00a04 	addi	sp,sp,40
 8006328:	f800283a 	ret

0800632c <__sfmoreglue>:
 800632c:	defffc04 	addi	sp,sp,-16
 8006330:	dc800215 	stw	r18,8(sp)
 8006334:	2825883a 	mov	r18,r5
 8006338:	dc000015 	stw	r16,0(sp)
 800633c:	01401a04 	movi	r5,104
 8006340:	2021883a 	mov	r16,r4
 8006344:	9009883a 	mov	r4,r18
 8006348:	dfc00315 	stw	ra,12(sp)
 800634c:	dc400115 	stw	r17,4(sp)
 8006350:	800c2ec0 	call	800c2ec <__mulsi3>
 8006354:	8009883a 	mov	r4,r16
 8006358:	11400304 	addi	r5,r2,12
 800635c:	1023883a 	mov	r17,r2
 8006360:	80071e40 	call	80071e4 <_malloc_r>
 8006364:	1021883a 	mov	r16,r2
 8006368:	10000726 	beq	r2,zero,8006388 <__sfmoreglue+0x5c>
 800636c:	11000304 	addi	r4,r2,12
 8006370:	10000015 	stw	zero,0(r2)
 8006374:	14800115 	stw	r18,4(r2)
 8006378:	11000215 	stw	r4,8(r2)
 800637c:	000b883a 	mov	r5,zero
 8006380:	880d883a 	mov	r6,r17
 8006384:	8007d080 	call	8007d08 <memset>
 8006388:	8005883a 	mov	r2,r16
 800638c:	dfc00317 	ldw	ra,12(sp)
 8006390:	dc800217 	ldw	r18,8(sp)
 8006394:	dc400117 	ldw	r17,4(sp)
 8006398:	dc000017 	ldw	r16,0(sp)
 800639c:	dec00404 	addi	sp,sp,16
 80063a0:	f800283a 	ret

080063a4 <__sfp>:
 80063a4:	00820074 	movhi	r2,2049
 80063a8:	defffb04 	addi	sp,sp,-20
 80063ac:	108e1e04 	addi	r2,r2,14456
 80063b0:	dc800215 	stw	r18,8(sp)
 80063b4:	14800017 	ldw	r18,0(r2)
 80063b8:	dcc00315 	stw	r19,12(sp)
 80063bc:	dfc00415 	stw	ra,16(sp)
 80063c0:	90800e17 	ldw	r2,56(r18)
 80063c4:	dc400115 	stw	r17,4(sp)
 80063c8:	dc000015 	stw	r16,0(sp)
 80063cc:	2027883a 	mov	r19,r4
 80063d0:	1000021e 	bne	r2,zero,80063dc <__sfp+0x38>
 80063d4:	9009883a 	mov	r4,r18
 80063d8:	800618c0 	call	800618c <__sinit.part.1>
 80063dc:	9480b804 	addi	r18,r18,736
 80063e0:	047fffc4 	movi	r17,-1
 80063e4:	91400117 	ldw	r5,4(r18)
 80063e8:	94000217 	ldw	r16,8(r18)
 80063ec:	297fffc4 	addi	r5,r5,-1
 80063f0:	28000a16 	blt	r5,zero,800641c <__sfp+0x78>
 80063f4:	8080030f 	ldh	r2,12(r16)
 80063f8:	10000c26 	beq	r2,zero,800642c <__sfp+0x88>
 80063fc:	80c01d04 	addi	r3,r16,116
 8006400:	00000206 	br	800640c <__sfp+0x68>
 8006404:	18bfe60f 	ldh	r2,-104(r3)
 8006408:	10000826 	beq	r2,zero,800642c <__sfp+0x88>
 800640c:	297fffc4 	addi	r5,r5,-1
 8006410:	1c3ffd04 	addi	r16,r3,-12
 8006414:	18c01a04 	addi	r3,r3,104
 8006418:	2c7ffa1e 	bne	r5,r17,8006404 <__alt_data_end+0xfc006404>
 800641c:	90800017 	ldw	r2,0(r18)
 8006420:	10001d26 	beq	r2,zero,8006498 <__sfp+0xf4>
 8006424:	1025883a 	mov	r18,r2
 8006428:	003fee06 	br	80063e4 <__alt_data_end+0xfc0063e4>
 800642c:	00bfffc4 	movi	r2,-1
 8006430:	8080038d 	sth	r2,14(r16)
 8006434:	00800044 	movi	r2,1
 8006438:	8080030d 	sth	r2,12(r16)
 800643c:	80001915 	stw	zero,100(r16)
 8006440:	80000015 	stw	zero,0(r16)
 8006444:	80000215 	stw	zero,8(r16)
 8006448:	80000115 	stw	zero,4(r16)
 800644c:	80000415 	stw	zero,16(r16)
 8006450:	80000515 	stw	zero,20(r16)
 8006454:	80000615 	stw	zero,24(r16)
 8006458:	81001704 	addi	r4,r16,92
 800645c:	000b883a 	mov	r5,zero
 8006460:	01800204 	movi	r6,8
 8006464:	8007d080 	call	8007d08 <memset>
 8006468:	8005883a 	mov	r2,r16
 800646c:	80000c15 	stw	zero,48(r16)
 8006470:	80000d15 	stw	zero,52(r16)
 8006474:	80001115 	stw	zero,68(r16)
 8006478:	80001215 	stw	zero,72(r16)
 800647c:	dfc00417 	ldw	ra,16(sp)
 8006480:	dcc00317 	ldw	r19,12(sp)
 8006484:	dc800217 	ldw	r18,8(sp)
 8006488:	dc400117 	ldw	r17,4(sp)
 800648c:	dc000017 	ldw	r16,0(sp)
 8006490:	dec00504 	addi	sp,sp,20
 8006494:	f800283a 	ret
 8006498:	9809883a 	mov	r4,r19
 800649c:	01400104 	movi	r5,4
 80064a0:	800632c0 	call	800632c <__sfmoreglue>
 80064a4:	90800015 	stw	r2,0(r18)
 80064a8:	103fde1e 	bne	r2,zero,8006424 <__alt_data_end+0xfc006424>
 80064ac:	00800304 	movi	r2,12
 80064b0:	98800015 	stw	r2,0(r19)
 80064b4:	0005883a 	mov	r2,zero
 80064b8:	003ff006 	br	800647c <__alt_data_end+0xfc00647c>

080064bc <_cleanup>:
 80064bc:	00820074 	movhi	r2,2049
 80064c0:	108e1e04 	addi	r2,r2,14456
 80064c4:	11000017 	ldw	r4,0(r2)
 80064c8:	01420074 	movhi	r5,2049
 80064cc:	296ba804 	addi	r5,r5,-20832
 80064d0:	8006ddc1 	jmpi	8006ddc <_fwalk>

080064d4 <__sinit>:
 80064d4:	20800e17 	ldw	r2,56(r4)
 80064d8:	10000126 	beq	r2,zero,80064e0 <__sinit+0xc>
 80064dc:	f800283a 	ret
 80064e0:	800618c1 	jmpi	800618c <__sinit.part.1>

080064e4 <__sfp_lock_acquire>:
 80064e4:	f800283a 	ret

080064e8 <__sfp_lock_release>:
 80064e8:	f800283a 	ret

080064ec <__sinit_lock_acquire>:
 80064ec:	f800283a 	ret

080064f0 <__sinit_lock_release>:
 80064f0:	f800283a 	ret

080064f4 <__fp_lock_all>:
 80064f4:	00820074 	movhi	r2,2049
 80064f8:	108e1f04 	addi	r2,r2,14460
 80064fc:	11000017 	ldw	r4,0(r2)
 8006500:	01420034 	movhi	r5,2048
 8006504:	29585c04 	addi	r5,r5,24944
 8006508:	8006ddc1 	jmpi	8006ddc <_fwalk>

0800650c <__fp_unlock_all>:
 800650c:	00820074 	movhi	r2,2049
 8006510:	108e1f04 	addi	r2,r2,14460
 8006514:	11000017 	ldw	r4,0(r2)
 8006518:	01420034 	movhi	r5,2048
 800651c:	29585e04 	addi	r5,r5,24952
 8006520:	8006ddc1 	jmpi	8006ddc <_fwalk>

08006524 <_malloc_trim_r>:
 8006524:	defffb04 	addi	sp,sp,-20
 8006528:	dcc00315 	stw	r19,12(sp)
 800652c:	04c20074 	movhi	r19,2049
 8006530:	dc800215 	stw	r18,8(sp)
 8006534:	dc400115 	stw	r17,4(sp)
 8006538:	dc000015 	stw	r16,0(sp)
 800653c:	dfc00415 	stw	ra,16(sp)
 8006540:	2821883a 	mov	r16,r5
 8006544:	9cc89a04 	addi	r19,r19,8808
 8006548:	2025883a 	mov	r18,r4
 800654c:	800f0f00 	call	800f0f0 <__malloc_lock>
 8006550:	98800217 	ldw	r2,8(r19)
 8006554:	14400117 	ldw	r17,4(r2)
 8006558:	00bfff04 	movi	r2,-4
 800655c:	88a2703a 	and	r17,r17,r2
 8006560:	8c21c83a 	sub	r16,r17,r16
 8006564:	8403fbc4 	addi	r16,r16,4079
 8006568:	8020d33a 	srli	r16,r16,12
 800656c:	0083ffc4 	movi	r2,4095
 8006570:	843fffc4 	addi	r16,r16,-1
 8006574:	8020933a 	slli	r16,r16,12
 8006578:	1400060e 	bge	r2,r16,8006594 <_malloc_trim_r+0x70>
 800657c:	9009883a 	mov	r4,r18
 8006580:	000b883a 	mov	r5,zero
 8006584:	80094880 	call	8009488 <_sbrk_r>
 8006588:	98c00217 	ldw	r3,8(r19)
 800658c:	1c47883a 	add	r3,r3,r17
 8006590:	10c00a26 	beq	r2,r3,80065bc <_malloc_trim_r+0x98>
 8006594:	9009883a 	mov	r4,r18
 8006598:	800f1100 	call	800f110 <__malloc_unlock>
 800659c:	0005883a 	mov	r2,zero
 80065a0:	dfc00417 	ldw	ra,16(sp)
 80065a4:	dcc00317 	ldw	r19,12(sp)
 80065a8:	dc800217 	ldw	r18,8(sp)
 80065ac:	dc400117 	ldw	r17,4(sp)
 80065b0:	dc000017 	ldw	r16,0(sp)
 80065b4:	dec00504 	addi	sp,sp,20
 80065b8:	f800283a 	ret
 80065bc:	9009883a 	mov	r4,r18
 80065c0:	040bc83a 	sub	r5,zero,r16
 80065c4:	80094880 	call	8009488 <_sbrk_r>
 80065c8:	00ffffc4 	movi	r3,-1
 80065cc:	10c00d26 	beq	r2,r3,8006604 <_malloc_trim_r+0xe0>
 80065d0:	00c20074 	movhi	r3,2049
 80065d4:	18d4f704 	addi	r3,r3,21468
 80065d8:	18800017 	ldw	r2,0(r3)
 80065dc:	99000217 	ldw	r4,8(r19)
 80065e0:	8c23c83a 	sub	r17,r17,r16
 80065e4:	8c400054 	ori	r17,r17,1
 80065e8:	1421c83a 	sub	r16,r2,r16
 80065ec:	24400115 	stw	r17,4(r4)
 80065f0:	9009883a 	mov	r4,r18
 80065f4:	1c000015 	stw	r16,0(r3)
 80065f8:	800f1100 	call	800f110 <__malloc_unlock>
 80065fc:	00800044 	movi	r2,1
 8006600:	003fe706 	br	80065a0 <__alt_data_end+0xfc0065a0>
 8006604:	9009883a 	mov	r4,r18
 8006608:	000b883a 	mov	r5,zero
 800660c:	80094880 	call	8009488 <_sbrk_r>
 8006610:	99000217 	ldw	r4,8(r19)
 8006614:	014003c4 	movi	r5,15
 8006618:	1107c83a 	sub	r3,r2,r4
 800661c:	28ffdd0e 	bge	r5,r3,8006594 <__alt_data_end+0xfc006594>
 8006620:	01420074 	movhi	r5,2049
 8006624:	294e2104 	addi	r5,r5,14468
 8006628:	29400017 	ldw	r5,0(r5)
 800662c:	18c00054 	ori	r3,r3,1
 8006630:	20c00115 	stw	r3,4(r4)
 8006634:	00c20074 	movhi	r3,2049
 8006638:	1145c83a 	sub	r2,r2,r5
 800663c:	18d4f704 	addi	r3,r3,21468
 8006640:	18800015 	stw	r2,0(r3)
 8006644:	003fd306 	br	8006594 <__alt_data_end+0xfc006594>

08006648 <_free_r>:
 8006648:	28004c26 	beq	r5,zero,800677c <_free_r+0x134>
 800664c:	defffd04 	addi	sp,sp,-12
 8006650:	dc400115 	stw	r17,4(sp)
 8006654:	dc000015 	stw	r16,0(sp)
 8006658:	2023883a 	mov	r17,r4
 800665c:	2821883a 	mov	r16,r5
 8006660:	dfc00215 	stw	ra,8(sp)
 8006664:	800f0f00 	call	800f0f0 <__malloc_lock>
 8006668:	813fff17 	ldw	r4,-4(r16)
 800666c:	00bfff84 	movi	r2,-2
 8006670:	02420074 	movhi	r9,2049
 8006674:	81bffe04 	addi	r6,r16,-8
 8006678:	2084703a 	and	r2,r4,r2
 800667c:	4a489a04 	addi	r9,r9,8808
 8006680:	308b883a 	add	r5,r6,r2
 8006684:	2a000117 	ldw	r8,4(r5)
 8006688:	49c00217 	ldw	r7,8(r9)
 800668c:	00ffff04 	movi	r3,-4
 8006690:	40c6703a 	and	r3,r8,r3
 8006694:	39405326 	beq	r7,r5,80067e4 <_free_r+0x19c>
 8006698:	28c00115 	stw	r3,4(r5)
 800669c:	2100004c 	andi	r4,r4,1
 80066a0:	2000091e 	bne	r4,zero,80066c8 <_free_r+0x80>
 80066a4:	81fffe17 	ldw	r7,-8(r16)
 80066a8:	4a000204 	addi	r8,r9,8
 80066ac:	31cdc83a 	sub	r6,r6,r7
 80066b0:	31000217 	ldw	r4,8(r6)
 80066b4:	11c5883a 	add	r2,r2,r7
 80066b8:	22006126 	beq	r4,r8,8006840 <_free_r+0x1f8>
 80066bc:	31c00317 	ldw	r7,12(r6)
 80066c0:	21c00315 	stw	r7,12(r4)
 80066c4:	39000215 	stw	r4,8(r7)
 80066c8:	28c9883a 	add	r4,r5,r3
 80066cc:	21c00117 	ldw	r7,4(r4)
 80066d0:	39c0004c 	andi	r7,r7,1
 80066d4:	38000d1e 	bne	r7,zero,800670c <_free_r+0xc4>
 80066d8:	29000217 	ldw	r4,8(r5)
 80066dc:	10c5883a 	add	r2,r2,r3
 80066e0:	00c20074 	movhi	r3,2049
 80066e4:	18c89c04 	addi	r3,r3,8816
 80066e8:	20c07526 	beq	r4,r3,80068c0 <_free_r+0x278>
 80066ec:	29c00317 	ldw	r7,12(r5)
 80066f0:	11400054 	ori	r5,r2,1
 80066f4:	3087883a 	add	r3,r6,r2
 80066f8:	21c00315 	stw	r7,12(r4)
 80066fc:	39000215 	stw	r4,8(r7)
 8006700:	31400115 	stw	r5,4(r6)
 8006704:	18800015 	stw	r2,0(r3)
 8006708:	00000406 	br	800671c <_free_r+0xd4>
 800670c:	10c00054 	ori	r3,r2,1
 8006710:	30c00115 	stw	r3,4(r6)
 8006714:	3087883a 	add	r3,r6,r2
 8006718:	18800015 	stw	r2,0(r3)
 800671c:	00c07fc4 	movi	r3,511
 8006720:	18801736 	bltu	r3,r2,8006780 <_free_r+0x138>
 8006724:	1004d0fa 	srli	r2,r2,3
 8006728:	01400044 	movi	r5,1
 800672c:	49000117 	ldw	r4,4(r9)
 8006730:	1087883a 	add	r3,r2,r2
 8006734:	18c7883a 	add	r3,r3,r3
 8006738:	1005d0ba 	srai	r2,r2,2
 800673c:	18c7883a 	add	r3,r3,r3
 8006740:	1a47883a 	add	r3,r3,r9
 8006744:	19c00217 	ldw	r7,8(r3)
 8006748:	2884983a 	sll	r2,r5,r2
 800674c:	30c00315 	stw	r3,12(r6)
 8006750:	31c00215 	stw	r7,8(r6)
 8006754:	1104b03a 	or	r2,r2,r4
 8006758:	19800215 	stw	r6,8(r3)
 800675c:	48800115 	stw	r2,4(r9)
 8006760:	39800315 	stw	r6,12(r7)
 8006764:	8809883a 	mov	r4,r17
 8006768:	dfc00217 	ldw	ra,8(sp)
 800676c:	dc400117 	ldw	r17,4(sp)
 8006770:	dc000017 	ldw	r16,0(sp)
 8006774:	dec00304 	addi	sp,sp,12
 8006778:	800f1101 	jmpi	800f110 <__malloc_unlock>
 800677c:	f800283a 	ret
 8006780:	1006d27a 	srli	r3,r2,9
 8006784:	01000104 	movi	r4,4
 8006788:	20c04036 	bltu	r4,r3,800688c <_free_r+0x244>
 800678c:	1006d1ba 	srli	r3,r2,6
 8006790:	19400e04 	addi	r5,r3,56
 8006794:	2947883a 	add	r3,r5,r5
 8006798:	18c7883a 	add	r3,r3,r3
 800679c:	18c7883a 	add	r3,r3,r3
 80067a0:	1a49883a 	add	r4,r3,r9
 80067a4:	20c00217 	ldw	r3,8(r4)
 80067a8:	01c20074 	movhi	r7,2049
 80067ac:	39c89a04 	addi	r7,r7,8808
 80067b0:	19003b26 	beq	r3,r4,80068a0 <_free_r+0x258>
 80067b4:	01ffff04 	movi	r7,-4
 80067b8:	19400117 	ldw	r5,4(r3)
 80067bc:	29ca703a 	and	r5,r5,r7
 80067c0:	1140022e 	bgeu	r2,r5,80067cc <_free_r+0x184>
 80067c4:	18c00217 	ldw	r3,8(r3)
 80067c8:	20fffb1e 	bne	r4,r3,80067b8 <__alt_data_end+0xfc0067b8>
 80067cc:	18800317 	ldw	r2,12(r3)
 80067d0:	30800315 	stw	r2,12(r6)
 80067d4:	30c00215 	stw	r3,8(r6)
 80067d8:	11800215 	stw	r6,8(r2)
 80067dc:	19800315 	stw	r6,12(r3)
 80067e0:	003fe006 	br	8006764 <__alt_data_end+0xfc006764>
 80067e4:	2100004c 	andi	r4,r4,1
 80067e8:	1885883a 	add	r2,r3,r2
 80067ec:	2000071e 	bne	r4,zero,800680c <_free_r+0x1c4>
 80067f0:	817ffe17 	ldw	r5,-8(r16)
 80067f4:	314dc83a 	sub	r6,r6,r5
 80067f8:	30c00317 	ldw	r3,12(r6)
 80067fc:	31000217 	ldw	r4,8(r6)
 8006800:	1145883a 	add	r2,r2,r5
 8006804:	20c00315 	stw	r3,12(r4)
 8006808:	19000215 	stw	r4,8(r3)
 800680c:	10c00054 	ori	r3,r2,1
 8006810:	30c00115 	stw	r3,4(r6)
 8006814:	00c20074 	movhi	r3,2049
 8006818:	18ce2204 	addi	r3,r3,14472
 800681c:	18c00017 	ldw	r3,0(r3)
 8006820:	49800215 	stw	r6,8(r9)
 8006824:	10ffcf36 	bltu	r2,r3,8006764 <__alt_data_end+0xfc006764>
 8006828:	00820074 	movhi	r2,2049
 800682c:	1094ef04 	addi	r2,r2,21436
 8006830:	11400017 	ldw	r5,0(r2)
 8006834:	8809883a 	mov	r4,r17
 8006838:	80065240 	call	8006524 <_malloc_trim_r>
 800683c:	003fc906 	br	8006764 <__alt_data_end+0xfc006764>
 8006840:	28c9883a 	add	r4,r5,r3
 8006844:	21000117 	ldw	r4,4(r4)
 8006848:	2100004c 	andi	r4,r4,1
 800684c:	20000a1e 	bne	r4,zero,8006878 <_free_r+0x230>
 8006850:	29000317 	ldw	r4,12(r5)
 8006854:	29400217 	ldw	r5,8(r5)
 8006858:	10c5883a 	add	r2,r2,r3
 800685c:	10c00054 	ori	r3,r2,1
 8006860:	29000315 	stw	r4,12(r5)
 8006864:	21400215 	stw	r5,8(r4)
 8006868:	30c00115 	stw	r3,4(r6)
 800686c:	308d883a 	add	r6,r6,r2
 8006870:	30800015 	stw	r2,0(r6)
 8006874:	003fbb06 	br	8006764 <__alt_data_end+0xfc006764>
 8006878:	10c00054 	ori	r3,r2,1
 800687c:	30c00115 	stw	r3,4(r6)
 8006880:	308d883a 	add	r6,r6,r2
 8006884:	30800015 	stw	r2,0(r6)
 8006888:	003fb606 	br	8006764 <__alt_data_end+0xfc006764>
 800688c:	01000504 	movi	r4,20
 8006890:	20c01436 	bltu	r4,r3,80068e4 <_free_r+0x29c>
 8006894:	194016c4 	addi	r5,r3,91
 8006898:	2947883a 	add	r3,r5,r5
 800689c:	003fbe06 	br	8006798 <__alt_data_end+0xfc006798>
 80068a0:	280bd0ba 	srai	r5,r5,2
 80068a4:	00800044 	movi	r2,1
 80068a8:	39000117 	ldw	r4,4(r7)
 80068ac:	114a983a 	sll	r5,r2,r5
 80068b0:	1805883a 	mov	r2,r3
 80068b4:	2908b03a 	or	r4,r5,r4
 80068b8:	39000115 	stw	r4,4(r7)
 80068bc:	003fc406 	br	80067d0 <__alt_data_end+0xfc0067d0>
 80068c0:	49800515 	stw	r6,20(r9)
 80068c4:	49800415 	stw	r6,16(r9)
 80068c8:	10c00054 	ori	r3,r2,1
 80068cc:	31000315 	stw	r4,12(r6)
 80068d0:	31000215 	stw	r4,8(r6)
 80068d4:	30c00115 	stw	r3,4(r6)
 80068d8:	308d883a 	add	r6,r6,r2
 80068dc:	30800015 	stw	r2,0(r6)
 80068e0:	003fa006 	br	8006764 <__alt_data_end+0xfc006764>
 80068e4:	01001504 	movi	r4,84
 80068e8:	20c00436 	bltu	r4,r3,80068fc <_free_r+0x2b4>
 80068ec:	1006d33a 	srli	r3,r2,12
 80068f0:	19401b84 	addi	r5,r3,110
 80068f4:	2947883a 	add	r3,r5,r5
 80068f8:	003fa706 	br	8006798 <__alt_data_end+0xfc006798>
 80068fc:	01005504 	movi	r4,340
 8006900:	20c00436 	bltu	r4,r3,8006914 <_free_r+0x2cc>
 8006904:	1006d3fa 	srli	r3,r2,15
 8006908:	19401dc4 	addi	r5,r3,119
 800690c:	2947883a 	add	r3,r5,r5
 8006910:	003fa106 	br	8006798 <__alt_data_end+0xfc006798>
 8006914:	01015504 	movi	r4,1364
 8006918:	20c00436 	bltu	r4,r3,800692c <_free_r+0x2e4>
 800691c:	1006d4ba 	srli	r3,r2,18
 8006920:	19401f04 	addi	r5,r3,124
 8006924:	2947883a 	add	r3,r5,r5
 8006928:	003f9b06 	br	8006798 <__alt_data_end+0xfc006798>
 800692c:	00c03f04 	movi	r3,252
 8006930:	01401f84 	movi	r5,126
 8006934:	003f9806 	br	8006798 <__alt_data_end+0xfc006798>

08006938 <__sfvwrite_r>:
 8006938:	30800217 	ldw	r2,8(r6)
 800693c:	10004526 	beq	r2,zero,8006a54 <__sfvwrite_r+0x11c>
 8006940:	28c0030b 	ldhu	r3,12(r5)
 8006944:	defff404 	addi	sp,sp,-48
 8006948:	dd400715 	stw	r21,28(sp)
 800694c:	dcc00515 	stw	r19,20(sp)
 8006950:	dc000215 	stw	r16,8(sp)
 8006954:	dfc00b15 	stw	ra,44(sp)
 8006958:	df000a15 	stw	fp,40(sp)
 800695c:	ddc00915 	stw	r23,36(sp)
 8006960:	dd800815 	stw	r22,32(sp)
 8006964:	dd000615 	stw	r20,24(sp)
 8006968:	dc800415 	stw	r18,16(sp)
 800696c:	dc400315 	stw	r17,12(sp)
 8006970:	1880020c 	andi	r2,r3,8
 8006974:	2821883a 	mov	r16,r5
 8006978:	202b883a 	mov	r21,r4
 800697c:	3027883a 	mov	r19,r6
 8006980:	10002526 	beq	r2,zero,8006a18 <__sfvwrite_r+0xe0>
 8006984:	28800417 	ldw	r2,16(r5)
 8006988:	10002326 	beq	r2,zero,8006a18 <__sfvwrite_r+0xe0>
 800698c:	1880008c 	andi	r2,r3,2
 8006990:	9c400017 	ldw	r17,0(r19)
 8006994:	10003126 	beq	r2,zero,8006a5c <__sfvwrite_r+0x124>
 8006998:	0029883a 	mov	r20,zero
 800699c:	0025883a 	mov	r18,zero
 80069a0:	05810004 	movi	r22,1024
 80069a4:	a00d883a 	mov	r6,r20
 80069a8:	a809883a 	mov	r4,r21
 80069ac:	90002526 	beq	r18,zero,8006a44 <__sfvwrite_r+0x10c>
 80069b0:	900f883a 	mov	r7,r18
 80069b4:	81400717 	ldw	r5,28(r16)
 80069b8:	b480012e 	bgeu	r22,r18,80069c0 <__sfvwrite_r+0x88>
 80069bc:	01c10004 	movi	r7,1024
 80069c0:	80800917 	ldw	r2,36(r16)
 80069c4:	103ee83a 	callr	r2
 80069c8:	0080510e 	bge	zero,r2,8006b10 <__sfvwrite_r+0x1d8>
 80069cc:	98c00217 	ldw	r3,8(r19)
 80069d0:	a0a9883a 	add	r20,r20,r2
 80069d4:	90a5c83a 	sub	r18,r18,r2
 80069d8:	1885c83a 	sub	r2,r3,r2
 80069dc:	98800215 	stw	r2,8(r19)
 80069e0:	103ff01e 	bne	r2,zero,80069a4 <__alt_data_end+0xfc0069a4>
 80069e4:	0005883a 	mov	r2,zero
 80069e8:	dfc00b17 	ldw	ra,44(sp)
 80069ec:	df000a17 	ldw	fp,40(sp)
 80069f0:	ddc00917 	ldw	r23,36(sp)
 80069f4:	dd800817 	ldw	r22,32(sp)
 80069f8:	dd400717 	ldw	r21,28(sp)
 80069fc:	dd000617 	ldw	r20,24(sp)
 8006a00:	dcc00517 	ldw	r19,20(sp)
 8006a04:	dc800417 	ldw	r18,16(sp)
 8006a08:	dc400317 	ldw	r17,12(sp)
 8006a0c:	dc000217 	ldw	r16,8(sp)
 8006a10:	dec00c04 	addi	sp,sp,48
 8006a14:	f800283a 	ret
 8006a18:	a809883a 	mov	r4,r21
 8006a1c:	800b883a 	mov	r5,r16
 8006a20:	80044980 	call	8004498 <__swsetup_r>
 8006a24:	80c0030b 	ldhu	r3,12(r16)
 8006a28:	103fd826 	beq	r2,zero,800698c <__alt_data_end+0xfc00698c>
 8006a2c:	18c01014 	ori	r3,r3,64
 8006a30:	80c0030d 	sth	r3,12(r16)
 8006a34:	00c00244 	movi	r3,9
 8006a38:	00bfffc4 	movi	r2,-1
 8006a3c:	a8c00015 	stw	r3,0(r21)
 8006a40:	003fe906 	br	80069e8 <__alt_data_end+0xfc0069e8>
 8006a44:	8d000017 	ldw	r20,0(r17)
 8006a48:	8c800117 	ldw	r18,4(r17)
 8006a4c:	8c400204 	addi	r17,r17,8
 8006a50:	003fd406 	br	80069a4 <__alt_data_end+0xfc0069a4>
 8006a54:	0005883a 	mov	r2,zero
 8006a58:	f800283a 	ret
 8006a5c:	1880004c 	andi	r2,r3,1
 8006a60:	1000301e 	bne	r2,zero,8006b24 <__sfvwrite_r+0x1ec>
 8006a64:	002f883a 	mov	r23,zero
 8006a68:	0025883a 	mov	r18,zero
 8006a6c:	90001c26 	beq	r18,zero,8006ae0 <__sfvwrite_r+0x1a8>
 8006a70:	1880800c 	andi	r2,r3,512
 8006a74:	85000217 	ldw	r20,8(r16)
 8006a78:	10006c26 	beq	r2,zero,8006c2c <__sfvwrite_r+0x2f4>
 8006a7c:	a02d883a 	mov	r22,r20
 8006a80:	95008536 	bltu	r18,r20,8006c98 <__sfvwrite_r+0x360>
 8006a84:	1881200c 	andi	r2,r3,1152
 8006a88:	10009d1e 	bne	r2,zero,8006d00 <__sfvwrite_r+0x3c8>
 8006a8c:	81000017 	ldw	r4,0(r16)
 8006a90:	a039883a 	mov	fp,r20
 8006a94:	9029883a 	mov	r20,r18
 8006a98:	b80b883a 	mov	r5,r23
 8006a9c:	b00d883a 	mov	r6,r22
 8006aa0:	8007bac0 	call	8007bac <memmove>
 8006aa4:	80c00217 	ldw	r3,8(r16)
 8006aa8:	81000017 	ldw	r4,0(r16)
 8006aac:	9005883a 	mov	r2,r18
 8006ab0:	1f39c83a 	sub	fp,r3,fp
 8006ab4:	258f883a 	add	r7,r4,r22
 8006ab8:	87000215 	stw	fp,8(r16)
 8006abc:	81c00015 	stw	r7,0(r16)
 8006ac0:	98c00217 	ldw	r3,8(r19)
 8006ac4:	b8af883a 	add	r23,r23,r2
 8006ac8:	90a5c83a 	sub	r18,r18,r2
 8006acc:	1d05c83a 	sub	r2,r3,r20
 8006ad0:	98800215 	stw	r2,8(r19)
 8006ad4:	103fc326 	beq	r2,zero,80069e4 <__alt_data_end+0xfc0069e4>
 8006ad8:	80c0030b 	ldhu	r3,12(r16)
 8006adc:	903fe41e 	bne	r18,zero,8006a70 <__alt_data_end+0xfc006a70>
 8006ae0:	8dc00017 	ldw	r23,0(r17)
 8006ae4:	8c800117 	ldw	r18,4(r17)
 8006ae8:	8c400204 	addi	r17,r17,8
 8006aec:	003fdf06 	br	8006a6c <__alt_data_end+0xfc006a6c>
 8006af0:	8008e740 	call	8008e74 <_realloc_r>
 8006af4:	102d883a 	mov	r22,r2
 8006af8:	1000a01e 	bne	r2,zero,8006d7c <__sfvwrite_r+0x444>
 8006afc:	81400417 	ldw	r5,16(r16)
 8006b00:	a809883a 	mov	r4,r21
 8006b04:	80066480 	call	8006648 <_free_r>
 8006b08:	00800304 	movi	r2,12
 8006b0c:	a8800015 	stw	r2,0(r21)
 8006b10:	80c0030b 	ldhu	r3,12(r16)
 8006b14:	00bfffc4 	movi	r2,-1
 8006b18:	18c01014 	ori	r3,r3,64
 8006b1c:	80c0030d 	sth	r3,12(r16)
 8006b20:	003fb106 	br	80069e8 <__alt_data_end+0xfc0069e8>
 8006b24:	0029883a 	mov	r20,zero
 8006b28:	0011883a 	mov	r8,zero
 8006b2c:	0039883a 	mov	fp,zero
 8006b30:	0025883a 	mov	r18,zero
 8006b34:	90001f26 	beq	r18,zero,8006bb4 <__sfvwrite_r+0x27c>
 8006b38:	40006826 	beq	r8,zero,8006cdc <__sfvwrite_r+0x3a4>
 8006b3c:	a02f883a 	mov	r23,r20
 8006b40:	9500012e 	bgeu	r18,r20,8006b48 <__sfvwrite_r+0x210>
 8006b44:	902f883a 	mov	r23,r18
 8006b48:	81000017 	ldw	r4,0(r16)
 8006b4c:	80800417 	ldw	r2,16(r16)
 8006b50:	b82d883a 	mov	r22,r23
 8006b54:	81800217 	ldw	r6,8(r16)
 8006b58:	81c00517 	ldw	r7,20(r16)
 8006b5c:	1100022e 	bgeu	r2,r4,8006b68 <__sfvwrite_r+0x230>
 8006b60:	31c7883a 	add	r3,r6,r7
 8006b64:	1dc01816 	blt	r3,r23,8006bc8 <__sfvwrite_r+0x290>
 8006b68:	b9c03f16 	blt	r23,r7,8006c68 <__sfvwrite_r+0x330>
 8006b6c:	80800917 	ldw	r2,36(r16)
 8006b70:	81400717 	ldw	r5,28(r16)
 8006b74:	a809883a 	mov	r4,r21
 8006b78:	da000115 	stw	r8,4(sp)
 8006b7c:	e00d883a 	mov	r6,fp
 8006b80:	103ee83a 	callr	r2
 8006b84:	102d883a 	mov	r22,r2
 8006b88:	da000117 	ldw	r8,4(sp)
 8006b8c:	00bfe00e 	bge	zero,r2,8006b10 <__alt_data_end+0xfc006b10>
 8006b90:	a5a9c83a 	sub	r20,r20,r22
 8006b94:	a0001f26 	beq	r20,zero,8006c14 <__sfvwrite_r+0x2dc>
 8006b98:	98800217 	ldw	r2,8(r19)
 8006b9c:	e5b9883a 	add	fp,fp,r22
 8006ba0:	95a5c83a 	sub	r18,r18,r22
 8006ba4:	15adc83a 	sub	r22,r2,r22
 8006ba8:	9d800215 	stw	r22,8(r19)
 8006bac:	b03f8d26 	beq	r22,zero,80069e4 <__alt_data_end+0xfc0069e4>
 8006bb0:	903fe11e 	bne	r18,zero,8006b38 <__alt_data_end+0xfc006b38>
 8006bb4:	8f000017 	ldw	fp,0(r17)
 8006bb8:	8c800117 	ldw	r18,4(r17)
 8006bbc:	0011883a 	mov	r8,zero
 8006bc0:	8c400204 	addi	r17,r17,8
 8006bc4:	003fdb06 	br	8006b34 <__alt_data_end+0xfc006b34>
 8006bc8:	180d883a 	mov	r6,r3
 8006bcc:	e00b883a 	mov	r5,fp
 8006bd0:	da000115 	stw	r8,4(sp)
 8006bd4:	d8c00015 	stw	r3,0(sp)
 8006bd8:	8007bac0 	call	8007bac <memmove>
 8006bdc:	d8c00017 	ldw	r3,0(sp)
 8006be0:	80800017 	ldw	r2,0(r16)
 8006be4:	a809883a 	mov	r4,r21
 8006be8:	800b883a 	mov	r5,r16
 8006bec:	10c5883a 	add	r2,r2,r3
 8006bf0:	80800015 	stw	r2,0(r16)
 8006bf4:	d8c00015 	stw	r3,0(sp)
 8006bf8:	8005f180 	call	8005f18 <_fflush_r>
 8006bfc:	d8c00017 	ldw	r3,0(sp)
 8006c00:	da000117 	ldw	r8,4(sp)
 8006c04:	103fc21e 	bne	r2,zero,8006b10 <__alt_data_end+0xfc006b10>
 8006c08:	182d883a 	mov	r22,r3
 8006c0c:	a5a9c83a 	sub	r20,r20,r22
 8006c10:	a03fe11e 	bne	r20,zero,8006b98 <__alt_data_end+0xfc006b98>
 8006c14:	a809883a 	mov	r4,r21
 8006c18:	800b883a 	mov	r5,r16
 8006c1c:	8005f180 	call	8005f18 <_fflush_r>
 8006c20:	103fbb1e 	bne	r2,zero,8006b10 <__alt_data_end+0xfc006b10>
 8006c24:	0011883a 	mov	r8,zero
 8006c28:	003fdb06 	br	8006b98 <__alt_data_end+0xfc006b98>
 8006c2c:	81000017 	ldw	r4,0(r16)
 8006c30:	80800417 	ldw	r2,16(r16)
 8006c34:	1100012e 	bgeu	r2,r4,8006c3c <__sfvwrite_r+0x304>
 8006c38:	a4805a36 	bltu	r20,r18,8006da4 <__sfvwrite_r+0x46c>
 8006c3c:	81c00517 	ldw	r7,20(r16)
 8006c40:	91c01a36 	bltu	r18,r7,8006cac <__sfvwrite_r+0x374>
 8006c44:	80800917 	ldw	r2,36(r16)
 8006c48:	81400717 	ldw	r5,28(r16)
 8006c4c:	a809883a 	mov	r4,r21
 8006c50:	b80d883a 	mov	r6,r23
 8006c54:	103ee83a 	callr	r2
 8006c58:	1029883a 	mov	r20,r2
 8006c5c:	00bfac0e 	bge	zero,r2,8006b10 <__alt_data_end+0xfc006b10>
 8006c60:	a005883a 	mov	r2,r20
 8006c64:	003f9606 	br	8006ac0 <__alt_data_end+0xfc006ac0>
 8006c68:	b80d883a 	mov	r6,r23
 8006c6c:	e00b883a 	mov	r5,fp
 8006c70:	da000115 	stw	r8,4(sp)
 8006c74:	8007bac0 	call	8007bac <memmove>
 8006c78:	80800217 	ldw	r2,8(r16)
 8006c7c:	80c00017 	ldw	r3,0(r16)
 8006c80:	da000117 	ldw	r8,4(sp)
 8006c84:	15c5c83a 	sub	r2,r2,r23
 8006c88:	1def883a 	add	r23,r3,r23
 8006c8c:	80800215 	stw	r2,8(r16)
 8006c90:	85c00015 	stw	r23,0(r16)
 8006c94:	003fbe06 	br	8006b90 <__alt_data_end+0xfc006b90>
 8006c98:	81000017 	ldw	r4,0(r16)
 8006c9c:	9039883a 	mov	fp,r18
 8006ca0:	9029883a 	mov	r20,r18
 8006ca4:	902d883a 	mov	r22,r18
 8006ca8:	003f7b06 	br	8006a98 <__alt_data_end+0xfc006a98>
 8006cac:	b80b883a 	mov	r5,r23
 8006cb0:	900d883a 	mov	r6,r18
 8006cb4:	8007bac0 	call	8007bac <memmove>
 8006cb8:	80c00217 	ldw	r3,8(r16)
 8006cbc:	80800017 	ldw	r2,0(r16)
 8006cc0:	9029883a 	mov	r20,r18
 8006cc4:	1c87c83a 	sub	r3,r3,r18
 8006cc8:	1485883a 	add	r2,r2,r18
 8006ccc:	80800015 	stw	r2,0(r16)
 8006cd0:	80c00215 	stw	r3,8(r16)
 8006cd4:	9005883a 	mov	r2,r18
 8006cd8:	003f7906 	br	8006ac0 <__alt_data_end+0xfc006ac0>
 8006cdc:	e009883a 	mov	r4,fp
 8006ce0:	01400284 	movi	r5,10
 8006ce4:	900d883a 	mov	r6,r18
 8006ce8:	800798c0 	call	800798c <memchr>
 8006cec:	10003826 	beq	r2,zero,8006dd0 <__sfvwrite_r+0x498>
 8006cf0:	10800044 	addi	r2,r2,1
 8006cf4:	1729c83a 	sub	r20,r2,fp
 8006cf8:	02000044 	movi	r8,1
 8006cfc:	003f8f06 	br	8006b3c <__alt_data_end+0xfc006b3c>
 8006d00:	80800517 	ldw	r2,20(r16)
 8006d04:	81400417 	ldw	r5,16(r16)
 8006d08:	87000017 	ldw	fp,0(r16)
 8006d0c:	10a9883a 	add	r20,r2,r2
 8006d10:	a085883a 	add	r2,r20,r2
 8006d14:	1028d7fa 	srli	r20,r2,31
 8006d18:	e179c83a 	sub	fp,fp,r5
 8006d1c:	e1000044 	addi	r4,fp,1
 8006d20:	a085883a 	add	r2,r20,r2
 8006d24:	1029d07a 	srai	r20,r2,1
 8006d28:	2485883a 	add	r2,r4,r18
 8006d2c:	a00d883a 	mov	r6,r20
 8006d30:	a080022e 	bgeu	r20,r2,8006d3c <__sfvwrite_r+0x404>
 8006d34:	1029883a 	mov	r20,r2
 8006d38:	100d883a 	mov	r6,r2
 8006d3c:	18c1000c 	andi	r3,r3,1024
 8006d40:	a809883a 	mov	r4,r21
 8006d44:	183f6a26 	beq	r3,zero,8006af0 <__alt_data_end+0xfc006af0>
 8006d48:	300b883a 	mov	r5,r6
 8006d4c:	80071e40 	call	80071e4 <_malloc_r>
 8006d50:	102d883a 	mov	r22,r2
 8006d54:	103f6c26 	beq	r2,zero,8006b08 <__alt_data_end+0xfc006b08>
 8006d58:	81400417 	ldw	r5,16(r16)
 8006d5c:	1009883a 	mov	r4,r2
 8006d60:	e00d883a 	mov	r6,fp
 8006d64:	8007a740 	call	8007a74 <memcpy>
 8006d68:	8080030b 	ldhu	r2,12(r16)
 8006d6c:	00fedfc4 	movi	r3,-1153
 8006d70:	10c4703a 	and	r2,r2,r3
 8006d74:	10802014 	ori	r2,r2,128
 8006d78:	8080030d 	sth	r2,12(r16)
 8006d7c:	b709883a 	add	r4,r22,fp
 8006d80:	a707c83a 	sub	r3,r20,fp
 8006d84:	85800415 	stw	r22,16(r16)
 8006d88:	85000515 	stw	r20,20(r16)
 8006d8c:	81000015 	stw	r4,0(r16)
 8006d90:	9039883a 	mov	fp,r18
 8006d94:	80c00215 	stw	r3,8(r16)
 8006d98:	9029883a 	mov	r20,r18
 8006d9c:	902d883a 	mov	r22,r18
 8006da0:	003f3d06 	br	8006a98 <__alt_data_end+0xfc006a98>
 8006da4:	b80b883a 	mov	r5,r23
 8006da8:	a00d883a 	mov	r6,r20
 8006dac:	8007bac0 	call	8007bac <memmove>
 8006db0:	80800017 	ldw	r2,0(r16)
 8006db4:	a809883a 	mov	r4,r21
 8006db8:	800b883a 	mov	r5,r16
 8006dbc:	1505883a 	add	r2,r2,r20
 8006dc0:	80800015 	stw	r2,0(r16)
 8006dc4:	8005f180 	call	8005f18 <_fflush_r>
 8006dc8:	103fa526 	beq	r2,zero,8006c60 <__alt_data_end+0xfc006c60>
 8006dcc:	003f5006 	br	8006b10 <__alt_data_end+0xfc006b10>
 8006dd0:	95000044 	addi	r20,r18,1
 8006dd4:	02000044 	movi	r8,1
 8006dd8:	003f5806 	br	8006b3c <__alt_data_end+0xfc006b3c>

08006ddc <_fwalk>:
 8006ddc:	defff804 	addi	sp,sp,-32
 8006de0:	dd400515 	stw	r21,20(sp)
 8006de4:	2540b804 	addi	r21,r4,736
 8006de8:	dd800615 	stw	r22,24(sp)
 8006dec:	dd000415 	stw	r20,16(sp)
 8006df0:	dfc00715 	stw	ra,28(sp)
 8006df4:	dcc00315 	stw	r19,12(sp)
 8006df8:	dc800215 	stw	r18,8(sp)
 8006dfc:	dc400115 	stw	r17,4(sp)
 8006e00:	dc000015 	stw	r16,0(sp)
 8006e04:	2829883a 	mov	r20,r5
 8006e08:	002d883a 	mov	r22,zero
 8006e0c:	80064e40 	call	80064e4 <__sfp_lock_acquire>
 8006e10:	a8001426 	beq	r21,zero,8006e64 <_fwalk+0x88>
 8006e14:	04ffffc4 	movi	r19,-1
 8006e18:	ac400117 	ldw	r17,4(r21)
 8006e1c:	ac800217 	ldw	r18,8(r21)
 8006e20:	8c7fffc4 	addi	r17,r17,-1
 8006e24:	88000d16 	blt	r17,zero,8006e5c <_fwalk+0x80>
 8006e28:	94000304 	addi	r16,r18,12
 8006e2c:	94800384 	addi	r18,r18,14
 8006e30:	80c0000f 	ldh	r3,0(r16)
 8006e34:	8c7fffc4 	addi	r17,r17,-1
 8006e38:	813ffd04 	addi	r4,r16,-12
 8006e3c:	18000426 	beq	r3,zero,8006e50 <_fwalk+0x74>
 8006e40:	90c0000f 	ldh	r3,0(r18)
 8006e44:	1cc00226 	beq	r3,r19,8006e50 <_fwalk+0x74>
 8006e48:	a03ee83a 	callr	r20
 8006e4c:	b0acb03a 	or	r22,r22,r2
 8006e50:	84001a04 	addi	r16,r16,104
 8006e54:	94801a04 	addi	r18,r18,104
 8006e58:	8cfff51e 	bne	r17,r19,8006e30 <__alt_data_end+0xfc006e30>
 8006e5c:	ad400017 	ldw	r21,0(r21)
 8006e60:	a83fed1e 	bne	r21,zero,8006e18 <__alt_data_end+0xfc006e18>
 8006e64:	80064e80 	call	80064e8 <__sfp_lock_release>
 8006e68:	b005883a 	mov	r2,r22
 8006e6c:	dfc00717 	ldw	ra,28(sp)
 8006e70:	dd800617 	ldw	r22,24(sp)
 8006e74:	dd400517 	ldw	r21,20(sp)
 8006e78:	dd000417 	ldw	r20,16(sp)
 8006e7c:	dcc00317 	ldw	r19,12(sp)
 8006e80:	dc800217 	ldw	r18,8(sp)
 8006e84:	dc400117 	ldw	r17,4(sp)
 8006e88:	dc000017 	ldw	r16,0(sp)
 8006e8c:	dec00804 	addi	sp,sp,32
 8006e90:	f800283a 	ret

08006e94 <_fwalk_reent>:
 8006e94:	defff804 	addi	sp,sp,-32
 8006e98:	dd400515 	stw	r21,20(sp)
 8006e9c:	2540b804 	addi	r21,r4,736
 8006ea0:	dd800615 	stw	r22,24(sp)
 8006ea4:	dd000415 	stw	r20,16(sp)
 8006ea8:	dcc00315 	stw	r19,12(sp)
 8006eac:	dfc00715 	stw	ra,28(sp)
 8006eb0:	dc800215 	stw	r18,8(sp)
 8006eb4:	dc400115 	stw	r17,4(sp)
 8006eb8:	dc000015 	stw	r16,0(sp)
 8006ebc:	2027883a 	mov	r19,r4
 8006ec0:	2829883a 	mov	r20,r5
 8006ec4:	002d883a 	mov	r22,zero
 8006ec8:	80064e40 	call	80064e4 <__sfp_lock_acquire>
 8006ecc:	a8001326 	beq	r21,zero,8006f1c <_fwalk_reent+0x88>
 8006ed0:	04bfffc4 	movi	r18,-1
 8006ed4:	ac400117 	ldw	r17,4(r21)
 8006ed8:	ac000217 	ldw	r16,8(r21)
 8006edc:	8c7fffc4 	addi	r17,r17,-1
 8006ee0:	88000c16 	blt	r17,zero,8006f14 <_fwalk_reent+0x80>
 8006ee4:	84000304 	addi	r16,r16,12
 8006ee8:	80c0000f 	ldh	r3,0(r16)
 8006eec:	8c7fffc4 	addi	r17,r17,-1
 8006ef0:	817ffd04 	addi	r5,r16,-12
 8006ef4:	18000526 	beq	r3,zero,8006f0c <_fwalk_reent+0x78>
 8006ef8:	80c0008f 	ldh	r3,2(r16)
 8006efc:	9809883a 	mov	r4,r19
 8006f00:	1c800226 	beq	r3,r18,8006f0c <_fwalk_reent+0x78>
 8006f04:	a03ee83a 	callr	r20
 8006f08:	b0acb03a 	or	r22,r22,r2
 8006f0c:	84001a04 	addi	r16,r16,104
 8006f10:	8cbff51e 	bne	r17,r18,8006ee8 <__alt_data_end+0xfc006ee8>
 8006f14:	ad400017 	ldw	r21,0(r21)
 8006f18:	a83fee1e 	bne	r21,zero,8006ed4 <__alt_data_end+0xfc006ed4>
 8006f1c:	80064e80 	call	80064e8 <__sfp_lock_release>
 8006f20:	b005883a 	mov	r2,r22
 8006f24:	dfc00717 	ldw	ra,28(sp)
 8006f28:	dd800617 	ldw	r22,24(sp)
 8006f2c:	dd400517 	ldw	r21,20(sp)
 8006f30:	dd000417 	ldw	r20,16(sp)
 8006f34:	dcc00317 	ldw	r19,12(sp)
 8006f38:	dc800217 	ldw	r18,8(sp)
 8006f3c:	dc400117 	ldw	r17,4(sp)
 8006f40:	dc000017 	ldw	r16,0(sp)
 8006f44:	dec00804 	addi	sp,sp,32
 8006f48:	f800283a 	ret

08006f4c <_setlocale_r>:
 8006f4c:	30001b26 	beq	r6,zero,8006fbc <_setlocale_r+0x70>
 8006f50:	01420074 	movhi	r5,2049
 8006f54:	defffe04 	addi	sp,sp,-8
 8006f58:	2946d204 	addi	r5,r5,6984
 8006f5c:	3009883a 	mov	r4,r6
 8006f60:	dc000015 	stw	r16,0(sp)
 8006f64:	dfc00115 	stw	ra,4(sp)
 8006f68:	3021883a 	mov	r16,r6
 8006f6c:	80096180 	call	8009618 <strcmp>
 8006f70:	1000061e 	bne	r2,zero,8006f8c <_setlocale_r+0x40>
 8006f74:	00820074 	movhi	r2,2049
 8006f78:	1086d104 	addi	r2,r2,6980
 8006f7c:	dfc00117 	ldw	ra,4(sp)
 8006f80:	dc000017 	ldw	r16,0(sp)
 8006f84:	dec00204 	addi	sp,sp,8
 8006f88:	f800283a 	ret
 8006f8c:	01420074 	movhi	r5,2049
 8006f90:	2946d104 	addi	r5,r5,6980
 8006f94:	8009883a 	mov	r4,r16
 8006f98:	80096180 	call	8009618 <strcmp>
 8006f9c:	103ff526 	beq	r2,zero,8006f74 <__alt_data_end+0xfc006f74>
 8006fa0:	01420074 	movhi	r5,2049
 8006fa4:	2946bc04 	addi	r5,r5,6896
 8006fa8:	8009883a 	mov	r4,r16
 8006fac:	80096180 	call	8009618 <strcmp>
 8006fb0:	103ff026 	beq	r2,zero,8006f74 <__alt_data_end+0xfc006f74>
 8006fb4:	0005883a 	mov	r2,zero
 8006fb8:	003ff006 	br	8006f7c <__alt_data_end+0xfc006f7c>
 8006fbc:	00820074 	movhi	r2,2049
 8006fc0:	1086d104 	addi	r2,r2,6980
 8006fc4:	f800283a 	ret

08006fc8 <__locale_charset>:
 8006fc8:	00820074 	movhi	r2,2049
 8006fcc:	10888404 	addi	r2,r2,8720
 8006fd0:	f800283a 	ret

08006fd4 <__locale_mb_cur_max>:
 8006fd4:	00820074 	movhi	r2,2049
 8006fd8:	108e2004 	addi	r2,r2,14464
 8006fdc:	10800017 	ldw	r2,0(r2)
 8006fe0:	f800283a 	ret

08006fe4 <__locale_msgcharset>:
 8006fe4:	00820074 	movhi	r2,2049
 8006fe8:	10887c04 	addi	r2,r2,8688
 8006fec:	f800283a 	ret

08006ff0 <__locale_cjk_lang>:
 8006ff0:	0005883a 	mov	r2,zero
 8006ff4:	f800283a 	ret

08006ff8 <_localeconv_r>:
 8006ff8:	00820074 	movhi	r2,2049
 8006ffc:	10888c04 	addi	r2,r2,8752
 8007000:	f800283a 	ret

08007004 <setlocale>:
 8007004:	00c20074 	movhi	r3,2049
 8007008:	18ce1f04 	addi	r3,r3,14460
 800700c:	2005883a 	mov	r2,r4
 8007010:	19000017 	ldw	r4,0(r3)
 8007014:	280d883a 	mov	r6,r5
 8007018:	100b883a 	mov	r5,r2
 800701c:	8006f4c1 	jmpi	8006f4c <_setlocale_r>

08007020 <localeconv>:
 8007020:	00820074 	movhi	r2,2049
 8007024:	10888c04 	addi	r2,r2,8752
 8007028:	f800283a 	ret

0800702c <__smakebuf_r>:
 800702c:	2880030b 	ldhu	r2,12(r5)
 8007030:	10c0008c 	andi	r3,r2,2
 8007034:	1800401e 	bne	r3,zero,8007138 <__smakebuf_r+0x10c>
 8007038:	deffec04 	addi	sp,sp,-80
 800703c:	dc000f15 	stw	r16,60(sp)
 8007040:	2821883a 	mov	r16,r5
 8007044:	2940038f 	ldh	r5,14(r5)
 8007048:	dc401015 	stw	r17,64(sp)
 800704c:	dfc01315 	stw	ra,76(sp)
 8007050:	dcc01215 	stw	r19,72(sp)
 8007054:	dc801115 	stw	r18,68(sp)
 8007058:	2023883a 	mov	r17,r4
 800705c:	28001b16 	blt	r5,zero,80070cc <__smakebuf_r+0xa0>
 8007060:	d80d883a 	mov	r6,sp
 8007064:	800b0900 	call	800b090 <_fstat_r>
 8007068:	10001716 	blt	r2,zero,80070c8 <__smakebuf_r+0x9c>
 800706c:	d8800117 	ldw	r2,4(sp)
 8007070:	00e00014 	movui	r3,32768
 8007074:	10bc000c 	andi	r2,r2,61440
 8007078:	10c03726 	beq	r2,r3,8007158 <__smakebuf_r+0x12c>
 800707c:	80c0030b 	ldhu	r3,12(r16)
 8007080:	18c20014 	ori	r3,r3,2048
 8007084:	80c0030d 	sth	r3,12(r16)
 8007088:	00c80004 	movi	r3,8192
 800708c:	10c03c1e 	bne	r2,r3,8007180 <__smakebuf_r+0x154>
 8007090:	8140038f 	ldh	r5,14(r16)
 8007094:	8809883a 	mov	r4,r17
 8007098:	800b0e80 	call	800b0e8 <_isatty_r>
 800709c:	10004e26 	beq	r2,zero,80071d8 <__smakebuf_r+0x1ac>
 80070a0:	8080030b 	ldhu	r2,12(r16)
 80070a4:	04c00044 	movi	r19,1
 80070a8:	80c010c4 	addi	r3,r16,67
 80070ac:	14c4b03a 	or	r2,r2,r19
 80070b0:	8080030d 	sth	r2,12(r16)
 80070b4:	80c00015 	stw	r3,0(r16)
 80070b8:	80c00415 	stw	r3,16(r16)
 80070bc:	84c00515 	stw	r19,20(r16)
 80070c0:	04810004 	movi	r18,1024
 80070c4:	00000706 	br	80070e4 <__smakebuf_r+0xb8>
 80070c8:	8080030b 	ldhu	r2,12(r16)
 80070cc:	10c0200c 	andi	r3,r2,128
 80070d0:	18001f1e 	bne	r3,zero,8007150 <__smakebuf_r+0x124>
 80070d4:	04810004 	movi	r18,1024
 80070d8:	10820014 	ori	r2,r2,2048
 80070dc:	8080030d 	sth	r2,12(r16)
 80070e0:	0027883a 	mov	r19,zero
 80070e4:	8809883a 	mov	r4,r17
 80070e8:	900b883a 	mov	r5,r18
 80070ec:	80071e40 	call	80071e4 <_malloc_r>
 80070f0:	10002e26 	beq	r2,zero,80071ac <__smakebuf_r+0x180>
 80070f4:	80c0030b 	ldhu	r3,12(r16)
 80070f8:	01020034 	movhi	r4,2048
 80070fc:	21186004 	addi	r4,r4,24960
 8007100:	89000f15 	stw	r4,60(r17)
 8007104:	18c02014 	ori	r3,r3,128
 8007108:	80c0030d 	sth	r3,12(r16)
 800710c:	80800015 	stw	r2,0(r16)
 8007110:	80800415 	stw	r2,16(r16)
 8007114:	84800515 	stw	r18,20(r16)
 8007118:	98001c1e 	bne	r19,zero,800718c <__smakebuf_r+0x160>
 800711c:	dfc01317 	ldw	ra,76(sp)
 8007120:	dcc01217 	ldw	r19,72(sp)
 8007124:	dc801117 	ldw	r18,68(sp)
 8007128:	dc401017 	ldw	r17,64(sp)
 800712c:	dc000f17 	ldw	r16,60(sp)
 8007130:	dec01404 	addi	sp,sp,80
 8007134:	f800283a 	ret
 8007138:	288010c4 	addi	r2,r5,67
 800713c:	28800015 	stw	r2,0(r5)
 8007140:	28800415 	stw	r2,16(r5)
 8007144:	00800044 	movi	r2,1
 8007148:	28800515 	stw	r2,20(r5)
 800714c:	f800283a 	ret
 8007150:	04801004 	movi	r18,64
 8007154:	003fe006 	br	80070d8 <__alt_data_end+0xfc0070d8>
 8007158:	81000a17 	ldw	r4,40(r16)
 800715c:	00c20074 	movhi	r3,2049
 8007160:	18e56d04 	addi	r3,r3,-27212
 8007164:	20ffc51e 	bne	r4,r3,800707c <__alt_data_end+0xfc00707c>
 8007168:	80c0030b 	ldhu	r3,12(r16)
 800716c:	01010004 	movi	r4,1024
 8007170:	81001315 	stw	r4,76(r16)
 8007174:	1906b03a 	or	r3,r3,r4
 8007178:	80c0030d 	sth	r3,12(r16)
 800717c:	003fc206 	br	8007088 <__alt_data_end+0xfc007088>
 8007180:	0027883a 	mov	r19,zero
 8007184:	04810004 	movi	r18,1024
 8007188:	003fd606 	br	80070e4 <__alt_data_end+0xfc0070e4>
 800718c:	8140038f 	ldh	r5,14(r16)
 8007190:	8809883a 	mov	r4,r17
 8007194:	800b0e80 	call	800b0e8 <_isatty_r>
 8007198:	103fe026 	beq	r2,zero,800711c <__alt_data_end+0xfc00711c>
 800719c:	8080030b 	ldhu	r2,12(r16)
 80071a0:	10800054 	ori	r2,r2,1
 80071a4:	8080030d 	sth	r2,12(r16)
 80071a8:	003fdc06 	br	800711c <__alt_data_end+0xfc00711c>
 80071ac:	8080030b 	ldhu	r2,12(r16)
 80071b0:	10c0800c 	andi	r3,r2,512
 80071b4:	183fd91e 	bne	r3,zero,800711c <__alt_data_end+0xfc00711c>
 80071b8:	10800094 	ori	r2,r2,2
 80071bc:	80c010c4 	addi	r3,r16,67
 80071c0:	8080030d 	sth	r2,12(r16)
 80071c4:	00800044 	movi	r2,1
 80071c8:	80c00015 	stw	r3,0(r16)
 80071cc:	80c00415 	stw	r3,16(r16)
 80071d0:	80800515 	stw	r2,20(r16)
 80071d4:	003fd106 	br	800711c <__alt_data_end+0xfc00711c>
 80071d8:	04c00044 	movi	r19,1
 80071dc:	04810004 	movi	r18,1024
 80071e0:	003fc006 	br	80070e4 <__alt_data_end+0xfc0070e4>

080071e4 <_malloc_r>:
 80071e4:	defff504 	addi	sp,sp,-44
 80071e8:	dc800315 	stw	r18,12(sp)
 80071ec:	dfc00a15 	stw	ra,40(sp)
 80071f0:	df000915 	stw	fp,36(sp)
 80071f4:	ddc00815 	stw	r23,32(sp)
 80071f8:	dd800715 	stw	r22,28(sp)
 80071fc:	dd400615 	stw	r21,24(sp)
 8007200:	dd000515 	stw	r20,20(sp)
 8007204:	dcc00415 	stw	r19,16(sp)
 8007208:	dc400215 	stw	r17,8(sp)
 800720c:	dc000115 	stw	r16,4(sp)
 8007210:	288002c4 	addi	r2,r5,11
 8007214:	00c00584 	movi	r3,22
 8007218:	2025883a 	mov	r18,r4
 800721c:	18802a2e 	bgeu	r3,r2,80072c8 <_malloc_r+0xe4>
 8007220:	047ffe04 	movi	r17,-8
 8007224:	1462703a 	and	r17,r2,r17
 8007228:	88009e16 	blt	r17,zero,80074a4 <_malloc_r+0x2c0>
 800722c:	89409d36 	bltu	r17,r5,80074a4 <_malloc_r+0x2c0>
 8007230:	800f0f00 	call	800f0f0 <__malloc_lock>
 8007234:	00807dc4 	movi	r2,503
 8007238:	14402736 	bltu	r2,r17,80072d8 <_malloc_r+0xf4>
 800723c:	8806d0fa 	srli	r3,r17,3
 8007240:	04c20074 	movhi	r19,2049
 8007244:	9cc89a04 	addi	r19,r19,8808
 8007248:	18c5883a 	add	r2,r3,r3
 800724c:	1085883a 	add	r2,r2,r2
 8007250:	1085883a 	add	r2,r2,r2
 8007254:	9885883a 	add	r2,r19,r2
 8007258:	14000317 	ldw	r16,12(r2)
 800725c:	80814a26 	beq	r16,r2,8007788 <_malloc_r+0x5a4>
 8007260:	80c00117 	ldw	r3,4(r16)
 8007264:	81000317 	ldw	r4,12(r16)
 8007268:	00bfff04 	movi	r2,-4
 800726c:	1884703a 	and	r2,r3,r2
 8007270:	81400217 	ldw	r5,8(r16)
 8007274:	8085883a 	add	r2,r16,r2
 8007278:	10c00117 	ldw	r3,4(r2)
 800727c:	29000315 	stw	r4,12(r5)
 8007280:	21400215 	stw	r5,8(r4)
 8007284:	18c00054 	ori	r3,r3,1
 8007288:	10c00115 	stw	r3,4(r2)
 800728c:	9009883a 	mov	r4,r18
 8007290:	800f1100 	call	800f110 <__malloc_unlock>
 8007294:	80800204 	addi	r2,r16,8
 8007298:	dfc00a17 	ldw	ra,40(sp)
 800729c:	df000917 	ldw	fp,36(sp)
 80072a0:	ddc00817 	ldw	r23,32(sp)
 80072a4:	dd800717 	ldw	r22,28(sp)
 80072a8:	dd400617 	ldw	r21,24(sp)
 80072ac:	dd000517 	ldw	r20,20(sp)
 80072b0:	dcc00417 	ldw	r19,16(sp)
 80072b4:	dc800317 	ldw	r18,12(sp)
 80072b8:	dc400217 	ldw	r17,8(sp)
 80072bc:	dc000117 	ldw	r16,4(sp)
 80072c0:	dec00b04 	addi	sp,sp,44
 80072c4:	f800283a 	ret
 80072c8:	04400404 	movi	r17,16
 80072cc:	89407536 	bltu	r17,r5,80074a4 <_malloc_r+0x2c0>
 80072d0:	800f0f00 	call	800f0f0 <__malloc_lock>
 80072d4:	003fd906 	br	800723c <__alt_data_end+0xfc00723c>
 80072d8:	8806d27a 	srli	r3,r17,9
 80072dc:	18007526 	beq	r3,zero,80074b4 <_malloc_r+0x2d0>
 80072e0:	00800104 	movi	r2,4
 80072e4:	10c0ef36 	bltu	r2,r3,80076a4 <_malloc_r+0x4c0>
 80072e8:	8806d1ba 	srli	r3,r17,6
 80072ec:	19c00e04 	addi	r7,r3,56
 80072f0:	39cb883a 	add	r5,r7,r7
 80072f4:	04c20074 	movhi	r19,2049
 80072f8:	294b883a 	add	r5,r5,r5
 80072fc:	9cc89a04 	addi	r19,r19,8808
 8007300:	294b883a 	add	r5,r5,r5
 8007304:	994b883a 	add	r5,r19,r5
 8007308:	2c000317 	ldw	r16,12(r5)
 800730c:	2c000e26 	beq	r5,r16,8007348 <_malloc_r+0x164>
 8007310:	80800117 	ldw	r2,4(r16)
 8007314:	01bfff04 	movi	r6,-4
 8007318:	010003c4 	movi	r4,15
 800731c:	1184703a 	and	r2,r2,r6
 8007320:	1447c83a 	sub	r3,r2,r17
 8007324:	20c00716 	blt	r4,r3,8007344 <_malloc_r+0x160>
 8007328:	1800650e 	bge	r3,zero,80074c0 <_malloc_r+0x2dc>
 800732c:	84000317 	ldw	r16,12(r16)
 8007330:	2c000526 	beq	r5,r16,8007348 <_malloc_r+0x164>
 8007334:	80800117 	ldw	r2,4(r16)
 8007338:	1184703a 	and	r2,r2,r6
 800733c:	1447c83a 	sub	r3,r2,r17
 8007340:	20fff90e 	bge	r4,r3,8007328 <__alt_data_end+0xfc007328>
 8007344:	39ffffc4 	addi	r7,r7,-1
 8007348:	38c00044 	addi	r3,r7,1
 800734c:	01820074 	movhi	r6,2049
 8007350:	9c000417 	ldw	r16,16(r19)
 8007354:	31889a04 	addi	r6,r6,8808
 8007358:	32400204 	addi	r9,r6,8
 800735c:	82410326 	beq	r16,r9,800776c <_malloc_r+0x588>
 8007360:	81000117 	ldw	r4,4(r16)
 8007364:	00bfff04 	movi	r2,-4
 8007368:	208e703a 	and	r7,r4,r2
 800736c:	3c45c83a 	sub	r2,r7,r17
 8007370:	010003c4 	movi	r4,15
 8007374:	2080ee16 	blt	r4,r2,8007730 <_malloc_r+0x54c>
 8007378:	32400515 	stw	r9,20(r6)
 800737c:	32400415 	stw	r9,16(r6)
 8007380:	1000510e 	bge	r2,zero,80074c8 <_malloc_r+0x2e4>
 8007384:	00807fc4 	movi	r2,511
 8007388:	11c0ce36 	bltu	r2,r7,80076c4 <_malloc_r+0x4e0>
 800738c:	3808d0fa 	srli	r4,r7,3
 8007390:	01c00044 	movi	r7,1
 8007394:	30800117 	ldw	r2,4(r6)
 8007398:	210b883a 	add	r5,r4,r4
 800739c:	294b883a 	add	r5,r5,r5
 80073a0:	2009d0ba 	srai	r4,r4,2
 80073a4:	294b883a 	add	r5,r5,r5
 80073a8:	298b883a 	add	r5,r5,r6
 80073ac:	2a000217 	ldw	r8,8(r5)
 80073b0:	3908983a 	sll	r4,r7,r4
 80073b4:	81400315 	stw	r5,12(r16)
 80073b8:	82000215 	stw	r8,8(r16)
 80073bc:	2088b03a 	or	r4,r4,r2
 80073c0:	2c000215 	stw	r16,8(r5)
 80073c4:	31000115 	stw	r4,4(r6)
 80073c8:	44000315 	stw	r16,12(r8)
 80073cc:	1805d0ba 	srai	r2,r3,2
 80073d0:	01400044 	movi	r5,1
 80073d4:	288a983a 	sll	r5,r5,r2
 80073d8:	21404336 	bltu	r4,r5,80074e8 <_malloc_r+0x304>
 80073dc:	2144703a 	and	r2,r4,r5
 80073e0:	10000a1e 	bne	r2,zero,800740c <_malloc_r+0x228>
 80073e4:	00bfff04 	movi	r2,-4
 80073e8:	294b883a 	add	r5,r5,r5
 80073ec:	1886703a 	and	r3,r3,r2
 80073f0:	2144703a 	and	r2,r4,r5
 80073f4:	18c00104 	addi	r3,r3,4
 80073f8:	1000041e 	bne	r2,zero,800740c <_malloc_r+0x228>
 80073fc:	294b883a 	add	r5,r5,r5
 8007400:	2144703a 	and	r2,r4,r5
 8007404:	18c00104 	addi	r3,r3,4
 8007408:	103ffc26 	beq	r2,zero,80073fc <__alt_data_end+0xfc0073fc>
 800740c:	023fff04 	movi	r8,-4
 8007410:	01c003c4 	movi	r7,15
 8007414:	18c5883a 	add	r2,r3,r3
 8007418:	1085883a 	add	r2,r2,r2
 800741c:	1085883a 	add	r2,r2,r2
 8007420:	9895883a 	add	r10,r19,r2
 8007424:	52c00304 	addi	r11,r10,12
 8007428:	1819883a 	mov	r12,r3
 800742c:	5c000017 	ldw	r16,0(r11)
 8007430:	59bffd04 	addi	r6,r11,-12
 8007434:	8180041e 	bne	r16,r6,8007448 <_malloc_r+0x264>
 8007438:	0000ce06 	br	8007774 <_malloc_r+0x590>
 800743c:	2000d70e 	bge	r4,zero,800779c <_malloc_r+0x5b8>
 8007440:	84000317 	ldw	r16,12(r16)
 8007444:	8180cb26 	beq	r16,r6,8007774 <_malloc_r+0x590>
 8007448:	80800117 	ldw	r2,4(r16)
 800744c:	1204703a 	and	r2,r2,r8
 8007450:	1449c83a 	sub	r4,r2,r17
 8007454:	393ff90e 	bge	r7,r4,800743c <__alt_data_end+0xfc00743c>
 8007458:	80800317 	ldw	r2,12(r16)
 800745c:	80c00217 	ldw	r3,8(r16)
 8007460:	89400054 	ori	r5,r17,1
 8007464:	81400115 	stw	r5,4(r16)
 8007468:	18800315 	stw	r2,12(r3)
 800746c:	10c00215 	stw	r3,8(r2)
 8007470:	8463883a 	add	r17,r16,r17
 8007474:	9c400515 	stw	r17,20(r19)
 8007478:	9c400415 	stw	r17,16(r19)
 800747c:	20800054 	ori	r2,r4,1
 8007480:	88800115 	stw	r2,4(r17)
 8007484:	8a400315 	stw	r9,12(r17)
 8007488:	8a400215 	stw	r9,8(r17)
 800748c:	8923883a 	add	r17,r17,r4
 8007490:	89000015 	stw	r4,0(r17)
 8007494:	9009883a 	mov	r4,r18
 8007498:	800f1100 	call	800f110 <__malloc_unlock>
 800749c:	80800204 	addi	r2,r16,8
 80074a0:	003f7d06 	br	8007298 <__alt_data_end+0xfc007298>
 80074a4:	00800304 	movi	r2,12
 80074a8:	90800015 	stw	r2,0(r18)
 80074ac:	0005883a 	mov	r2,zero
 80074b0:	003f7906 	br	8007298 <__alt_data_end+0xfc007298>
 80074b4:	01401f84 	movi	r5,126
 80074b8:	01c00fc4 	movi	r7,63
 80074bc:	003f8d06 	br	80072f4 <__alt_data_end+0xfc0072f4>
 80074c0:	81000317 	ldw	r4,12(r16)
 80074c4:	003f6a06 	br	8007270 <__alt_data_end+0xfc007270>
 80074c8:	81c5883a 	add	r2,r16,r7
 80074cc:	10c00117 	ldw	r3,4(r2)
 80074d0:	9009883a 	mov	r4,r18
 80074d4:	18c00054 	ori	r3,r3,1
 80074d8:	10c00115 	stw	r3,4(r2)
 80074dc:	800f1100 	call	800f110 <__malloc_unlock>
 80074e0:	80800204 	addi	r2,r16,8
 80074e4:	003f6c06 	br	8007298 <__alt_data_end+0xfc007298>
 80074e8:	9c000217 	ldw	r16,8(r19)
 80074ec:	00bfff04 	movi	r2,-4
 80074f0:	85800117 	ldw	r22,4(r16)
 80074f4:	b0ac703a 	and	r22,r22,r2
 80074f8:	b4400336 	bltu	r22,r17,8007508 <_malloc_r+0x324>
 80074fc:	b445c83a 	sub	r2,r22,r17
 8007500:	00c003c4 	movi	r3,15
 8007504:	18805d16 	blt	r3,r2,800767c <_malloc_r+0x498>
 8007508:	05c20074 	movhi	r23,2049
 800750c:	00820074 	movhi	r2,2049
 8007510:	bdce2104 	addi	r23,r23,14468
 8007514:	1094ef04 	addi	r2,r2,21436
 8007518:	15400017 	ldw	r21,0(r2)
 800751c:	b9000017 	ldw	r4,0(r23)
 8007520:	00ffffc4 	movi	r3,-1
 8007524:	858d883a 	add	r6,r16,r22
 8007528:	8d6b883a 	add	r21,r17,r21
 800752c:	20c0e426 	beq	r4,r3,80078c0 <_malloc_r+0x6dc>
 8007530:	ad4403c4 	addi	r21,r21,4111
 8007534:	00fc0004 	movi	r3,-4096
 8007538:	a8ea703a 	and	r21,r21,r3
 800753c:	9009883a 	mov	r4,r18
 8007540:	a80b883a 	mov	r5,r21
 8007544:	d9800015 	stw	r6,0(sp)
 8007548:	80094880 	call	8009488 <_sbrk_r>
 800754c:	00ffffc4 	movi	r3,-1
 8007550:	1029883a 	mov	r20,r2
 8007554:	d9800017 	ldw	r6,0(sp)
 8007558:	10c0a426 	beq	r2,r3,80077ec <_malloc_r+0x608>
 800755c:	1180a236 	bltu	r2,r6,80077e8 <_malloc_r+0x604>
 8007560:	07020074 	movhi	fp,2049
 8007564:	e714f704 	addi	fp,fp,21468
 8007568:	e0c00017 	ldw	r3,0(fp)
 800756c:	a8c7883a 	add	r3,r21,r3
 8007570:	e0c00015 	stw	r3,0(fp)
 8007574:	3500da26 	beq	r6,r20,80078e0 <_malloc_r+0x6fc>
 8007578:	b9000017 	ldw	r4,0(r23)
 800757c:	00bfffc4 	movi	r2,-1
 8007580:	2080e426 	beq	r4,r2,8007914 <_malloc_r+0x730>
 8007584:	a185c83a 	sub	r2,r20,r6
 8007588:	1885883a 	add	r2,r3,r2
 800758c:	e0800015 	stw	r2,0(fp)
 8007590:	a0c001cc 	andi	r3,r20,7
 8007594:	1800b526 	beq	r3,zero,800786c <_malloc_r+0x688>
 8007598:	a0e9c83a 	sub	r20,r20,r3
 800759c:	00840204 	movi	r2,4104
 80075a0:	a5000204 	addi	r20,r20,8
 80075a4:	10c7c83a 	sub	r3,r2,r3
 80075a8:	a545883a 	add	r2,r20,r21
 80075ac:	1083ffcc 	andi	r2,r2,4095
 80075b0:	18abc83a 	sub	r21,r3,r2
 80075b4:	9009883a 	mov	r4,r18
 80075b8:	a80b883a 	mov	r5,r21
 80075bc:	80094880 	call	8009488 <_sbrk_r>
 80075c0:	00ffffc4 	movi	r3,-1
 80075c4:	10c0d026 	beq	r2,r3,8007908 <_malloc_r+0x724>
 80075c8:	1507c83a 	sub	r3,r2,r20
 80075cc:	a8c7883a 	add	r3,r21,r3
 80075d0:	18c00054 	ori	r3,r3,1
 80075d4:	e0800017 	ldw	r2,0(fp)
 80075d8:	9d000215 	stw	r20,8(r19)
 80075dc:	a0c00115 	stw	r3,4(r20)
 80075e0:	a887883a 	add	r3,r21,r2
 80075e4:	e0c00015 	stw	r3,0(fp)
 80075e8:	84c00e26 	beq	r16,r19,8007624 <_malloc_r+0x440>
 80075ec:	018003c4 	movi	r6,15
 80075f0:	3580a02e 	bgeu	r6,r22,8007874 <_malloc_r+0x690>
 80075f4:	81400117 	ldw	r5,4(r16)
 80075f8:	013ffe04 	movi	r4,-8
 80075fc:	b0bffd04 	addi	r2,r22,-12
 8007600:	1104703a 	and	r2,r2,r4
 8007604:	2900004c 	andi	r4,r5,1
 8007608:	1108b03a 	or	r4,r2,r4
 800760c:	81000115 	stw	r4,4(r16)
 8007610:	01400144 	movi	r5,5
 8007614:	8089883a 	add	r4,r16,r2
 8007618:	21400115 	stw	r5,4(r4)
 800761c:	21400215 	stw	r5,8(r4)
 8007620:	3080c036 	bltu	r6,r2,8007924 <_malloc_r+0x740>
 8007624:	00820074 	movhi	r2,2049
 8007628:	1094ee04 	addi	r2,r2,21432
 800762c:	11000017 	ldw	r4,0(r2)
 8007630:	20c0012e 	bgeu	r4,r3,8007638 <_malloc_r+0x454>
 8007634:	10c00015 	stw	r3,0(r2)
 8007638:	00820074 	movhi	r2,2049
 800763c:	1094ed04 	addi	r2,r2,21428
 8007640:	11000017 	ldw	r4,0(r2)
 8007644:	9c000217 	ldw	r16,8(r19)
 8007648:	20c0012e 	bgeu	r4,r3,8007650 <_malloc_r+0x46c>
 800764c:	10c00015 	stw	r3,0(r2)
 8007650:	80c00117 	ldw	r3,4(r16)
 8007654:	00bfff04 	movi	r2,-4
 8007658:	1886703a 	and	r3,r3,r2
 800765c:	1c45c83a 	sub	r2,r3,r17
 8007660:	1c400236 	bltu	r3,r17,800766c <_malloc_r+0x488>
 8007664:	00c003c4 	movi	r3,15
 8007668:	18800416 	blt	r3,r2,800767c <_malloc_r+0x498>
 800766c:	9009883a 	mov	r4,r18
 8007670:	800f1100 	call	800f110 <__malloc_unlock>
 8007674:	0005883a 	mov	r2,zero
 8007678:	003f0706 	br	8007298 <__alt_data_end+0xfc007298>
 800767c:	88c00054 	ori	r3,r17,1
 8007680:	80c00115 	stw	r3,4(r16)
 8007684:	8463883a 	add	r17,r16,r17
 8007688:	10800054 	ori	r2,r2,1
 800768c:	9c400215 	stw	r17,8(r19)
 8007690:	88800115 	stw	r2,4(r17)
 8007694:	9009883a 	mov	r4,r18
 8007698:	800f1100 	call	800f110 <__malloc_unlock>
 800769c:	80800204 	addi	r2,r16,8
 80076a0:	003efd06 	br	8007298 <__alt_data_end+0xfc007298>
 80076a4:	00800504 	movi	r2,20
 80076a8:	10c0482e 	bgeu	r2,r3,80077cc <_malloc_r+0x5e8>
 80076ac:	00801504 	movi	r2,84
 80076b0:	10c06836 	bltu	r2,r3,8007854 <_malloc_r+0x670>
 80076b4:	8806d33a 	srli	r3,r17,12
 80076b8:	19c01b84 	addi	r7,r3,110
 80076bc:	39cb883a 	add	r5,r7,r7
 80076c0:	003f0c06 	br	80072f4 <__alt_data_end+0xfc0072f4>
 80076c4:	3804d27a 	srli	r2,r7,9
 80076c8:	01000104 	movi	r4,4
 80076cc:	2080422e 	bgeu	r4,r2,80077d8 <_malloc_r+0x5f4>
 80076d0:	01000504 	movi	r4,20
 80076d4:	20807c36 	bltu	r4,r2,80078c8 <_malloc_r+0x6e4>
 80076d8:	110016c4 	addi	r4,r2,91
 80076dc:	210b883a 	add	r5,r4,r4
 80076e0:	294b883a 	add	r5,r5,r5
 80076e4:	294b883a 	add	r5,r5,r5
 80076e8:	994b883a 	add	r5,r19,r5
 80076ec:	28800217 	ldw	r2,8(r5)
 80076f0:	02020074 	movhi	r8,2049
 80076f4:	42089a04 	addi	r8,r8,8808
 80076f8:	11406326 	beq	r2,r5,8007888 <_malloc_r+0x6a4>
 80076fc:	01bfff04 	movi	r6,-4
 8007700:	11000117 	ldw	r4,4(r2)
 8007704:	2188703a 	and	r4,r4,r6
 8007708:	3900022e 	bgeu	r7,r4,8007714 <_malloc_r+0x530>
 800770c:	10800217 	ldw	r2,8(r2)
 8007710:	28bffb1e 	bne	r5,r2,8007700 <__alt_data_end+0xfc007700>
 8007714:	11800317 	ldw	r6,12(r2)
 8007718:	99000117 	ldw	r4,4(r19)
 800771c:	81800315 	stw	r6,12(r16)
 8007720:	80800215 	stw	r2,8(r16)
 8007724:	34000215 	stw	r16,8(r6)
 8007728:	14000315 	stw	r16,12(r2)
 800772c:	003f2706 	br	80073cc <__alt_data_end+0xfc0073cc>
 8007730:	88c00054 	ori	r3,r17,1
 8007734:	80c00115 	stw	r3,4(r16)
 8007738:	8463883a 	add	r17,r16,r17
 800773c:	34400515 	stw	r17,20(r6)
 8007740:	34400415 	stw	r17,16(r6)
 8007744:	10c00054 	ori	r3,r2,1
 8007748:	8a400315 	stw	r9,12(r17)
 800774c:	8a400215 	stw	r9,8(r17)
 8007750:	88c00115 	stw	r3,4(r17)
 8007754:	88a3883a 	add	r17,r17,r2
 8007758:	88800015 	stw	r2,0(r17)
 800775c:	9009883a 	mov	r4,r18
 8007760:	800f1100 	call	800f110 <__malloc_unlock>
 8007764:	80800204 	addi	r2,r16,8
 8007768:	003ecb06 	br	8007298 <__alt_data_end+0xfc007298>
 800776c:	31000117 	ldw	r4,4(r6)
 8007770:	003f1606 	br	80073cc <__alt_data_end+0xfc0073cc>
 8007774:	63000044 	addi	r12,r12,1
 8007778:	608000cc 	andi	r2,r12,3
 800777c:	5ac00204 	addi	r11,r11,8
 8007780:	103f2a1e 	bne	r2,zero,800742c <__alt_data_end+0xfc00742c>
 8007784:	00002106 	br	800780c <_malloc_r+0x628>
 8007788:	80800204 	addi	r2,r16,8
 800778c:	84000517 	ldw	r16,20(r16)
 8007790:	143eb31e 	bne	r2,r16,8007260 <__alt_data_end+0xfc007260>
 8007794:	18c00084 	addi	r3,r3,2
 8007798:	003eec06 	br	800734c <__alt_data_end+0xfc00734c>
 800779c:	8085883a 	add	r2,r16,r2
 80077a0:	10c00117 	ldw	r3,4(r2)
 80077a4:	81000317 	ldw	r4,12(r16)
 80077a8:	81400217 	ldw	r5,8(r16)
 80077ac:	18c00054 	ori	r3,r3,1
 80077b0:	10c00115 	stw	r3,4(r2)
 80077b4:	29000315 	stw	r4,12(r5)
 80077b8:	21400215 	stw	r5,8(r4)
 80077bc:	9009883a 	mov	r4,r18
 80077c0:	800f1100 	call	800f110 <__malloc_unlock>
 80077c4:	80800204 	addi	r2,r16,8
 80077c8:	003eb306 	br	8007298 <__alt_data_end+0xfc007298>
 80077cc:	19c016c4 	addi	r7,r3,91
 80077d0:	39cb883a 	add	r5,r7,r7
 80077d4:	003ec706 	br	80072f4 <__alt_data_end+0xfc0072f4>
 80077d8:	3804d1ba 	srli	r2,r7,6
 80077dc:	11000e04 	addi	r4,r2,56
 80077e0:	210b883a 	add	r5,r4,r4
 80077e4:	003fbe06 	br	80076e0 <__alt_data_end+0xfc0076e0>
 80077e8:	84ff5d26 	beq	r16,r19,8007560 <__alt_data_end+0xfc007560>
 80077ec:	9c000217 	ldw	r16,8(r19)
 80077f0:	00bfff04 	movi	r2,-4
 80077f4:	80c00117 	ldw	r3,4(r16)
 80077f8:	1886703a 	and	r3,r3,r2
 80077fc:	003f9706 	br	800765c <__alt_data_end+0xfc00765c>
 8007800:	52800017 	ldw	r10,0(r10)
 8007804:	18ffffc4 	addi	r3,r3,-1
 8007808:	50805c1e 	bne	r10,r2,800797c <_malloc_r+0x798>
 800780c:	190000cc 	andi	r4,r3,3
 8007810:	50bffe04 	addi	r2,r10,-8
 8007814:	203ffa1e 	bne	r4,zero,8007800 <__alt_data_end+0xfc007800>
 8007818:	98800117 	ldw	r2,4(r19)
 800781c:	0146303a 	nor	r3,zero,r5
 8007820:	1884703a 	and	r2,r3,r2
 8007824:	98800115 	stw	r2,4(r19)
 8007828:	294b883a 	add	r5,r5,r5
 800782c:	117f2e36 	bltu	r2,r5,80074e8 <__alt_data_end+0xfc0074e8>
 8007830:	283f2d26 	beq	r5,zero,80074e8 <__alt_data_end+0xfc0074e8>
 8007834:	1146703a 	and	r3,r2,r5
 8007838:	1800521e 	bne	r3,zero,8007984 <_malloc_r+0x7a0>
 800783c:	6007883a 	mov	r3,r12
 8007840:	294b883a 	add	r5,r5,r5
 8007844:	1148703a 	and	r4,r2,r5
 8007848:	18c00104 	addi	r3,r3,4
 800784c:	203ffc26 	beq	r4,zero,8007840 <__alt_data_end+0xfc007840>
 8007850:	003ef006 	br	8007414 <__alt_data_end+0xfc007414>
 8007854:	00805504 	movi	r2,340
 8007858:	10c01336 	bltu	r2,r3,80078a8 <_malloc_r+0x6c4>
 800785c:	8806d3fa 	srli	r3,r17,15
 8007860:	19c01dc4 	addi	r7,r3,119
 8007864:	39cb883a 	add	r5,r7,r7
 8007868:	003ea206 	br	80072f4 <__alt_data_end+0xfc0072f4>
 800786c:	00c40004 	movi	r3,4096
 8007870:	003f4d06 	br	80075a8 <__alt_data_end+0xfc0075a8>
 8007874:	00800044 	movi	r2,1
 8007878:	a0800115 	stw	r2,4(r20)
 800787c:	a021883a 	mov	r16,r20
 8007880:	0007883a 	mov	r3,zero
 8007884:	003f7506 	br	800765c <__alt_data_end+0xfc00765c>
 8007888:	200bd0ba 	srai	r5,r4,2
 800788c:	01800044 	movi	r6,1
 8007890:	41000117 	ldw	r4,4(r8)
 8007894:	314a983a 	sll	r5,r6,r5
 8007898:	100d883a 	mov	r6,r2
 800789c:	2908b03a 	or	r4,r5,r4
 80078a0:	41000115 	stw	r4,4(r8)
 80078a4:	003f9d06 	br	800771c <__alt_data_end+0xfc00771c>
 80078a8:	00815504 	movi	r2,1364
 80078ac:	10c01336 	bltu	r2,r3,80078fc <_malloc_r+0x718>
 80078b0:	8806d4ba 	srli	r3,r17,18
 80078b4:	19c01f04 	addi	r7,r3,124
 80078b8:	39cb883a 	add	r5,r7,r7
 80078bc:	003e8d06 	br	80072f4 <__alt_data_end+0xfc0072f4>
 80078c0:	ad400404 	addi	r21,r21,16
 80078c4:	003f1d06 	br	800753c <__alt_data_end+0xfc00753c>
 80078c8:	01001504 	movi	r4,84
 80078cc:	20801c36 	bltu	r4,r2,8007940 <_malloc_r+0x75c>
 80078d0:	3804d33a 	srli	r2,r7,12
 80078d4:	11001b84 	addi	r4,r2,110
 80078d8:	210b883a 	add	r5,r4,r4
 80078dc:	003f8006 	br	80076e0 <__alt_data_end+0xfc0076e0>
 80078e0:	3083ffcc 	andi	r2,r6,4095
 80078e4:	103f241e 	bne	r2,zero,8007578 <__alt_data_end+0xfc007578>
 80078e8:	99000217 	ldw	r4,8(r19)
 80078ec:	ad85883a 	add	r2,r21,r22
 80078f0:	10800054 	ori	r2,r2,1
 80078f4:	20800115 	stw	r2,4(r4)
 80078f8:	003f4a06 	br	8007624 <__alt_data_end+0xfc007624>
 80078fc:	01403f04 	movi	r5,252
 8007900:	01c01f84 	movi	r7,126
 8007904:	003e7b06 	br	80072f4 <__alt_data_end+0xfc0072f4>
 8007908:	00c00044 	movi	r3,1
 800790c:	002b883a 	mov	r21,zero
 8007910:	003f3006 	br	80075d4 <__alt_data_end+0xfc0075d4>
 8007914:	00820074 	movhi	r2,2049
 8007918:	108e2104 	addi	r2,r2,14468
 800791c:	15000015 	stw	r20,0(r2)
 8007920:	003f1b06 	br	8007590 <__alt_data_end+0xfc007590>
 8007924:	9009883a 	mov	r4,r18
 8007928:	81400204 	addi	r5,r16,8
 800792c:	80066480 	call	8006648 <_free_r>
 8007930:	00820074 	movhi	r2,2049
 8007934:	1094f704 	addi	r2,r2,21468
 8007938:	10c00017 	ldw	r3,0(r2)
 800793c:	003f3906 	br	8007624 <__alt_data_end+0xfc007624>
 8007940:	01005504 	movi	r4,340
 8007944:	20800436 	bltu	r4,r2,8007958 <_malloc_r+0x774>
 8007948:	3804d3fa 	srli	r2,r7,15
 800794c:	11001dc4 	addi	r4,r2,119
 8007950:	210b883a 	add	r5,r4,r4
 8007954:	003f6206 	br	80076e0 <__alt_data_end+0xfc0076e0>
 8007958:	01015504 	movi	r4,1364
 800795c:	20800436 	bltu	r4,r2,8007970 <_malloc_r+0x78c>
 8007960:	3804d4ba 	srli	r2,r7,18
 8007964:	11001f04 	addi	r4,r2,124
 8007968:	210b883a 	add	r5,r4,r4
 800796c:	003f5c06 	br	80076e0 <__alt_data_end+0xfc0076e0>
 8007970:	01403f04 	movi	r5,252
 8007974:	01001f84 	movi	r4,126
 8007978:	003f5906 	br	80076e0 <__alt_data_end+0xfc0076e0>
 800797c:	98800117 	ldw	r2,4(r19)
 8007980:	003fa906 	br	8007828 <__alt_data_end+0xfc007828>
 8007984:	6007883a 	mov	r3,r12
 8007988:	003ea206 	br	8007414 <__alt_data_end+0xfc007414>

0800798c <memchr>:
 800798c:	208000cc 	andi	r2,r4,3
 8007990:	280f883a 	mov	r7,r5
 8007994:	10003526 	beq	r2,zero,8007a6c <memchr+0xe0>
 8007998:	30bfffc4 	addi	r2,r6,-1
 800799c:	30001b26 	beq	r6,zero,8007a0c <memchr+0x80>
 80079a0:	21800003 	ldbu	r6,0(r4)
 80079a4:	28c03fcc 	andi	r3,r5,255
 80079a8:	30c01a26 	beq	r6,r3,8007a14 <memchr+0x88>
 80079ac:	180d883a 	mov	r6,r3
 80079b0:	00000406 	br	80079c4 <memchr+0x38>
 80079b4:	10001526 	beq	r2,zero,8007a0c <memchr+0x80>
 80079b8:	20c00003 	ldbu	r3,0(r4)
 80079bc:	10bfffc4 	addi	r2,r2,-1
 80079c0:	19801426 	beq	r3,r6,8007a14 <memchr+0x88>
 80079c4:	21000044 	addi	r4,r4,1
 80079c8:	20c000cc 	andi	r3,r4,3
 80079cc:	183ff91e 	bne	r3,zero,80079b4 <__alt_data_end+0xfc0079b4>
 80079d0:	024000c4 	movi	r9,3
 80079d4:	48801136 	bltu	r9,r2,8007a1c <memchr+0x90>
 80079d8:	10000c26 	beq	r2,zero,8007a0c <memchr+0x80>
 80079dc:	20c00003 	ldbu	r3,0(r4)
 80079e0:	29403fcc 	andi	r5,r5,255
 80079e4:	19400b26 	beq	r3,r5,8007a14 <memchr+0x88>
 80079e8:	20c00044 	addi	r3,r4,1
 80079ec:	2085883a 	add	r2,r4,r2
 80079f0:	39803fcc 	andi	r6,r7,255
 80079f4:	00000306 	br	8007a04 <memchr+0x78>
 80079f8:	18c00044 	addi	r3,r3,1
 80079fc:	197fffc3 	ldbu	r5,-1(r3)
 8007a00:	29800426 	beq	r5,r6,8007a14 <memchr+0x88>
 8007a04:	1809883a 	mov	r4,r3
 8007a08:	18bffb1e 	bne	r3,r2,80079f8 <__alt_data_end+0xfc0079f8>
 8007a0c:	0005883a 	mov	r2,zero
 8007a10:	f800283a 	ret
 8007a14:	2005883a 	mov	r2,r4
 8007a18:	f800283a 	ret
 8007a1c:	28c03fcc 	andi	r3,r5,255
 8007a20:	1810923a 	slli	r8,r3,8
 8007a24:	02ffbff4 	movhi	r11,65279
 8007a28:	02a02074 	movhi	r10,32897
 8007a2c:	40c6b03a 	or	r3,r8,r3
 8007a30:	1810943a 	slli	r8,r3,16
 8007a34:	5affbfc4 	addi	r11,r11,-257
 8007a38:	52a02004 	addi	r10,r10,-32640
 8007a3c:	40d0b03a 	or	r8,r8,r3
 8007a40:	20c00017 	ldw	r3,0(r4)
 8007a44:	40c6f03a 	xor	r3,r8,r3
 8007a48:	1acd883a 	add	r6,r3,r11
 8007a4c:	00c6303a 	nor	r3,zero,r3
 8007a50:	30c6703a 	and	r3,r6,r3
 8007a54:	1a86703a 	and	r3,r3,r10
 8007a58:	183fdf1e 	bne	r3,zero,80079d8 <__alt_data_end+0xfc0079d8>
 8007a5c:	10bfff04 	addi	r2,r2,-4
 8007a60:	21000104 	addi	r4,r4,4
 8007a64:	48bff636 	bltu	r9,r2,8007a40 <__alt_data_end+0xfc007a40>
 8007a68:	003fdb06 	br	80079d8 <__alt_data_end+0xfc0079d8>
 8007a6c:	3005883a 	mov	r2,r6
 8007a70:	003fd706 	br	80079d0 <__alt_data_end+0xfc0079d0>

08007a74 <memcpy>:
 8007a74:	deffff04 	addi	sp,sp,-4
 8007a78:	dc000015 	stw	r16,0(sp)
 8007a7c:	00c003c4 	movi	r3,15
 8007a80:	2005883a 	mov	r2,r4
 8007a84:	1980432e 	bgeu	r3,r6,8007b94 <memcpy+0x120>
 8007a88:	2146b03a 	or	r3,r4,r5
 8007a8c:	18c000cc 	andi	r3,r3,3
 8007a90:	1800421e 	bne	r3,zero,8007b9c <memcpy+0x128>
 8007a94:	343ffc04 	addi	r16,r6,-16
 8007a98:	8020d13a 	srli	r16,r16,4
 8007a9c:	28c00104 	addi	r3,r5,4
 8007aa0:	23400104 	addi	r13,r4,4
 8007aa4:	801e913a 	slli	r15,r16,4
 8007aa8:	2b000204 	addi	r12,r5,8
 8007aac:	22c00204 	addi	r11,r4,8
 8007ab0:	7bc00504 	addi	r15,r15,20
 8007ab4:	2a800304 	addi	r10,r5,12
 8007ab8:	22400304 	addi	r9,r4,12
 8007abc:	2bdf883a 	add	r15,r5,r15
 8007ac0:	2811883a 	mov	r8,r5
 8007ac4:	200f883a 	mov	r7,r4
 8007ac8:	41000017 	ldw	r4,0(r8)
 8007acc:	39c00404 	addi	r7,r7,16
 8007ad0:	18c00404 	addi	r3,r3,16
 8007ad4:	393ffc15 	stw	r4,-16(r7)
 8007ad8:	1bbffc17 	ldw	r14,-16(r3)
 8007adc:	6b400404 	addi	r13,r13,16
 8007ae0:	5ac00404 	addi	r11,r11,16
 8007ae4:	6bbffc15 	stw	r14,-16(r13)
 8007ae8:	63800017 	ldw	r14,0(r12)
 8007aec:	4a400404 	addi	r9,r9,16
 8007af0:	42000404 	addi	r8,r8,16
 8007af4:	5bbffc15 	stw	r14,-16(r11)
 8007af8:	53800017 	ldw	r14,0(r10)
 8007afc:	63000404 	addi	r12,r12,16
 8007b00:	52800404 	addi	r10,r10,16
 8007b04:	4bbffc15 	stw	r14,-16(r9)
 8007b08:	1bffef1e 	bne	r3,r15,8007ac8 <__alt_data_end+0xfc007ac8>
 8007b0c:	81c00044 	addi	r7,r16,1
 8007b10:	380e913a 	slli	r7,r7,4
 8007b14:	310003cc 	andi	r4,r6,15
 8007b18:	02c000c4 	movi	r11,3
 8007b1c:	11c7883a 	add	r3,r2,r7
 8007b20:	29cb883a 	add	r5,r5,r7
 8007b24:	59001f2e 	bgeu	r11,r4,8007ba4 <memcpy+0x130>
 8007b28:	1813883a 	mov	r9,r3
 8007b2c:	2811883a 	mov	r8,r5
 8007b30:	200f883a 	mov	r7,r4
 8007b34:	42800017 	ldw	r10,0(r8)
 8007b38:	4a400104 	addi	r9,r9,4
 8007b3c:	39ffff04 	addi	r7,r7,-4
 8007b40:	4abfff15 	stw	r10,-4(r9)
 8007b44:	42000104 	addi	r8,r8,4
 8007b48:	59fffa36 	bltu	r11,r7,8007b34 <__alt_data_end+0xfc007b34>
 8007b4c:	213fff04 	addi	r4,r4,-4
 8007b50:	2008d0ba 	srli	r4,r4,2
 8007b54:	318000cc 	andi	r6,r6,3
 8007b58:	21000044 	addi	r4,r4,1
 8007b5c:	2109883a 	add	r4,r4,r4
 8007b60:	2109883a 	add	r4,r4,r4
 8007b64:	1907883a 	add	r3,r3,r4
 8007b68:	290b883a 	add	r5,r5,r4
 8007b6c:	30000626 	beq	r6,zero,8007b88 <memcpy+0x114>
 8007b70:	198d883a 	add	r6,r3,r6
 8007b74:	29c00003 	ldbu	r7,0(r5)
 8007b78:	18c00044 	addi	r3,r3,1
 8007b7c:	29400044 	addi	r5,r5,1
 8007b80:	19ffffc5 	stb	r7,-1(r3)
 8007b84:	19bffb1e 	bne	r3,r6,8007b74 <__alt_data_end+0xfc007b74>
 8007b88:	dc000017 	ldw	r16,0(sp)
 8007b8c:	dec00104 	addi	sp,sp,4
 8007b90:	f800283a 	ret
 8007b94:	2007883a 	mov	r3,r4
 8007b98:	003ff406 	br	8007b6c <__alt_data_end+0xfc007b6c>
 8007b9c:	2007883a 	mov	r3,r4
 8007ba0:	003ff306 	br	8007b70 <__alt_data_end+0xfc007b70>
 8007ba4:	200d883a 	mov	r6,r4
 8007ba8:	003ff006 	br	8007b6c <__alt_data_end+0xfc007b6c>

08007bac <memmove>:
 8007bac:	2005883a 	mov	r2,r4
 8007bb0:	29000b2e 	bgeu	r5,r4,8007be0 <memmove+0x34>
 8007bb4:	298f883a 	add	r7,r5,r6
 8007bb8:	21c0092e 	bgeu	r4,r7,8007be0 <memmove+0x34>
 8007bbc:	2187883a 	add	r3,r4,r6
 8007bc0:	198bc83a 	sub	r5,r3,r6
 8007bc4:	30004b26 	beq	r6,zero,8007cf4 <memmove+0x148>
 8007bc8:	39ffffc4 	addi	r7,r7,-1
 8007bcc:	39000003 	ldbu	r4,0(r7)
 8007bd0:	18ffffc4 	addi	r3,r3,-1
 8007bd4:	19000005 	stb	r4,0(r3)
 8007bd8:	197ffb1e 	bne	r3,r5,8007bc8 <__alt_data_end+0xfc007bc8>
 8007bdc:	f800283a 	ret
 8007be0:	00c003c4 	movi	r3,15
 8007be4:	1980412e 	bgeu	r3,r6,8007cec <memmove+0x140>
 8007be8:	1146b03a 	or	r3,r2,r5
 8007bec:	18c000cc 	andi	r3,r3,3
 8007bf0:	1800411e 	bne	r3,zero,8007cf8 <memmove+0x14c>
 8007bf4:	33fffc04 	addi	r15,r6,-16
 8007bf8:	781ed13a 	srli	r15,r15,4
 8007bfc:	28c00104 	addi	r3,r5,4
 8007c00:	13400104 	addi	r13,r2,4
 8007c04:	781c913a 	slli	r14,r15,4
 8007c08:	2b000204 	addi	r12,r5,8
 8007c0c:	12c00204 	addi	r11,r2,8
 8007c10:	73800504 	addi	r14,r14,20
 8007c14:	2a800304 	addi	r10,r5,12
 8007c18:	12400304 	addi	r9,r2,12
 8007c1c:	2b9d883a 	add	r14,r5,r14
 8007c20:	2811883a 	mov	r8,r5
 8007c24:	100f883a 	mov	r7,r2
 8007c28:	41000017 	ldw	r4,0(r8)
 8007c2c:	39c00404 	addi	r7,r7,16
 8007c30:	18c00404 	addi	r3,r3,16
 8007c34:	393ffc15 	stw	r4,-16(r7)
 8007c38:	193ffc17 	ldw	r4,-16(r3)
 8007c3c:	6b400404 	addi	r13,r13,16
 8007c40:	5ac00404 	addi	r11,r11,16
 8007c44:	693ffc15 	stw	r4,-16(r13)
 8007c48:	61000017 	ldw	r4,0(r12)
 8007c4c:	4a400404 	addi	r9,r9,16
 8007c50:	42000404 	addi	r8,r8,16
 8007c54:	593ffc15 	stw	r4,-16(r11)
 8007c58:	51000017 	ldw	r4,0(r10)
 8007c5c:	63000404 	addi	r12,r12,16
 8007c60:	52800404 	addi	r10,r10,16
 8007c64:	493ffc15 	stw	r4,-16(r9)
 8007c68:	1bbfef1e 	bne	r3,r14,8007c28 <__alt_data_end+0xfc007c28>
 8007c6c:	79000044 	addi	r4,r15,1
 8007c70:	2008913a 	slli	r4,r4,4
 8007c74:	328003cc 	andi	r10,r6,15
 8007c78:	02c000c4 	movi	r11,3
 8007c7c:	1107883a 	add	r3,r2,r4
 8007c80:	290b883a 	add	r5,r5,r4
 8007c84:	5a801e2e 	bgeu	r11,r10,8007d00 <memmove+0x154>
 8007c88:	1813883a 	mov	r9,r3
 8007c8c:	2811883a 	mov	r8,r5
 8007c90:	500f883a 	mov	r7,r10
 8007c94:	41000017 	ldw	r4,0(r8)
 8007c98:	4a400104 	addi	r9,r9,4
 8007c9c:	39ffff04 	addi	r7,r7,-4
 8007ca0:	493fff15 	stw	r4,-4(r9)
 8007ca4:	42000104 	addi	r8,r8,4
 8007ca8:	59fffa36 	bltu	r11,r7,8007c94 <__alt_data_end+0xfc007c94>
 8007cac:	513fff04 	addi	r4,r10,-4
 8007cb0:	2008d0ba 	srli	r4,r4,2
 8007cb4:	318000cc 	andi	r6,r6,3
 8007cb8:	21000044 	addi	r4,r4,1
 8007cbc:	2109883a 	add	r4,r4,r4
 8007cc0:	2109883a 	add	r4,r4,r4
 8007cc4:	1907883a 	add	r3,r3,r4
 8007cc8:	290b883a 	add	r5,r5,r4
 8007ccc:	30000926 	beq	r6,zero,8007cf4 <memmove+0x148>
 8007cd0:	198d883a 	add	r6,r3,r6
 8007cd4:	29c00003 	ldbu	r7,0(r5)
 8007cd8:	18c00044 	addi	r3,r3,1
 8007cdc:	29400044 	addi	r5,r5,1
 8007ce0:	19ffffc5 	stb	r7,-1(r3)
 8007ce4:	19bffb1e 	bne	r3,r6,8007cd4 <__alt_data_end+0xfc007cd4>
 8007ce8:	f800283a 	ret
 8007cec:	1007883a 	mov	r3,r2
 8007cf0:	003ff606 	br	8007ccc <__alt_data_end+0xfc007ccc>
 8007cf4:	f800283a 	ret
 8007cf8:	1007883a 	mov	r3,r2
 8007cfc:	003ff406 	br	8007cd0 <__alt_data_end+0xfc007cd0>
 8007d00:	500d883a 	mov	r6,r10
 8007d04:	003ff106 	br	8007ccc <__alt_data_end+0xfc007ccc>

08007d08 <memset>:
 8007d08:	20c000cc 	andi	r3,r4,3
 8007d0c:	2005883a 	mov	r2,r4
 8007d10:	18004326 	beq	r3,zero,8007e20 <memset+0x118>
 8007d14:	31ffffc4 	addi	r7,r6,-1
 8007d18:	30004026 	beq	r6,zero,8007e1c <memset+0x114>
 8007d1c:	2813883a 	mov	r9,r5
 8007d20:	200d883a 	mov	r6,r4
 8007d24:	2007883a 	mov	r3,r4
 8007d28:	00000406 	br	8007d3c <memset+0x34>
 8007d2c:	3a3fffc4 	addi	r8,r7,-1
 8007d30:	31800044 	addi	r6,r6,1
 8007d34:	38003926 	beq	r7,zero,8007e1c <memset+0x114>
 8007d38:	400f883a 	mov	r7,r8
 8007d3c:	18c00044 	addi	r3,r3,1
 8007d40:	32400005 	stb	r9,0(r6)
 8007d44:	1a0000cc 	andi	r8,r3,3
 8007d48:	403ff81e 	bne	r8,zero,8007d2c <__alt_data_end+0xfc007d2c>
 8007d4c:	010000c4 	movi	r4,3
 8007d50:	21c02d2e 	bgeu	r4,r7,8007e08 <memset+0x100>
 8007d54:	29803fcc 	andi	r6,r5,255
 8007d58:	3008923a 	slli	r4,r6,8
 8007d5c:	218cb03a 	or	r6,r4,r6
 8007d60:	3008943a 	slli	r4,r6,16
 8007d64:	218cb03a 	or	r6,r4,r6
 8007d68:	010003c4 	movi	r4,15
 8007d6c:	21c0182e 	bgeu	r4,r7,8007dd0 <memset+0xc8>
 8007d70:	3b3ffc04 	addi	r12,r7,-16
 8007d74:	6018d13a 	srli	r12,r12,4
 8007d78:	1a000104 	addi	r8,r3,4
 8007d7c:	1ac00204 	addi	r11,r3,8
 8007d80:	6008913a 	slli	r4,r12,4
 8007d84:	1a800304 	addi	r10,r3,12
 8007d88:	1813883a 	mov	r9,r3
 8007d8c:	21000504 	addi	r4,r4,20
 8007d90:	1909883a 	add	r4,r3,r4
 8007d94:	49800015 	stw	r6,0(r9)
 8007d98:	41800015 	stw	r6,0(r8)
 8007d9c:	59800015 	stw	r6,0(r11)
 8007da0:	51800015 	stw	r6,0(r10)
 8007da4:	42000404 	addi	r8,r8,16
 8007da8:	4a400404 	addi	r9,r9,16
 8007dac:	5ac00404 	addi	r11,r11,16
 8007db0:	52800404 	addi	r10,r10,16
 8007db4:	413ff71e 	bne	r8,r4,8007d94 <__alt_data_end+0xfc007d94>
 8007db8:	63000044 	addi	r12,r12,1
 8007dbc:	6018913a 	slli	r12,r12,4
 8007dc0:	39c003cc 	andi	r7,r7,15
 8007dc4:	010000c4 	movi	r4,3
 8007dc8:	1b07883a 	add	r3,r3,r12
 8007dcc:	21c00e2e 	bgeu	r4,r7,8007e08 <memset+0x100>
 8007dd0:	1813883a 	mov	r9,r3
 8007dd4:	3811883a 	mov	r8,r7
 8007dd8:	010000c4 	movi	r4,3
 8007ddc:	49800015 	stw	r6,0(r9)
 8007de0:	423fff04 	addi	r8,r8,-4
 8007de4:	4a400104 	addi	r9,r9,4
 8007de8:	223ffc36 	bltu	r4,r8,8007ddc <__alt_data_end+0xfc007ddc>
 8007dec:	393fff04 	addi	r4,r7,-4
 8007df0:	2008d0ba 	srli	r4,r4,2
 8007df4:	39c000cc 	andi	r7,r7,3
 8007df8:	21000044 	addi	r4,r4,1
 8007dfc:	2109883a 	add	r4,r4,r4
 8007e00:	2109883a 	add	r4,r4,r4
 8007e04:	1907883a 	add	r3,r3,r4
 8007e08:	38000426 	beq	r7,zero,8007e1c <memset+0x114>
 8007e0c:	19cf883a 	add	r7,r3,r7
 8007e10:	19400005 	stb	r5,0(r3)
 8007e14:	18c00044 	addi	r3,r3,1
 8007e18:	19fffd1e 	bne	r3,r7,8007e10 <__alt_data_end+0xfc007e10>
 8007e1c:	f800283a 	ret
 8007e20:	2007883a 	mov	r3,r4
 8007e24:	300f883a 	mov	r7,r6
 8007e28:	003fc806 	br	8007d4c <__alt_data_end+0xfc007d4c>

08007e2c <_Balloc>:
 8007e2c:	20801317 	ldw	r2,76(r4)
 8007e30:	defffc04 	addi	sp,sp,-16
 8007e34:	dc400115 	stw	r17,4(sp)
 8007e38:	dc000015 	stw	r16,0(sp)
 8007e3c:	dfc00315 	stw	ra,12(sp)
 8007e40:	dc800215 	stw	r18,8(sp)
 8007e44:	2023883a 	mov	r17,r4
 8007e48:	2821883a 	mov	r16,r5
 8007e4c:	10000f26 	beq	r2,zero,8007e8c <_Balloc+0x60>
 8007e50:	8407883a 	add	r3,r16,r16
 8007e54:	18c7883a 	add	r3,r3,r3
 8007e58:	10c7883a 	add	r3,r2,r3
 8007e5c:	18800017 	ldw	r2,0(r3)
 8007e60:	10001126 	beq	r2,zero,8007ea8 <_Balloc+0x7c>
 8007e64:	11000017 	ldw	r4,0(r2)
 8007e68:	19000015 	stw	r4,0(r3)
 8007e6c:	10000415 	stw	zero,16(r2)
 8007e70:	10000315 	stw	zero,12(r2)
 8007e74:	dfc00317 	ldw	ra,12(sp)
 8007e78:	dc800217 	ldw	r18,8(sp)
 8007e7c:	dc400117 	ldw	r17,4(sp)
 8007e80:	dc000017 	ldw	r16,0(sp)
 8007e84:	dec00404 	addi	sp,sp,16
 8007e88:	f800283a 	ret
 8007e8c:	01400104 	movi	r5,4
 8007e90:	01800844 	movi	r6,33
 8007e94:	800acc80 	call	800acc8 <_calloc_r>
 8007e98:	88801315 	stw	r2,76(r17)
 8007e9c:	103fec1e 	bne	r2,zero,8007e50 <__alt_data_end+0xfc007e50>
 8007ea0:	0005883a 	mov	r2,zero
 8007ea4:	003ff306 	br	8007e74 <__alt_data_end+0xfc007e74>
 8007ea8:	01400044 	movi	r5,1
 8007eac:	2c24983a 	sll	r18,r5,r16
 8007eb0:	8809883a 	mov	r4,r17
 8007eb4:	91800144 	addi	r6,r18,5
 8007eb8:	318d883a 	add	r6,r6,r6
 8007ebc:	318d883a 	add	r6,r6,r6
 8007ec0:	800acc80 	call	800acc8 <_calloc_r>
 8007ec4:	103ff626 	beq	r2,zero,8007ea0 <__alt_data_end+0xfc007ea0>
 8007ec8:	14000115 	stw	r16,4(r2)
 8007ecc:	14800215 	stw	r18,8(r2)
 8007ed0:	003fe606 	br	8007e6c <__alt_data_end+0xfc007e6c>

08007ed4 <_Bfree>:
 8007ed4:	28000826 	beq	r5,zero,8007ef8 <_Bfree+0x24>
 8007ed8:	28c00117 	ldw	r3,4(r5)
 8007edc:	20801317 	ldw	r2,76(r4)
 8007ee0:	18c7883a 	add	r3,r3,r3
 8007ee4:	18c7883a 	add	r3,r3,r3
 8007ee8:	10c5883a 	add	r2,r2,r3
 8007eec:	10c00017 	ldw	r3,0(r2)
 8007ef0:	28c00015 	stw	r3,0(r5)
 8007ef4:	11400015 	stw	r5,0(r2)
 8007ef8:	f800283a 	ret

08007efc <__multadd>:
 8007efc:	defff704 	addi	sp,sp,-36
 8007f00:	dc800215 	stw	r18,8(sp)
 8007f04:	2c800417 	ldw	r18,16(r5)
 8007f08:	ddc00715 	stw	r23,28(sp)
 8007f0c:	dd800615 	stw	r22,24(sp)
 8007f10:	dd000415 	stw	r20,16(sp)
 8007f14:	dcc00315 	stw	r19,12(sp)
 8007f18:	dc400115 	stw	r17,4(sp)
 8007f1c:	dc000015 	stw	r16,0(sp)
 8007f20:	dfc00815 	stw	ra,32(sp)
 8007f24:	dd400515 	stw	r21,20(sp)
 8007f28:	2827883a 	mov	r19,r5
 8007f2c:	2029883a 	mov	r20,r4
 8007f30:	3023883a 	mov	r17,r6
 8007f34:	3821883a 	mov	r16,r7
 8007f38:	2d800504 	addi	r22,r5,20
 8007f3c:	002f883a 	mov	r23,zero
 8007f40:	b5400017 	ldw	r21,0(r22)
 8007f44:	880b883a 	mov	r5,r17
 8007f48:	bdc00044 	addi	r23,r23,1
 8007f4c:	a93fffcc 	andi	r4,r21,65535
 8007f50:	800c2ec0 	call	800c2ec <__mulsi3>
 8007f54:	1421883a 	add	r16,r2,r16
 8007f58:	a808d43a 	srli	r4,r21,16
 8007f5c:	802ad43a 	srli	r21,r16,16
 8007f60:	880b883a 	mov	r5,r17
 8007f64:	800c2ec0 	call	800c2ec <__mulsi3>
 8007f68:	a88f883a 	add	r7,r21,r2
 8007f6c:	3804943a 	slli	r2,r7,16
 8007f70:	80ffffcc 	andi	r3,r16,65535
 8007f74:	b5800104 	addi	r22,r22,4
 8007f78:	10c7883a 	add	r3,r2,r3
 8007f7c:	b0ffff15 	stw	r3,-4(r22)
 8007f80:	3820d43a 	srli	r16,r7,16
 8007f84:	bcbfee16 	blt	r23,r18,8007f40 <__alt_data_end+0xfc007f40>
 8007f88:	80000926 	beq	r16,zero,8007fb0 <__multadd+0xb4>
 8007f8c:	98800217 	ldw	r2,8(r19)
 8007f90:	9080130e 	bge	r18,r2,8007fe0 <__multadd+0xe4>
 8007f94:	90800144 	addi	r2,r18,5
 8007f98:	1085883a 	add	r2,r2,r2
 8007f9c:	1085883a 	add	r2,r2,r2
 8007fa0:	9885883a 	add	r2,r19,r2
 8007fa4:	14000015 	stw	r16,0(r2)
 8007fa8:	94800044 	addi	r18,r18,1
 8007fac:	9c800415 	stw	r18,16(r19)
 8007fb0:	9805883a 	mov	r2,r19
 8007fb4:	dfc00817 	ldw	ra,32(sp)
 8007fb8:	ddc00717 	ldw	r23,28(sp)
 8007fbc:	dd800617 	ldw	r22,24(sp)
 8007fc0:	dd400517 	ldw	r21,20(sp)
 8007fc4:	dd000417 	ldw	r20,16(sp)
 8007fc8:	dcc00317 	ldw	r19,12(sp)
 8007fcc:	dc800217 	ldw	r18,8(sp)
 8007fd0:	dc400117 	ldw	r17,4(sp)
 8007fd4:	dc000017 	ldw	r16,0(sp)
 8007fd8:	dec00904 	addi	sp,sp,36
 8007fdc:	f800283a 	ret
 8007fe0:	99400117 	ldw	r5,4(r19)
 8007fe4:	a009883a 	mov	r4,r20
 8007fe8:	29400044 	addi	r5,r5,1
 8007fec:	8007e2c0 	call	8007e2c <_Balloc>
 8007ff0:	99800417 	ldw	r6,16(r19)
 8007ff4:	99400304 	addi	r5,r19,12
 8007ff8:	11000304 	addi	r4,r2,12
 8007ffc:	31800084 	addi	r6,r6,2
 8008000:	318d883a 	add	r6,r6,r6
 8008004:	318d883a 	add	r6,r6,r6
 8008008:	1023883a 	mov	r17,r2
 800800c:	8007a740 	call	8007a74 <memcpy>
 8008010:	99000117 	ldw	r4,4(r19)
 8008014:	a0c01317 	ldw	r3,76(r20)
 8008018:	2109883a 	add	r4,r4,r4
 800801c:	2109883a 	add	r4,r4,r4
 8008020:	1907883a 	add	r3,r3,r4
 8008024:	18800017 	ldw	r2,0(r3)
 8008028:	98800015 	stw	r2,0(r19)
 800802c:	1cc00015 	stw	r19,0(r3)
 8008030:	8827883a 	mov	r19,r17
 8008034:	003fd706 	br	8007f94 <__alt_data_end+0xfc007f94>

08008038 <__s2b>:
 8008038:	defff904 	addi	sp,sp,-28
 800803c:	dc400115 	stw	r17,4(sp)
 8008040:	dc000015 	stw	r16,0(sp)
 8008044:	2023883a 	mov	r17,r4
 8008048:	2821883a 	mov	r16,r5
 800804c:	39000204 	addi	r4,r7,8
 8008050:	01400244 	movi	r5,9
 8008054:	dcc00315 	stw	r19,12(sp)
 8008058:	dc800215 	stw	r18,8(sp)
 800805c:	dfc00615 	stw	ra,24(sp)
 8008060:	dd400515 	stw	r21,20(sp)
 8008064:	dd000415 	stw	r20,16(sp)
 8008068:	3825883a 	mov	r18,r7
 800806c:	3027883a 	mov	r19,r6
 8008070:	800c22c0 	call	800c22c <__divsi3>
 8008074:	00c00044 	movi	r3,1
 8008078:	000b883a 	mov	r5,zero
 800807c:	1880030e 	bge	r3,r2,800808c <__s2b+0x54>
 8008080:	18c7883a 	add	r3,r3,r3
 8008084:	29400044 	addi	r5,r5,1
 8008088:	18bffd16 	blt	r3,r2,8008080 <__alt_data_end+0xfc008080>
 800808c:	8809883a 	mov	r4,r17
 8008090:	8007e2c0 	call	8007e2c <_Balloc>
 8008094:	d8c00717 	ldw	r3,28(sp)
 8008098:	10c00515 	stw	r3,20(r2)
 800809c:	00c00044 	movi	r3,1
 80080a0:	10c00415 	stw	r3,16(r2)
 80080a4:	00c00244 	movi	r3,9
 80080a8:	1cc0210e 	bge	r3,r19,8008130 <__s2b+0xf8>
 80080ac:	80eb883a 	add	r21,r16,r3
 80080b0:	a829883a 	mov	r20,r21
 80080b4:	84e1883a 	add	r16,r16,r19
 80080b8:	a1c00007 	ldb	r7,0(r20)
 80080bc:	8809883a 	mov	r4,r17
 80080c0:	a5000044 	addi	r20,r20,1
 80080c4:	100b883a 	mov	r5,r2
 80080c8:	01800284 	movi	r6,10
 80080cc:	39fff404 	addi	r7,r7,-48
 80080d0:	8007efc0 	call	8007efc <__multadd>
 80080d4:	a43ff81e 	bne	r20,r16,80080b8 <__alt_data_end+0xfc0080b8>
 80080d8:	ace1883a 	add	r16,r21,r19
 80080dc:	843ffe04 	addi	r16,r16,-8
 80080e0:	9c800a0e 	bge	r19,r18,800810c <__s2b+0xd4>
 80080e4:	94e5c83a 	sub	r18,r18,r19
 80080e8:	84a5883a 	add	r18,r16,r18
 80080ec:	81c00007 	ldb	r7,0(r16)
 80080f0:	8809883a 	mov	r4,r17
 80080f4:	84000044 	addi	r16,r16,1
 80080f8:	100b883a 	mov	r5,r2
 80080fc:	01800284 	movi	r6,10
 8008100:	39fff404 	addi	r7,r7,-48
 8008104:	8007efc0 	call	8007efc <__multadd>
 8008108:	84bff81e 	bne	r16,r18,80080ec <__alt_data_end+0xfc0080ec>
 800810c:	dfc00617 	ldw	ra,24(sp)
 8008110:	dd400517 	ldw	r21,20(sp)
 8008114:	dd000417 	ldw	r20,16(sp)
 8008118:	dcc00317 	ldw	r19,12(sp)
 800811c:	dc800217 	ldw	r18,8(sp)
 8008120:	dc400117 	ldw	r17,4(sp)
 8008124:	dc000017 	ldw	r16,0(sp)
 8008128:	dec00704 	addi	sp,sp,28
 800812c:	f800283a 	ret
 8008130:	84000284 	addi	r16,r16,10
 8008134:	1827883a 	mov	r19,r3
 8008138:	003fe906 	br	80080e0 <__alt_data_end+0xfc0080e0>

0800813c <__hi0bits>:
 800813c:	20bfffec 	andhi	r2,r4,65535
 8008140:	1000141e 	bne	r2,zero,8008194 <__hi0bits+0x58>
 8008144:	2008943a 	slli	r4,r4,16
 8008148:	00800404 	movi	r2,16
 800814c:	20ffc02c 	andhi	r3,r4,65280
 8008150:	1800021e 	bne	r3,zero,800815c <__hi0bits+0x20>
 8008154:	2008923a 	slli	r4,r4,8
 8008158:	10800204 	addi	r2,r2,8
 800815c:	20fc002c 	andhi	r3,r4,61440
 8008160:	1800021e 	bne	r3,zero,800816c <__hi0bits+0x30>
 8008164:	2008913a 	slli	r4,r4,4
 8008168:	10800104 	addi	r2,r2,4
 800816c:	20f0002c 	andhi	r3,r4,49152
 8008170:	1800031e 	bne	r3,zero,8008180 <__hi0bits+0x44>
 8008174:	2109883a 	add	r4,r4,r4
 8008178:	10800084 	addi	r2,r2,2
 800817c:	2109883a 	add	r4,r4,r4
 8008180:	20000316 	blt	r4,zero,8008190 <__hi0bits+0x54>
 8008184:	2110002c 	andhi	r4,r4,16384
 8008188:	2000041e 	bne	r4,zero,800819c <__hi0bits+0x60>
 800818c:	00800804 	movi	r2,32
 8008190:	f800283a 	ret
 8008194:	0005883a 	mov	r2,zero
 8008198:	003fec06 	br	800814c <__alt_data_end+0xfc00814c>
 800819c:	10800044 	addi	r2,r2,1
 80081a0:	f800283a 	ret

080081a4 <__lo0bits>:
 80081a4:	20c00017 	ldw	r3,0(r4)
 80081a8:	188001cc 	andi	r2,r3,7
 80081ac:	10000826 	beq	r2,zero,80081d0 <__lo0bits+0x2c>
 80081b0:	1880004c 	andi	r2,r3,1
 80081b4:	1000211e 	bne	r2,zero,800823c <__lo0bits+0x98>
 80081b8:	1880008c 	andi	r2,r3,2
 80081bc:	1000211e 	bne	r2,zero,8008244 <__lo0bits+0xa0>
 80081c0:	1806d0ba 	srli	r3,r3,2
 80081c4:	00800084 	movi	r2,2
 80081c8:	20c00015 	stw	r3,0(r4)
 80081cc:	f800283a 	ret
 80081d0:	18bfffcc 	andi	r2,r3,65535
 80081d4:	10001326 	beq	r2,zero,8008224 <__lo0bits+0x80>
 80081d8:	0005883a 	mov	r2,zero
 80081dc:	19403fcc 	andi	r5,r3,255
 80081e0:	2800021e 	bne	r5,zero,80081ec <__lo0bits+0x48>
 80081e4:	1806d23a 	srli	r3,r3,8
 80081e8:	10800204 	addi	r2,r2,8
 80081ec:	194003cc 	andi	r5,r3,15
 80081f0:	2800021e 	bne	r5,zero,80081fc <__lo0bits+0x58>
 80081f4:	1806d13a 	srli	r3,r3,4
 80081f8:	10800104 	addi	r2,r2,4
 80081fc:	194000cc 	andi	r5,r3,3
 8008200:	2800021e 	bne	r5,zero,800820c <__lo0bits+0x68>
 8008204:	1806d0ba 	srli	r3,r3,2
 8008208:	10800084 	addi	r2,r2,2
 800820c:	1940004c 	andi	r5,r3,1
 8008210:	2800081e 	bne	r5,zero,8008234 <__lo0bits+0x90>
 8008214:	1806d07a 	srli	r3,r3,1
 8008218:	1800051e 	bne	r3,zero,8008230 <__lo0bits+0x8c>
 800821c:	00800804 	movi	r2,32
 8008220:	f800283a 	ret
 8008224:	1806d43a 	srli	r3,r3,16
 8008228:	00800404 	movi	r2,16
 800822c:	003feb06 	br	80081dc <__alt_data_end+0xfc0081dc>
 8008230:	10800044 	addi	r2,r2,1
 8008234:	20c00015 	stw	r3,0(r4)
 8008238:	f800283a 	ret
 800823c:	0005883a 	mov	r2,zero
 8008240:	f800283a 	ret
 8008244:	1806d07a 	srli	r3,r3,1
 8008248:	00800044 	movi	r2,1
 800824c:	20c00015 	stw	r3,0(r4)
 8008250:	f800283a 	ret

08008254 <__i2b>:
 8008254:	defffd04 	addi	sp,sp,-12
 8008258:	dc000015 	stw	r16,0(sp)
 800825c:	04000044 	movi	r16,1
 8008260:	dc400115 	stw	r17,4(sp)
 8008264:	2823883a 	mov	r17,r5
 8008268:	800b883a 	mov	r5,r16
 800826c:	dfc00215 	stw	ra,8(sp)
 8008270:	8007e2c0 	call	8007e2c <_Balloc>
 8008274:	14400515 	stw	r17,20(r2)
 8008278:	14000415 	stw	r16,16(r2)
 800827c:	dfc00217 	ldw	ra,8(sp)
 8008280:	dc400117 	ldw	r17,4(sp)
 8008284:	dc000017 	ldw	r16,0(sp)
 8008288:	dec00304 	addi	sp,sp,12
 800828c:	f800283a 	ret

08008290 <__multiply>:
 8008290:	deffef04 	addi	sp,sp,-68
 8008294:	dc400815 	stw	r17,32(sp)
 8008298:	dc000715 	stw	r16,28(sp)
 800829c:	2c400417 	ldw	r17,16(r5)
 80082a0:	34000417 	ldw	r16,16(r6)
 80082a4:	dd800d15 	stw	r22,52(sp)
 80082a8:	dc800915 	stw	r18,36(sp)
 80082ac:	dfc01015 	stw	ra,64(sp)
 80082b0:	df000f15 	stw	fp,60(sp)
 80082b4:	ddc00e15 	stw	r23,56(sp)
 80082b8:	dd400c15 	stw	r21,48(sp)
 80082bc:	dd000b15 	stw	r20,44(sp)
 80082c0:	dcc00a15 	stw	r19,40(sp)
 80082c4:	2825883a 	mov	r18,r5
 80082c8:	302d883a 	mov	r22,r6
 80082cc:	8c009116 	blt	r17,r16,8008514 <__multiply+0x284>
 80082d0:	8005883a 	mov	r2,r16
 80082d4:	8821883a 	mov	r16,r17
 80082d8:	1023883a 	mov	r17,r2
 80082dc:	90800217 	ldw	r2,8(r18)
 80082e0:	8447883a 	add	r3,r16,r17
 80082e4:	d8c00215 	stw	r3,8(sp)
 80082e8:	91400117 	ldw	r5,4(r18)
 80082ec:	10c0010e 	bge	r2,r3,80082f4 <__multiply+0x64>
 80082f0:	29400044 	addi	r5,r5,1
 80082f4:	8007e2c0 	call	8007e2c <_Balloc>
 80082f8:	d8c00217 	ldw	r3,8(sp)
 80082fc:	d8800615 	stw	r2,24(sp)
 8008300:	18eb883a 	add	r21,r3,r3
 8008304:	ad6b883a 	add	r21,r21,r21
 8008308:	10c00504 	addi	r3,r2,20
 800830c:	1d6b883a 	add	r21,r3,r21
 8008310:	d8c00115 	stw	r3,4(sp)
 8008314:	dd400315 	stw	r21,12(sp)
 8008318:	1805883a 	mov	r2,r3
 800831c:	1d40042e 	bgeu	r3,r21,8008330 <__multiply+0xa0>
 8008320:	d8c00317 	ldw	r3,12(sp)
 8008324:	10000015 	stw	zero,0(r2)
 8008328:	10800104 	addi	r2,r2,4
 800832c:	10fffc36 	bltu	r2,r3,8008320 <__alt_data_end+0xfc008320>
 8008330:	8c63883a 	add	r17,r17,r17
 8008334:	b5800504 	addi	r22,r22,20
 8008338:	8c63883a 	add	r17,r17,r17
 800833c:	94800504 	addi	r18,r18,20
 8008340:	8421883a 	add	r16,r16,r16
 8008344:	b463883a 	add	r17,r22,r17
 8008348:	8421883a 	add	r16,r16,r16
 800834c:	dd800015 	stw	r22,0(sp)
 8008350:	dc800415 	stw	r18,16(sp)
 8008354:	dc400515 	stw	r17,20(sp)
 8008358:	9429883a 	add	r20,r18,r16
 800835c:	b4404f2e 	bgeu	r22,r17,800849c <__multiply+0x20c>
 8008360:	d8c00017 	ldw	r3,0(sp)
 8008364:	1c800017 	ldw	r18,0(r3)
 8008368:	943fffcc 	andi	r16,r18,65535
 800836c:	80001e26 	beq	r16,zero,80083e8 <__multiply+0x158>
 8008370:	dd800117 	ldw	r22,4(sp)
 8008374:	dd400417 	ldw	r21,16(sp)
 8008378:	0025883a 	mov	r18,zero
 800837c:	adc00017 	ldw	r23,0(r21)
 8008380:	b4c00017 	ldw	r19,0(r22)
 8008384:	800b883a 	mov	r5,r16
 8008388:	b93fffcc 	andi	r4,r23,65535
 800838c:	800c2ec0 	call	800c2ec <__mulsi3>
 8008390:	9c7fffcc 	andi	r17,r19,65535
 8008394:	8885883a 	add	r2,r17,r2
 8008398:	b808d43a 	srli	r4,r23,16
 800839c:	14a3883a 	add	r17,r2,r18
 80083a0:	9826d43a 	srli	r19,r19,16
 80083a4:	8824d43a 	srli	r18,r17,16
 80083a8:	800b883a 	mov	r5,r16
 80083ac:	800c2ec0 	call	800c2ec <__mulsi3>
 80083b0:	9885883a 	add	r2,r19,r2
 80083b4:	14a7883a 	add	r19,r2,r18
 80083b8:	88ffffcc 	andi	r3,r17,65535
 80083bc:	9822943a 	slli	r17,r19,16
 80083c0:	ad400104 	addi	r21,r21,4
 80083c4:	b005883a 	mov	r2,r22
 80083c8:	88c6b03a 	or	r3,r17,r3
 80083cc:	b0c00015 	stw	r3,0(r22)
 80083d0:	9824d43a 	srli	r18,r19,16
 80083d4:	b5800104 	addi	r22,r22,4
 80083d8:	ad3fe836 	bltu	r21,r20,800837c <__alt_data_end+0xfc00837c>
 80083dc:	d8c00017 	ldw	r3,0(sp)
 80083e0:	14800115 	stw	r18,4(r2)
 80083e4:	1c800017 	ldw	r18,0(r3)
 80083e8:	9024d43a 	srli	r18,r18,16
 80083ec:	90002226 	beq	r18,zero,8008478 <__multiply+0x1e8>
 80083f0:	d8c00117 	ldw	r3,4(sp)
 80083f4:	dd800417 	ldw	r22,16(sp)
 80083f8:	002f883a 	mov	r23,zero
 80083fc:	1f000017 	ldw	fp,0(r3)
 8008400:	1823883a 	mov	r17,r3
 8008404:	182b883a 	mov	r21,r3
 8008408:	e021883a 	mov	r16,fp
 800840c:	00000106 	br	8008414 <__multiply+0x184>
 8008410:	982b883a 	mov	r21,r19
 8008414:	b100000b 	ldhu	r4,0(r22)
 8008418:	8020d43a 	srli	r16,r16,16
 800841c:	900b883a 	mov	r5,r18
 8008420:	800c2ec0 	call	800c2ec <__mulsi3>
 8008424:	1405883a 	add	r2,r2,r16
 8008428:	15ef883a 	add	r23,r2,r23
 800842c:	b804943a 	slli	r2,r23,16
 8008430:	e0ffffcc 	andi	r3,fp,65535
 8008434:	8c400104 	addi	r17,r17,4
 8008438:	10c6b03a 	or	r3,r2,r3
 800843c:	88ffff15 	stw	r3,-4(r17)
 8008440:	b5800104 	addi	r22,r22,4
 8008444:	b13fff17 	ldw	r4,-4(r22)
 8008448:	acc00104 	addi	r19,r21,4
 800844c:	900b883a 	mov	r5,r18
 8008450:	2008d43a 	srli	r4,r4,16
 8008454:	9c000017 	ldw	r16,0(r19)
 8008458:	800c2ec0 	call	800c2ec <__mulsi3>
 800845c:	b806d43a 	srli	r3,r23,16
 8008460:	813fffcc 	andi	r4,r16,65535
 8008464:	1105883a 	add	r2,r2,r4
 8008468:	10f9883a 	add	fp,r2,r3
 800846c:	e02ed43a 	srli	r23,fp,16
 8008470:	b53fe736 	bltu	r22,r20,8008410 <__alt_data_end+0xfc008410>
 8008474:	af000115 	stw	fp,4(r21)
 8008478:	d8c00017 	ldw	r3,0(sp)
 800847c:	d9000517 	ldw	r4,20(sp)
 8008480:	18c00104 	addi	r3,r3,4
 8008484:	d8c00015 	stw	r3,0(sp)
 8008488:	d8c00117 	ldw	r3,4(sp)
 800848c:	18c00104 	addi	r3,r3,4
 8008490:	d8c00115 	stw	r3,4(sp)
 8008494:	d8c00017 	ldw	r3,0(sp)
 8008498:	193fb136 	bltu	r3,r4,8008360 <__alt_data_end+0xfc008360>
 800849c:	d8c00217 	ldw	r3,8(sp)
 80084a0:	00c00c0e 	bge	zero,r3,80084d4 <__multiply+0x244>
 80084a4:	d8c00317 	ldw	r3,12(sp)
 80084a8:	18bfff17 	ldw	r2,-4(r3)
 80084ac:	1d7fff04 	addi	r21,r3,-4
 80084b0:	10000326 	beq	r2,zero,80084c0 <__multiply+0x230>
 80084b4:	00000706 	br	80084d4 <__multiply+0x244>
 80084b8:	a8800017 	ldw	r2,0(r21)
 80084bc:	1000051e 	bne	r2,zero,80084d4 <__multiply+0x244>
 80084c0:	d8c00217 	ldw	r3,8(sp)
 80084c4:	ad7fff04 	addi	r21,r21,-4
 80084c8:	18ffffc4 	addi	r3,r3,-1
 80084cc:	d8c00215 	stw	r3,8(sp)
 80084d0:	183ff91e 	bne	r3,zero,80084b8 <__alt_data_end+0xfc0084b8>
 80084d4:	d8c00617 	ldw	r3,24(sp)
 80084d8:	d9000217 	ldw	r4,8(sp)
 80084dc:	1805883a 	mov	r2,r3
 80084e0:	19000415 	stw	r4,16(r3)
 80084e4:	dfc01017 	ldw	ra,64(sp)
 80084e8:	df000f17 	ldw	fp,60(sp)
 80084ec:	ddc00e17 	ldw	r23,56(sp)
 80084f0:	dd800d17 	ldw	r22,52(sp)
 80084f4:	dd400c17 	ldw	r21,48(sp)
 80084f8:	dd000b17 	ldw	r20,44(sp)
 80084fc:	dcc00a17 	ldw	r19,40(sp)
 8008500:	dc800917 	ldw	r18,36(sp)
 8008504:	dc400817 	ldw	r17,32(sp)
 8008508:	dc000717 	ldw	r16,28(sp)
 800850c:	dec01104 	addi	sp,sp,68
 8008510:	f800283a 	ret
 8008514:	3025883a 	mov	r18,r6
 8008518:	282d883a 	mov	r22,r5
 800851c:	003f6f06 	br	80082dc <__alt_data_end+0xfc0082dc>

08008520 <__pow5mult>:
 8008520:	defffa04 	addi	sp,sp,-24
 8008524:	dcc00315 	stw	r19,12(sp)
 8008528:	dc800215 	stw	r18,8(sp)
 800852c:	dc000015 	stw	r16,0(sp)
 8008530:	dfc00515 	stw	ra,20(sp)
 8008534:	dd000415 	stw	r20,16(sp)
 8008538:	dc400115 	stw	r17,4(sp)
 800853c:	308000cc 	andi	r2,r6,3
 8008540:	3021883a 	mov	r16,r6
 8008544:	2027883a 	mov	r19,r4
 8008548:	2825883a 	mov	r18,r5
 800854c:	10002e1e 	bne	r2,zero,8008608 <__pow5mult+0xe8>
 8008550:	8021d0ba 	srai	r16,r16,2
 8008554:	80001a26 	beq	r16,zero,80085c0 <__pow5mult+0xa0>
 8008558:	9c401217 	ldw	r17,72(r19)
 800855c:	8800061e 	bne	r17,zero,8008578 <__pow5mult+0x58>
 8008560:	00003406 	br	8008634 <__pow5mult+0x114>
 8008564:	8021d07a 	srai	r16,r16,1
 8008568:	80001526 	beq	r16,zero,80085c0 <__pow5mult+0xa0>
 800856c:	88800017 	ldw	r2,0(r17)
 8008570:	10001c26 	beq	r2,zero,80085e4 <__pow5mult+0xc4>
 8008574:	1023883a 	mov	r17,r2
 8008578:	80c0004c 	andi	r3,r16,1
 800857c:	183ff926 	beq	r3,zero,8008564 <__alt_data_end+0xfc008564>
 8008580:	900b883a 	mov	r5,r18
 8008584:	880d883a 	mov	r6,r17
 8008588:	9809883a 	mov	r4,r19
 800858c:	80082900 	call	8008290 <__multiply>
 8008590:	90001b26 	beq	r18,zero,8008600 <__pow5mult+0xe0>
 8008594:	91c00117 	ldw	r7,4(r18)
 8008598:	98c01317 	ldw	r3,76(r19)
 800859c:	8021d07a 	srai	r16,r16,1
 80085a0:	39cf883a 	add	r7,r7,r7
 80085a4:	39cf883a 	add	r7,r7,r7
 80085a8:	19c7883a 	add	r3,r3,r7
 80085ac:	19000017 	ldw	r4,0(r3)
 80085b0:	91000015 	stw	r4,0(r18)
 80085b4:	1c800015 	stw	r18,0(r3)
 80085b8:	1025883a 	mov	r18,r2
 80085bc:	803feb1e 	bne	r16,zero,800856c <__alt_data_end+0xfc00856c>
 80085c0:	9005883a 	mov	r2,r18
 80085c4:	dfc00517 	ldw	ra,20(sp)
 80085c8:	dd000417 	ldw	r20,16(sp)
 80085cc:	dcc00317 	ldw	r19,12(sp)
 80085d0:	dc800217 	ldw	r18,8(sp)
 80085d4:	dc400117 	ldw	r17,4(sp)
 80085d8:	dc000017 	ldw	r16,0(sp)
 80085dc:	dec00604 	addi	sp,sp,24
 80085e0:	f800283a 	ret
 80085e4:	9809883a 	mov	r4,r19
 80085e8:	880b883a 	mov	r5,r17
 80085ec:	880d883a 	mov	r6,r17
 80085f0:	80082900 	call	8008290 <__multiply>
 80085f4:	88800015 	stw	r2,0(r17)
 80085f8:	10000015 	stw	zero,0(r2)
 80085fc:	003fdd06 	br	8008574 <__alt_data_end+0xfc008574>
 8008600:	1025883a 	mov	r18,r2
 8008604:	003fd706 	br	8008564 <__alt_data_end+0xfc008564>
 8008608:	10bfffc4 	addi	r2,r2,-1
 800860c:	1085883a 	add	r2,r2,r2
 8008610:	00c20074 	movhi	r3,2049
 8008614:	18c6d504 	addi	r3,r3,6996
 8008618:	1085883a 	add	r2,r2,r2
 800861c:	1885883a 	add	r2,r3,r2
 8008620:	11800017 	ldw	r6,0(r2)
 8008624:	000f883a 	mov	r7,zero
 8008628:	8007efc0 	call	8007efc <__multadd>
 800862c:	1025883a 	mov	r18,r2
 8008630:	003fc706 	br	8008550 <__alt_data_end+0xfc008550>
 8008634:	05000044 	movi	r20,1
 8008638:	9809883a 	mov	r4,r19
 800863c:	a00b883a 	mov	r5,r20
 8008640:	8007e2c0 	call	8007e2c <_Balloc>
 8008644:	1023883a 	mov	r17,r2
 8008648:	00809c44 	movi	r2,625
 800864c:	88800515 	stw	r2,20(r17)
 8008650:	8d000415 	stw	r20,16(r17)
 8008654:	9c401215 	stw	r17,72(r19)
 8008658:	88000015 	stw	zero,0(r17)
 800865c:	003fc606 	br	8008578 <__alt_data_end+0xfc008578>

08008660 <__lshift>:
 8008660:	defff904 	addi	sp,sp,-28
 8008664:	dd000415 	stw	r20,16(sp)
 8008668:	dcc00315 	stw	r19,12(sp)
 800866c:	3029d17a 	srai	r20,r6,5
 8008670:	2cc00417 	ldw	r19,16(r5)
 8008674:	28800217 	ldw	r2,8(r5)
 8008678:	dd400515 	stw	r21,20(sp)
 800867c:	a4e7883a 	add	r19,r20,r19
 8008680:	dc800215 	stw	r18,8(sp)
 8008684:	dc400115 	stw	r17,4(sp)
 8008688:	dc000015 	stw	r16,0(sp)
 800868c:	dfc00615 	stw	ra,24(sp)
 8008690:	9c000044 	addi	r16,r19,1
 8008694:	2823883a 	mov	r17,r5
 8008698:	302b883a 	mov	r21,r6
 800869c:	2025883a 	mov	r18,r4
 80086a0:	29400117 	ldw	r5,4(r5)
 80086a4:	1400030e 	bge	r2,r16,80086b4 <__lshift+0x54>
 80086a8:	1085883a 	add	r2,r2,r2
 80086ac:	29400044 	addi	r5,r5,1
 80086b0:	143ffd16 	blt	r2,r16,80086a8 <__alt_data_end+0xfc0086a8>
 80086b4:	9009883a 	mov	r4,r18
 80086b8:	8007e2c0 	call	8007e2c <_Balloc>
 80086bc:	11c00504 	addi	r7,r2,20
 80086c0:	0500090e 	bge	zero,r20,80086e8 <__lshift+0x88>
 80086c4:	3811883a 	mov	r8,r7
 80086c8:	0007883a 	mov	r3,zero
 80086cc:	40000015 	stw	zero,0(r8)
 80086d0:	18c00044 	addi	r3,r3,1
 80086d4:	42000104 	addi	r8,r8,4
 80086d8:	1d3ffc1e 	bne	r3,r20,80086cc <__alt_data_end+0xfc0086cc>
 80086dc:	18c7883a 	add	r3,r3,r3
 80086e0:	18c7883a 	add	r3,r3,r3
 80086e4:	38cf883a 	add	r7,r7,r3
 80086e8:	89000417 	ldw	r4,16(r17)
 80086ec:	88c00504 	addi	r3,r17,20
 80086f0:	a98007cc 	andi	r6,r21,31
 80086f4:	2109883a 	add	r4,r4,r4
 80086f8:	2109883a 	add	r4,r4,r4
 80086fc:	1909883a 	add	r4,r3,r4
 8008700:	30002326 	beq	r6,zero,8008790 <__lshift+0x130>
 8008704:	01400804 	movi	r5,32
 8008708:	298bc83a 	sub	r5,r5,r6
 800870c:	0013883a 	mov	r9,zero
 8008710:	1a000017 	ldw	r8,0(r3)
 8008714:	3815883a 	mov	r10,r7
 8008718:	39c00104 	addi	r7,r7,4
 800871c:	4190983a 	sll	r8,r8,r6
 8008720:	18c00104 	addi	r3,r3,4
 8008724:	4a10b03a 	or	r8,r9,r8
 8008728:	3a3fff15 	stw	r8,-4(r7)
 800872c:	1a3fff17 	ldw	r8,-4(r3)
 8008730:	4152d83a 	srl	r9,r8,r5
 8008734:	193ff636 	bltu	r3,r4,8008710 <__alt_data_end+0xfc008710>
 8008738:	52400115 	stw	r9,4(r10)
 800873c:	48000126 	beq	r9,zero,8008744 <__lshift+0xe4>
 8008740:	9c000084 	addi	r16,r19,2
 8008744:	89000117 	ldw	r4,4(r17)
 8008748:	90c01317 	ldw	r3,76(r18)
 800874c:	843fffc4 	addi	r16,r16,-1
 8008750:	2109883a 	add	r4,r4,r4
 8008754:	2109883a 	add	r4,r4,r4
 8008758:	1907883a 	add	r3,r3,r4
 800875c:	19000017 	ldw	r4,0(r3)
 8008760:	14000415 	stw	r16,16(r2)
 8008764:	89000015 	stw	r4,0(r17)
 8008768:	1c400015 	stw	r17,0(r3)
 800876c:	dfc00617 	ldw	ra,24(sp)
 8008770:	dd400517 	ldw	r21,20(sp)
 8008774:	dd000417 	ldw	r20,16(sp)
 8008778:	dcc00317 	ldw	r19,12(sp)
 800877c:	dc800217 	ldw	r18,8(sp)
 8008780:	dc400117 	ldw	r17,4(sp)
 8008784:	dc000017 	ldw	r16,0(sp)
 8008788:	dec00704 	addi	sp,sp,28
 800878c:	f800283a 	ret
 8008790:	19400017 	ldw	r5,0(r3)
 8008794:	39c00104 	addi	r7,r7,4
 8008798:	18c00104 	addi	r3,r3,4
 800879c:	397fff15 	stw	r5,-4(r7)
 80087a0:	193ffb36 	bltu	r3,r4,8008790 <__alt_data_end+0xfc008790>
 80087a4:	003fe706 	br	8008744 <__alt_data_end+0xfc008744>

080087a8 <__mcmp>:
 80087a8:	20800417 	ldw	r2,16(r4)
 80087ac:	28c00417 	ldw	r3,16(r5)
 80087b0:	10c5c83a 	sub	r2,r2,r3
 80087b4:	1000111e 	bne	r2,zero,80087fc <__mcmp+0x54>
 80087b8:	18c7883a 	add	r3,r3,r3
 80087bc:	18c7883a 	add	r3,r3,r3
 80087c0:	21000504 	addi	r4,r4,20
 80087c4:	29400504 	addi	r5,r5,20
 80087c8:	20c5883a 	add	r2,r4,r3
 80087cc:	28cb883a 	add	r5,r5,r3
 80087d0:	00000106 	br	80087d8 <__mcmp+0x30>
 80087d4:	20800a2e 	bgeu	r4,r2,8008800 <__mcmp+0x58>
 80087d8:	10bfff04 	addi	r2,r2,-4
 80087dc:	297fff04 	addi	r5,r5,-4
 80087e0:	11800017 	ldw	r6,0(r2)
 80087e4:	28c00017 	ldw	r3,0(r5)
 80087e8:	30fffa26 	beq	r6,r3,80087d4 <__alt_data_end+0xfc0087d4>
 80087ec:	30c00236 	bltu	r6,r3,80087f8 <__mcmp+0x50>
 80087f0:	00800044 	movi	r2,1
 80087f4:	f800283a 	ret
 80087f8:	00bfffc4 	movi	r2,-1
 80087fc:	f800283a 	ret
 8008800:	0005883a 	mov	r2,zero
 8008804:	f800283a 	ret

08008808 <__mdiff>:
 8008808:	defffb04 	addi	sp,sp,-20
 800880c:	dc000015 	stw	r16,0(sp)
 8008810:	2821883a 	mov	r16,r5
 8008814:	dcc00315 	stw	r19,12(sp)
 8008818:	300b883a 	mov	r5,r6
 800881c:	2027883a 	mov	r19,r4
 8008820:	8009883a 	mov	r4,r16
 8008824:	dc800215 	stw	r18,8(sp)
 8008828:	dfc00415 	stw	ra,16(sp)
 800882c:	dc400115 	stw	r17,4(sp)
 8008830:	3025883a 	mov	r18,r6
 8008834:	80087a80 	call	80087a8 <__mcmp>
 8008838:	10005226 	beq	r2,zero,8008984 <__mdiff+0x17c>
 800883c:	10004c16 	blt	r2,zero,8008970 <__mdiff+0x168>
 8008840:	0023883a 	mov	r17,zero
 8008844:	81400117 	ldw	r5,4(r16)
 8008848:	9809883a 	mov	r4,r19
 800884c:	8007e2c0 	call	8007e2c <_Balloc>
 8008850:	83400417 	ldw	r13,16(r16)
 8008854:	93800417 	ldw	r14,16(r18)
 8008858:	81000504 	addi	r4,r16,20
 800885c:	6b59883a 	add	r12,r13,r13
 8008860:	739d883a 	add	r14,r14,r14
 8008864:	6319883a 	add	r12,r12,r12
 8008868:	91800504 	addi	r6,r18,20
 800886c:	739d883a 	add	r14,r14,r14
 8008870:	14400315 	stw	r17,12(r2)
 8008874:	2319883a 	add	r12,r4,r12
 8008878:	339d883a 	add	r14,r6,r14
 800887c:	12400504 	addi	r9,r2,20
 8008880:	0007883a 	mov	r3,zero
 8008884:	22000017 	ldw	r8,0(r4)
 8008888:	32800017 	ldw	r10,0(r6)
 800888c:	4ac00104 	addi	r11,r9,4
 8008890:	41ffffcc 	andi	r7,r8,65535
 8008894:	38c7883a 	add	r3,r7,r3
 8008898:	51ffffcc 	andi	r7,r10,65535
 800889c:	19cfc83a 	sub	r7,r3,r7
 80088a0:	4010d43a 	srli	r8,r8,16
 80088a4:	5014d43a 	srli	r10,r10,16
 80088a8:	3807d43a 	srai	r3,r7,16
 80088ac:	39ffffcc 	andi	r7,r7,65535
 80088b0:	4291c83a 	sub	r8,r8,r10
 80088b4:	40c7883a 	add	r3,r8,r3
 80088b8:	1810943a 	slli	r8,r3,16
 80088bc:	31800104 	addi	r6,r6,4
 80088c0:	21000104 	addi	r4,r4,4
 80088c4:	41ceb03a 	or	r7,r8,r7
 80088c8:	49c00015 	stw	r7,0(r9)
 80088cc:	1807d43a 	srai	r3,r3,16
 80088d0:	580b883a 	mov	r5,r11
 80088d4:	5813883a 	mov	r9,r11
 80088d8:	33bfea36 	bltu	r6,r14,8008884 <__alt_data_end+0xfc008884>
 80088dc:	2011883a 	mov	r8,r4
 80088e0:	2300152e 	bgeu	r4,r12,8008938 <__mdiff+0x130>
 80088e4:	21400017 	ldw	r5,0(r4)
 80088e8:	4a400104 	addi	r9,r9,4
 80088ec:	21000104 	addi	r4,r4,4
 80088f0:	29ffffcc 	andi	r7,r5,65535
 80088f4:	38c7883a 	add	r3,r7,r3
 80088f8:	280ad43a 	srli	r5,r5,16
 80088fc:	180dd43a 	srai	r6,r3,16
 8008900:	19ffffcc 	andi	r7,r3,65535
 8008904:	3147883a 	add	r3,r6,r5
 8008908:	180a943a 	slli	r5,r3,16
 800890c:	1807d43a 	srai	r3,r3,16
 8008910:	29ceb03a 	or	r7,r5,r7
 8008914:	49ffff15 	stw	r7,-4(r9)
 8008918:	233ff236 	bltu	r4,r12,80088e4 <__alt_data_end+0xfc0088e4>
 800891c:	0206303a 	nor	r3,zero,r8
 8008920:	1b07883a 	add	r3,r3,r12
 8008924:	1806d0ba 	srli	r3,r3,2
 8008928:	18c00044 	addi	r3,r3,1
 800892c:	18c7883a 	add	r3,r3,r3
 8008930:	18c7883a 	add	r3,r3,r3
 8008934:	58cb883a 	add	r5,r11,r3
 8008938:	28ffff04 	addi	r3,r5,-4
 800893c:	3800041e 	bne	r7,zero,8008950 <__mdiff+0x148>
 8008940:	18ffff04 	addi	r3,r3,-4
 8008944:	19000017 	ldw	r4,0(r3)
 8008948:	6b7fffc4 	addi	r13,r13,-1
 800894c:	203ffc26 	beq	r4,zero,8008940 <__alt_data_end+0xfc008940>
 8008950:	13400415 	stw	r13,16(r2)
 8008954:	dfc00417 	ldw	ra,16(sp)
 8008958:	dcc00317 	ldw	r19,12(sp)
 800895c:	dc800217 	ldw	r18,8(sp)
 8008960:	dc400117 	ldw	r17,4(sp)
 8008964:	dc000017 	ldw	r16,0(sp)
 8008968:	dec00504 	addi	sp,sp,20
 800896c:	f800283a 	ret
 8008970:	8005883a 	mov	r2,r16
 8008974:	04400044 	movi	r17,1
 8008978:	9021883a 	mov	r16,r18
 800897c:	1025883a 	mov	r18,r2
 8008980:	003fb006 	br	8008844 <__alt_data_end+0xfc008844>
 8008984:	9809883a 	mov	r4,r19
 8008988:	000b883a 	mov	r5,zero
 800898c:	8007e2c0 	call	8007e2c <_Balloc>
 8008990:	00c00044 	movi	r3,1
 8008994:	10c00415 	stw	r3,16(r2)
 8008998:	10000515 	stw	zero,20(r2)
 800899c:	003fed06 	br	8008954 <__alt_data_end+0xfc008954>

080089a0 <__ulp>:
 80089a0:	295ffc2c 	andhi	r5,r5,32752
 80089a4:	00bf3034 	movhi	r2,64704
 80089a8:	2887883a 	add	r3,r5,r2
 80089ac:	00c0020e 	bge	zero,r3,80089b8 <__ulp+0x18>
 80089b0:	0005883a 	mov	r2,zero
 80089b4:	f800283a 	ret
 80089b8:	00c7c83a 	sub	r3,zero,r3
 80089bc:	180bd53a 	srai	r5,r3,20
 80089c0:	008004c4 	movi	r2,19
 80089c4:	11400a0e 	bge	r2,r5,80089f0 <__ulp+0x50>
 80089c8:	00800c84 	movi	r2,50
 80089cc:	0007883a 	mov	r3,zero
 80089d0:	11400516 	blt	r2,r5,80089e8 <__ulp+0x48>
 80089d4:	00800cc4 	movi	r2,51
 80089d8:	114bc83a 	sub	r5,r2,r5
 80089dc:	00800044 	movi	r2,1
 80089e0:	1144983a 	sll	r2,r2,r5
 80089e4:	f800283a 	ret
 80089e8:	00800044 	movi	r2,1
 80089ec:	f800283a 	ret
 80089f0:	00800234 	movhi	r2,8
 80089f4:	1147d83a 	sra	r3,r2,r5
 80089f8:	0005883a 	mov	r2,zero
 80089fc:	f800283a 	ret

08008a00 <__b2d>:
 8008a00:	defffa04 	addi	sp,sp,-24
 8008a04:	dc000015 	stw	r16,0(sp)
 8008a08:	24000417 	ldw	r16,16(r4)
 8008a0c:	dc400115 	stw	r17,4(sp)
 8008a10:	24400504 	addi	r17,r4,20
 8008a14:	8421883a 	add	r16,r16,r16
 8008a18:	8421883a 	add	r16,r16,r16
 8008a1c:	8c21883a 	add	r16,r17,r16
 8008a20:	dc800215 	stw	r18,8(sp)
 8008a24:	84bfff17 	ldw	r18,-4(r16)
 8008a28:	dd000415 	stw	r20,16(sp)
 8008a2c:	dcc00315 	stw	r19,12(sp)
 8008a30:	9009883a 	mov	r4,r18
 8008a34:	2829883a 	mov	r20,r5
 8008a38:	dfc00515 	stw	ra,20(sp)
 8008a3c:	800813c0 	call	800813c <__hi0bits>
 8008a40:	00c00804 	movi	r3,32
 8008a44:	1887c83a 	sub	r3,r3,r2
 8008a48:	a0c00015 	stw	r3,0(r20)
 8008a4c:	00c00284 	movi	r3,10
 8008a50:	84ffff04 	addi	r19,r16,-4
 8008a54:	18801216 	blt	r3,r2,8008aa0 <__b2d+0xa0>
 8008a58:	014002c4 	movi	r5,11
 8008a5c:	2889c83a 	sub	r4,r5,r2
 8008a60:	9106d83a 	srl	r3,r18,r4
 8008a64:	18cffc34 	orhi	r3,r3,16368
 8008a68:	8cc0282e 	bgeu	r17,r19,8008b0c <__b2d+0x10c>
 8008a6c:	817ffe17 	ldw	r5,-8(r16)
 8008a70:	290ad83a 	srl	r5,r5,r4
 8008a74:	10800544 	addi	r2,r2,21
 8008a78:	9084983a 	sll	r2,r18,r2
 8008a7c:	2884b03a 	or	r2,r5,r2
 8008a80:	dfc00517 	ldw	ra,20(sp)
 8008a84:	dd000417 	ldw	r20,16(sp)
 8008a88:	dcc00317 	ldw	r19,12(sp)
 8008a8c:	dc800217 	ldw	r18,8(sp)
 8008a90:	dc400117 	ldw	r17,4(sp)
 8008a94:	dc000017 	ldw	r16,0(sp)
 8008a98:	dec00604 	addi	sp,sp,24
 8008a9c:	f800283a 	ret
 8008aa0:	113ffd44 	addi	r4,r2,-11
 8008aa4:	8cc00f2e 	bgeu	r17,r19,8008ae4 <__b2d+0xe4>
 8008aa8:	81bffe04 	addi	r6,r16,-8
 8008aac:	817ffe17 	ldw	r5,-8(r16)
 8008ab0:	20001326 	beq	r4,zero,8008b00 <__b2d+0x100>
 8008ab4:	00c00ac4 	movi	r3,43
 8008ab8:	1885c83a 	sub	r2,r3,r2
 8008abc:	2886d83a 	srl	r3,r5,r2
 8008ac0:	9124983a 	sll	r18,r18,r4
 8008ac4:	90e4b03a 	or	r18,r18,r3
 8008ac8:	90cffc34 	orhi	r3,r18,16368
 8008acc:	8980112e 	bgeu	r17,r6,8008b14 <__b2d+0x114>
 8008ad0:	81bffd17 	ldw	r6,-12(r16)
 8008ad4:	308cd83a 	srl	r6,r6,r2
 8008ad8:	2904983a 	sll	r2,r5,r4
 8008adc:	1184b03a 	or	r2,r2,r6
 8008ae0:	003fe706 	br	8008a80 <__alt_data_end+0xfc008a80>
 8008ae4:	20000526 	beq	r4,zero,8008afc <__b2d+0xfc>
 8008ae8:	9124983a 	sll	r18,r18,r4
 8008aec:	000d883a 	mov	r6,zero
 8008af0:	000b883a 	mov	r5,zero
 8008af4:	90cffc34 	orhi	r3,r18,16368
 8008af8:	003ff706 	br	8008ad8 <__alt_data_end+0xfc008ad8>
 8008afc:	000b883a 	mov	r5,zero
 8008b00:	90cffc34 	orhi	r3,r18,16368
 8008b04:	2805883a 	mov	r2,r5
 8008b08:	003fdd06 	br	8008a80 <__alt_data_end+0xfc008a80>
 8008b0c:	000b883a 	mov	r5,zero
 8008b10:	003fd806 	br	8008a74 <__alt_data_end+0xfc008a74>
 8008b14:	000d883a 	mov	r6,zero
 8008b18:	003fef06 	br	8008ad8 <__alt_data_end+0xfc008ad8>

08008b1c <__d2b>:
 8008b1c:	defff704 	addi	sp,sp,-36
 8008b20:	dc000215 	stw	r16,8(sp)
 8008b24:	3021883a 	mov	r16,r6
 8008b28:	dc400315 	stw	r17,12(sp)
 8008b2c:	8022907a 	slli	r17,r16,1
 8008b30:	dd400715 	stw	r21,28(sp)
 8008b34:	282b883a 	mov	r21,r5
 8008b38:	01400044 	movi	r5,1
 8008b3c:	dd000615 	stw	r20,24(sp)
 8008b40:	dcc00515 	stw	r19,20(sp)
 8008b44:	dc800415 	stw	r18,16(sp)
 8008b48:	dfc00815 	stw	ra,32(sp)
 8008b4c:	3829883a 	mov	r20,r7
 8008b50:	dc800917 	ldw	r18,36(sp)
 8008b54:	8822d57a 	srli	r17,r17,21
 8008b58:	8007e2c0 	call	8007e2c <_Balloc>
 8008b5c:	1027883a 	mov	r19,r2
 8008b60:	00800434 	movhi	r2,16
 8008b64:	10bfffc4 	addi	r2,r2,-1
 8008b68:	808c703a 	and	r6,r16,r2
 8008b6c:	88000126 	beq	r17,zero,8008b74 <__d2b+0x58>
 8008b70:	31800434 	orhi	r6,r6,16
 8008b74:	d9800015 	stw	r6,0(sp)
 8008b78:	a8001f26 	beq	r21,zero,8008bf8 <__d2b+0xdc>
 8008b7c:	d9000104 	addi	r4,sp,4
 8008b80:	dd400115 	stw	r21,4(sp)
 8008b84:	80081a40 	call	80081a4 <__lo0bits>
 8008b88:	d8c00017 	ldw	r3,0(sp)
 8008b8c:	1000291e 	bne	r2,zero,8008c34 <__d2b+0x118>
 8008b90:	d9000117 	ldw	r4,4(sp)
 8008b94:	99000515 	stw	r4,20(r19)
 8008b98:	1820c03a 	cmpne	r16,r3,zero
 8008b9c:	84000044 	addi	r16,r16,1
 8008ba0:	98c00615 	stw	r3,24(r19)
 8008ba4:	9c000415 	stw	r16,16(r19)
 8008ba8:	88001b1e 	bne	r17,zero,8008c18 <__d2b+0xfc>
 8008bac:	800690ba 	slli	r3,r16,2
 8008bb0:	10bef384 	addi	r2,r2,-1074
 8008bb4:	a0800015 	stw	r2,0(r20)
 8008bb8:	98c5883a 	add	r2,r19,r3
 8008bbc:	11000417 	ldw	r4,16(r2)
 8008bc0:	8020917a 	slli	r16,r16,5
 8008bc4:	800813c0 	call	800813c <__hi0bits>
 8008bc8:	8085c83a 	sub	r2,r16,r2
 8008bcc:	90800015 	stw	r2,0(r18)
 8008bd0:	9805883a 	mov	r2,r19
 8008bd4:	dfc00817 	ldw	ra,32(sp)
 8008bd8:	dd400717 	ldw	r21,28(sp)
 8008bdc:	dd000617 	ldw	r20,24(sp)
 8008be0:	dcc00517 	ldw	r19,20(sp)
 8008be4:	dc800417 	ldw	r18,16(sp)
 8008be8:	dc400317 	ldw	r17,12(sp)
 8008bec:	dc000217 	ldw	r16,8(sp)
 8008bf0:	dec00904 	addi	sp,sp,36
 8008bf4:	f800283a 	ret
 8008bf8:	d809883a 	mov	r4,sp
 8008bfc:	80081a40 	call	80081a4 <__lo0bits>
 8008c00:	d8c00017 	ldw	r3,0(sp)
 8008c04:	04000044 	movi	r16,1
 8008c08:	9c000415 	stw	r16,16(r19)
 8008c0c:	98c00515 	stw	r3,20(r19)
 8008c10:	10800804 	addi	r2,r2,32
 8008c14:	883fe526 	beq	r17,zero,8008bac <__alt_data_end+0xfc008bac>
 8008c18:	8c7ef344 	addi	r17,r17,-1075
 8008c1c:	88a3883a 	add	r17,r17,r2
 8008c20:	00c00d44 	movi	r3,53
 8008c24:	a4400015 	stw	r17,0(r20)
 8008c28:	1885c83a 	sub	r2,r3,r2
 8008c2c:	90800015 	stw	r2,0(r18)
 8008c30:	003fe706 	br	8008bd0 <__alt_data_end+0xfc008bd0>
 8008c34:	01000804 	movi	r4,32
 8008c38:	2089c83a 	sub	r4,r4,r2
 8008c3c:	1908983a 	sll	r4,r3,r4
 8008c40:	d9400117 	ldw	r5,4(sp)
 8008c44:	1886d83a 	srl	r3,r3,r2
 8008c48:	2148b03a 	or	r4,r4,r5
 8008c4c:	99000515 	stw	r4,20(r19)
 8008c50:	d8c00015 	stw	r3,0(sp)
 8008c54:	003fd006 	br	8008b98 <__alt_data_end+0xfc008b98>

08008c58 <__ratio>:
 8008c58:	defff904 	addi	sp,sp,-28
 8008c5c:	dc400315 	stw	r17,12(sp)
 8008c60:	2823883a 	mov	r17,r5
 8008c64:	d9400104 	addi	r5,sp,4
 8008c68:	dfc00615 	stw	ra,24(sp)
 8008c6c:	dcc00515 	stw	r19,20(sp)
 8008c70:	dc800415 	stw	r18,16(sp)
 8008c74:	2027883a 	mov	r19,r4
 8008c78:	dc000215 	stw	r16,8(sp)
 8008c7c:	8008a000 	call	8008a00 <__b2d>
 8008c80:	8809883a 	mov	r4,r17
 8008c84:	d80b883a 	mov	r5,sp
 8008c88:	1025883a 	mov	r18,r2
 8008c8c:	1821883a 	mov	r16,r3
 8008c90:	8008a000 	call	8008a00 <__b2d>
 8008c94:	8a400417 	ldw	r9,16(r17)
 8008c98:	9a000417 	ldw	r8,16(r19)
 8008c9c:	100d883a 	mov	r6,r2
 8008ca0:	d8800017 	ldw	r2,0(sp)
 8008ca4:	4251c83a 	sub	r8,r8,r9
 8008ca8:	4012917a 	slli	r9,r8,5
 8008cac:	da000117 	ldw	r8,4(sp)
 8008cb0:	4091c83a 	sub	r8,r8,r2
 8008cb4:	4251883a 	add	r8,r8,r9
 8008cb8:	02000d0e 	bge	zero,r8,8008cf0 <__ratio+0x98>
 8008cbc:	4010953a 	slli	r8,r8,20
 8008cc0:	4421883a 	add	r16,r8,r16
 8008cc4:	9009883a 	mov	r4,r18
 8008cc8:	800b883a 	mov	r5,r16
 8008ccc:	180f883a 	mov	r7,r3
 8008cd0:	800cbb00 	call	800cbb0 <__divdf3>
 8008cd4:	dfc00617 	ldw	ra,24(sp)
 8008cd8:	dcc00517 	ldw	r19,20(sp)
 8008cdc:	dc800417 	ldw	r18,16(sp)
 8008ce0:	dc400317 	ldw	r17,12(sp)
 8008ce4:	dc000217 	ldw	r16,8(sp)
 8008ce8:	dec00704 	addi	sp,sp,28
 8008cec:	f800283a 	ret
 8008cf0:	4010953a 	slli	r8,r8,20
 8008cf4:	1a07c83a 	sub	r3,r3,r8
 8008cf8:	003ff206 	br	8008cc4 <__alt_data_end+0xfc008cc4>

08008cfc <_mprec_log10>:
 8008cfc:	defffe04 	addi	sp,sp,-8
 8008d00:	dc000015 	stw	r16,0(sp)
 8008d04:	dfc00115 	stw	ra,4(sp)
 8008d08:	008005c4 	movi	r2,23
 8008d0c:	2021883a 	mov	r16,r4
 8008d10:	11000d0e 	bge	r2,r4,8008d48 <_mprec_log10+0x4c>
 8008d14:	0005883a 	mov	r2,zero
 8008d18:	00cffc34 	movhi	r3,16368
 8008d1c:	843fffc4 	addi	r16,r16,-1
 8008d20:	1009883a 	mov	r4,r2
 8008d24:	180b883a 	mov	r5,r3
 8008d28:	000d883a 	mov	r6,zero
 8008d2c:	01d00934 	movhi	r7,16420
 8008d30:	800d7740 	call	800d774 <__muldf3>
 8008d34:	803ff91e 	bne	r16,zero,8008d1c <__alt_data_end+0xfc008d1c>
 8008d38:	dfc00117 	ldw	ra,4(sp)
 8008d3c:	dc000017 	ldw	r16,0(sp)
 8008d40:	dec00204 	addi	sp,sp,8
 8008d44:	f800283a 	ret
 8008d48:	202090fa 	slli	r16,r4,3
 8008d4c:	00820074 	movhi	r2,2049
 8008d50:	1086ec04 	addi	r2,r2,7088
 8008d54:	1421883a 	add	r16,r2,r16
 8008d58:	80800017 	ldw	r2,0(r16)
 8008d5c:	80c00117 	ldw	r3,4(r16)
 8008d60:	dfc00117 	ldw	ra,4(sp)
 8008d64:	dc000017 	ldw	r16,0(sp)
 8008d68:	dec00204 	addi	sp,sp,8
 8008d6c:	f800283a 	ret

08008d70 <__copybits>:
 8008d70:	297fffc4 	addi	r5,r5,-1
 8008d74:	280fd17a 	srai	r7,r5,5
 8008d78:	30c00417 	ldw	r3,16(r6)
 8008d7c:	30800504 	addi	r2,r6,20
 8008d80:	39c00044 	addi	r7,r7,1
 8008d84:	18c7883a 	add	r3,r3,r3
 8008d88:	39cf883a 	add	r7,r7,r7
 8008d8c:	18c7883a 	add	r3,r3,r3
 8008d90:	39cf883a 	add	r7,r7,r7
 8008d94:	10c7883a 	add	r3,r2,r3
 8008d98:	21cf883a 	add	r7,r4,r7
 8008d9c:	10c00d2e 	bgeu	r2,r3,8008dd4 <__copybits+0x64>
 8008da0:	200b883a 	mov	r5,r4
 8008da4:	12000017 	ldw	r8,0(r2)
 8008da8:	29400104 	addi	r5,r5,4
 8008dac:	10800104 	addi	r2,r2,4
 8008db0:	2a3fff15 	stw	r8,-4(r5)
 8008db4:	10fffb36 	bltu	r2,r3,8008da4 <__alt_data_end+0xfc008da4>
 8008db8:	1985c83a 	sub	r2,r3,r6
 8008dbc:	10bffac4 	addi	r2,r2,-21
 8008dc0:	1004d0ba 	srli	r2,r2,2
 8008dc4:	10800044 	addi	r2,r2,1
 8008dc8:	1085883a 	add	r2,r2,r2
 8008dcc:	1085883a 	add	r2,r2,r2
 8008dd0:	2089883a 	add	r4,r4,r2
 8008dd4:	21c0032e 	bgeu	r4,r7,8008de4 <__copybits+0x74>
 8008dd8:	20000015 	stw	zero,0(r4)
 8008ddc:	21000104 	addi	r4,r4,4
 8008de0:	21fffd36 	bltu	r4,r7,8008dd8 <__alt_data_end+0xfc008dd8>
 8008de4:	f800283a 	ret

08008de8 <__any_on>:
 8008de8:	20c00417 	ldw	r3,16(r4)
 8008dec:	2805d17a 	srai	r2,r5,5
 8008df0:	21000504 	addi	r4,r4,20
 8008df4:	18800d0e 	bge	r3,r2,8008e2c <__any_on+0x44>
 8008df8:	18c7883a 	add	r3,r3,r3
 8008dfc:	18c7883a 	add	r3,r3,r3
 8008e00:	20c7883a 	add	r3,r4,r3
 8008e04:	20c0192e 	bgeu	r4,r3,8008e6c <__any_on+0x84>
 8008e08:	18bfff17 	ldw	r2,-4(r3)
 8008e0c:	18ffff04 	addi	r3,r3,-4
 8008e10:	1000041e 	bne	r2,zero,8008e24 <__any_on+0x3c>
 8008e14:	20c0142e 	bgeu	r4,r3,8008e68 <__any_on+0x80>
 8008e18:	18ffff04 	addi	r3,r3,-4
 8008e1c:	19400017 	ldw	r5,0(r3)
 8008e20:	283ffc26 	beq	r5,zero,8008e14 <__alt_data_end+0xfc008e14>
 8008e24:	00800044 	movi	r2,1
 8008e28:	f800283a 	ret
 8008e2c:	10c00a0e 	bge	r2,r3,8008e58 <__any_on+0x70>
 8008e30:	1085883a 	add	r2,r2,r2
 8008e34:	1085883a 	add	r2,r2,r2
 8008e38:	294007cc 	andi	r5,r5,31
 8008e3c:	2087883a 	add	r3,r4,r2
 8008e40:	283ff026 	beq	r5,zero,8008e04 <__alt_data_end+0xfc008e04>
 8008e44:	19800017 	ldw	r6,0(r3)
 8008e48:	3144d83a 	srl	r2,r6,r5
 8008e4c:	114a983a 	sll	r5,r2,r5
 8008e50:	29bff41e 	bne	r5,r6,8008e24 <__alt_data_end+0xfc008e24>
 8008e54:	003feb06 	br	8008e04 <__alt_data_end+0xfc008e04>
 8008e58:	1085883a 	add	r2,r2,r2
 8008e5c:	1085883a 	add	r2,r2,r2
 8008e60:	2087883a 	add	r3,r4,r2
 8008e64:	003fe706 	br	8008e04 <__alt_data_end+0xfc008e04>
 8008e68:	f800283a 	ret
 8008e6c:	0005883a 	mov	r2,zero
 8008e70:	f800283a 	ret

08008e74 <_realloc_r>:
 8008e74:	defff604 	addi	sp,sp,-40
 8008e78:	dcc00315 	stw	r19,12(sp)
 8008e7c:	dc400115 	stw	r17,4(sp)
 8008e80:	dfc00915 	stw	ra,36(sp)
 8008e84:	df000815 	stw	fp,32(sp)
 8008e88:	ddc00715 	stw	r23,28(sp)
 8008e8c:	dd800615 	stw	r22,24(sp)
 8008e90:	dd400515 	stw	r21,20(sp)
 8008e94:	dd000415 	stw	r20,16(sp)
 8008e98:	dc800215 	stw	r18,8(sp)
 8008e9c:	dc000015 	stw	r16,0(sp)
 8008ea0:	2827883a 	mov	r19,r5
 8008ea4:	3023883a 	mov	r17,r6
 8008ea8:	2800bf26 	beq	r5,zero,80091a8 <_realloc_r+0x334>
 8008eac:	2025883a 	mov	r18,r4
 8008eb0:	800f0f00 	call	800f0f0 <__malloc_lock>
 8008eb4:	98ffff17 	ldw	r3,-4(r19)
 8008eb8:	01bfff04 	movi	r6,-4
 8008ebc:	890002c4 	addi	r4,r17,11
 8008ec0:	01c00584 	movi	r7,22
 8008ec4:	9d7ffe04 	addi	r21,r19,-8
 8008ec8:	19a0703a 	and	r16,r3,r6
 8008ecc:	39003f2e 	bgeu	r7,r4,8008fcc <_realloc_r+0x158>
 8008ed0:	053ffe04 	movi	r20,-8
 8008ed4:	2528703a 	and	r20,r4,r20
 8008ed8:	a00f883a 	mov	r7,r20
 8008edc:	a0008216 	blt	r20,zero,80090e8 <_realloc_r+0x274>
 8008ee0:	a4408136 	bltu	r20,r17,80090e8 <_realloc_r+0x274>
 8008ee4:	81c03c0e 	bge	r16,r7,8008fd8 <_realloc_r+0x164>
 8008ee8:	07020074 	movhi	fp,2049
 8008eec:	e7089a04 	addi	fp,fp,8808
 8008ef0:	e1000217 	ldw	r4,8(fp)
 8008ef4:	ac05883a 	add	r2,r21,r16
 8008ef8:	2080bf26 	beq	r4,r2,80091f8 <_realloc_r+0x384>
 8008efc:	11000117 	ldw	r4,4(r2)
 8008f00:	023fff84 	movi	r8,-2
 8008f04:	2210703a 	and	r8,r4,r8
 8008f08:	1211883a 	add	r8,r2,r8
 8008f0c:	41400117 	ldw	r5,4(r8)
 8008f10:	2940004c 	andi	r5,r5,1
 8008f14:	28004a1e 	bne	r5,zero,8009040 <_realloc_r+0x1cc>
 8008f18:	017fff04 	movi	r5,-4
 8008f1c:	2148703a 	and	r4,r4,r5
 8008f20:	2409883a 	add	r4,r4,r16
 8008f24:	21c0ad0e 	bge	r4,r7,80091dc <_realloc_r+0x368>
 8008f28:	18c0004c 	andi	r3,r3,1
 8008f2c:	18007f1e 	bne	r3,zero,800912c <_realloc_r+0x2b8>
 8008f30:	9dfffe17 	ldw	r23,-8(r19)
 8008f34:	adefc83a 	sub	r23,r21,r23
 8008f38:	bd800117 	ldw	r22,4(r23)
 8008f3c:	b14a703a 	and	r5,r22,r5
 8008f40:	216d883a 	add	r22,r4,r5
 8008f44:	b1c04516 	blt	r22,r7,800905c <_realloc_r+0x1e8>
 8008f48:	10c00317 	ldw	r3,12(r2)
 8008f4c:	10800217 	ldw	r2,8(r2)
 8008f50:	81bfff04 	addi	r6,r16,-4
 8008f54:	bc400204 	addi	r17,r23,8
 8008f58:	10c00315 	stw	r3,12(r2)
 8008f5c:	18800215 	stw	r2,8(r3)
 8008f60:	b9400217 	ldw	r5,8(r23)
 8008f64:	b8c00317 	ldw	r3,12(r23)
 8008f68:	00800904 	movi	r2,36
 8008f6c:	28c00315 	stw	r3,12(r5)
 8008f70:	19400215 	stw	r5,8(r3)
 8008f74:	1180ef36 	bltu	r2,r6,8009334 <_realloc_r+0x4c0>
 8008f78:	008004c4 	movi	r2,19
 8008f7c:	1180da2e 	bgeu	r2,r6,80092e8 <_realloc_r+0x474>
 8008f80:	98800017 	ldw	r2,0(r19)
 8008f84:	b8800215 	stw	r2,8(r23)
 8008f88:	98800117 	ldw	r2,4(r19)
 8008f8c:	b8800315 	stw	r2,12(r23)
 8008f90:	008006c4 	movi	r2,27
 8008f94:	1180fc2e 	bgeu	r2,r6,8009388 <_realloc_r+0x514>
 8008f98:	98800217 	ldw	r2,8(r19)
 8008f9c:	b8800415 	stw	r2,16(r23)
 8008fa0:	98800317 	ldw	r2,12(r19)
 8008fa4:	b8800515 	stw	r2,20(r23)
 8008fa8:	00800904 	movi	r2,36
 8008fac:	3080421e 	bne	r6,r2,80090b8 <_realloc_r+0x244>
 8008fb0:	98800417 	ldw	r2,16(r19)
 8008fb4:	9cc00604 	addi	r19,r19,24
 8008fb8:	b8c00804 	addi	r3,r23,32
 8008fbc:	b8800615 	stw	r2,24(r23)
 8008fc0:	98bfff17 	ldw	r2,-4(r19)
 8008fc4:	b8800715 	stw	r2,28(r23)
 8008fc8:	00003d06 	br	80090c0 <_realloc_r+0x24c>
 8008fcc:	01c00404 	movi	r7,16
 8008fd0:	3829883a 	mov	r20,r7
 8008fd4:	003fc206 	br	8008ee0 <__alt_data_end+0xfc008ee0>
 8008fd8:	9823883a 	mov	r17,r19
 8008fdc:	850fc83a 	sub	r7,r16,r20
 8008fe0:	008003c4 	movi	r2,15
 8008fe4:	18c0004c 	andi	r3,r3,1
 8008fe8:	11c04336 	bltu	r2,r7,80090f8 <_realloc_r+0x284>
 8008fec:	1c06b03a 	or	r3,r3,r16
 8008ff0:	a8c00115 	stw	r3,4(r21)
 8008ff4:	ac21883a 	add	r16,r21,r16
 8008ff8:	80c00117 	ldw	r3,4(r16)
 8008ffc:	18c00054 	ori	r3,r3,1
 8009000:	80c00115 	stw	r3,4(r16)
 8009004:	9009883a 	mov	r4,r18
 8009008:	800f1100 	call	800f110 <__malloc_unlock>
 800900c:	8805883a 	mov	r2,r17
 8009010:	dfc00917 	ldw	ra,36(sp)
 8009014:	df000817 	ldw	fp,32(sp)
 8009018:	ddc00717 	ldw	r23,28(sp)
 800901c:	dd800617 	ldw	r22,24(sp)
 8009020:	dd400517 	ldw	r21,20(sp)
 8009024:	dd000417 	ldw	r20,16(sp)
 8009028:	dcc00317 	ldw	r19,12(sp)
 800902c:	dc800217 	ldw	r18,8(sp)
 8009030:	dc400117 	ldw	r17,4(sp)
 8009034:	dc000017 	ldw	r16,0(sp)
 8009038:	dec00a04 	addi	sp,sp,40
 800903c:	f800283a 	ret
 8009040:	18c0004c 	andi	r3,r3,1
 8009044:	1800391e 	bne	r3,zero,800912c <_realloc_r+0x2b8>
 8009048:	9dfffe17 	ldw	r23,-8(r19)
 800904c:	00bfff04 	movi	r2,-4
 8009050:	adefc83a 	sub	r23,r21,r23
 8009054:	b9400117 	ldw	r5,4(r23)
 8009058:	288a703a 	and	r5,r5,r2
 800905c:	2c2d883a 	add	r22,r5,r16
 8009060:	b1c03216 	blt	r22,r7,800912c <_realloc_r+0x2b8>
 8009064:	b8800317 	ldw	r2,12(r23)
 8009068:	b8c00217 	ldw	r3,8(r23)
 800906c:	81bfff04 	addi	r6,r16,-4
 8009070:	01000904 	movi	r4,36
 8009074:	18800315 	stw	r2,12(r3)
 8009078:	10c00215 	stw	r3,8(r2)
 800907c:	bc400204 	addi	r17,r23,8
 8009080:	2180ac36 	bltu	r4,r6,8009334 <_realloc_r+0x4c0>
 8009084:	008004c4 	movi	r2,19
 8009088:	1180972e 	bgeu	r2,r6,80092e8 <_realloc_r+0x474>
 800908c:	98800017 	ldw	r2,0(r19)
 8009090:	b8800215 	stw	r2,8(r23)
 8009094:	98800117 	ldw	r2,4(r19)
 8009098:	b8800315 	stw	r2,12(r23)
 800909c:	008006c4 	movi	r2,27
 80090a0:	1180b92e 	bgeu	r2,r6,8009388 <_realloc_r+0x514>
 80090a4:	98800217 	ldw	r2,8(r19)
 80090a8:	b8800415 	stw	r2,16(r23)
 80090ac:	98800317 	ldw	r2,12(r19)
 80090b0:	b8800515 	stw	r2,20(r23)
 80090b4:	313fbe26 	beq	r6,r4,8008fb0 <__alt_data_end+0xfc008fb0>
 80090b8:	b8c00604 	addi	r3,r23,24
 80090bc:	9cc00404 	addi	r19,r19,16
 80090c0:	98800017 	ldw	r2,0(r19)
 80090c4:	b021883a 	mov	r16,r22
 80090c8:	b82b883a 	mov	r21,r23
 80090cc:	18800015 	stw	r2,0(r3)
 80090d0:	98800117 	ldw	r2,4(r19)
 80090d4:	18800115 	stw	r2,4(r3)
 80090d8:	98800217 	ldw	r2,8(r19)
 80090dc:	18800215 	stw	r2,8(r3)
 80090e0:	b8c00117 	ldw	r3,4(r23)
 80090e4:	003fbd06 	br	8008fdc <__alt_data_end+0xfc008fdc>
 80090e8:	00800304 	movi	r2,12
 80090ec:	90800015 	stw	r2,0(r18)
 80090f0:	0005883a 	mov	r2,zero
 80090f4:	003fc606 	br	8009010 <__alt_data_end+0xfc009010>
 80090f8:	1d06b03a 	or	r3,r3,r20
 80090fc:	ad0b883a 	add	r5,r21,r20
 8009100:	a8c00115 	stw	r3,4(r21)
 8009104:	38800054 	ori	r2,r7,1
 8009108:	28800115 	stw	r2,4(r5)
 800910c:	29cf883a 	add	r7,r5,r7
 8009110:	38800117 	ldw	r2,4(r7)
 8009114:	9009883a 	mov	r4,r18
 8009118:	29400204 	addi	r5,r5,8
 800911c:	10800054 	ori	r2,r2,1
 8009120:	38800115 	stw	r2,4(r7)
 8009124:	80066480 	call	8006648 <_free_r>
 8009128:	003fb606 	br	8009004 <__alt_data_end+0xfc009004>
 800912c:	880b883a 	mov	r5,r17
 8009130:	9009883a 	mov	r4,r18
 8009134:	80071e40 	call	80071e4 <_malloc_r>
 8009138:	1023883a 	mov	r17,r2
 800913c:	1000aa26 	beq	r2,zero,80093e8 <_realloc_r+0x574>
 8009140:	98ffff17 	ldw	r3,-4(r19)
 8009144:	113ffe04 	addi	r4,r2,-8
 8009148:	00bfff84 	movi	r2,-2
 800914c:	1884703a 	and	r2,r3,r2
 8009150:	a885883a 	add	r2,r21,r2
 8009154:	20808626 	beq	r4,r2,8009370 <_realloc_r+0x4fc>
 8009158:	81bfff04 	addi	r6,r16,-4
 800915c:	00800904 	movi	r2,36
 8009160:	11807036 	bltu	r2,r6,8009324 <_realloc_r+0x4b0>
 8009164:	00c004c4 	movi	r3,19
 8009168:	19805636 	bltu	r3,r6,80092c4 <_realloc_r+0x450>
 800916c:	8805883a 	mov	r2,r17
 8009170:	9807883a 	mov	r3,r19
 8009174:	19000017 	ldw	r4,0(r3)
 8009178:	11000015 	stw	r4,0(r2)
 800917c:	19000117 	ldw	r4,4(r3)
 8009180:	11000115 	stw	r4,4(r2)
 8009184:	18c00217 	ldw	r3,8(r3)
 8009188:	10c00215 	stw	r3,8(r2)
 800918c:	980b883a 	mov	r5,r19
 8009190:	9009883a 	mov	r4,r18
 8009194:	80066480 	call	8006648 <_free_r>
 8009198:	9009883a 	mov	r4,r18
 800919c:	800f1100 	call	800f110 <__malloc_unlock>
 80091a0:	8805883a 	mov	r2,r17
 80091a4:	003f9a06 	br	8009010 <__alt_data_end+0xfc009010>
 80091a8:	300b883a 	mov	r5,r6
 80091ac:	dfc00917 	ldw	ra,36(sp)
 80091b0:	df000817 	ldw	fp,32(sp)
 80091b4:	ddc00717 	ldw	r23,28(sp)
 80091b8:	dd800617 	ldw	r22,24(sp)
 80091bc:	dd400517 	ldw	r21,20(sp)
 80091c0:	dd000417 	ldw	r20,16(sp)
 80091c4:	dcc00317 	ldw	r19,12(sp)
 80091c8:	dc800217 	ldw	r18,8(sp)
 80091cc:	dc400117 	ldw	r17,4(sp)
 80091d0:	dc000017 	ldw	r16,0(sp)
 80091d4:	dec00a04 	addi	sp,sp,40
 80091d8:	80071e41 	jmpi	80071e4 <_malloc_r>
 80091dc:	11400317 	ldw	r5,12(r2)
 80091e0:	10800217 	ldw	r2,8(r2)
 80091e4:	9823883a 	mov	r17,r19
 80091e8:	2021883a 	mov	r16,r4
 80091ec:	11400315 	stw	r5,12(r2)
 80091f0:	28800215 	stw	r2,8(r5)
 80091f4:	003f7906 	br	8008fdc <__alt_data_end+0xfc008fdc>
 80091f8:	21000117 	ldw	r4,4(r4)
 80091fc:	00bfff04 	movi	r2,-4
 8009200:	a1800404 	addi	r6,r20,16
 8009204:	2088703a 	and	r4,r4,r2
 8009208:	2409883a 	add	r4,r4,r16
 800920c:	2180380e 	bge	r4,r6,80092f0 <_realloc_r+0x47c>
 8009210:	18c0004c 	andi	r3,r3,1
 8009214:	183fc51e 	bne	r3,zero,800912c <__alt_data_end+0xfc00912c>
 8009218:	9dfffe17 	ldw	r23,-8(r19)
 800921c:	adefc83a 	sub	r23,r21,r23
 8009220:	b9400117 	ldw	r5,4(r23)
 8009224:	288a703a 	and	r5,r5,r2
 8009228:	216d883a 	add	r22,r4,r5
 800922c:	b1bf8b16 	blt	r22,r6,800905c <__alt_data_end+0xfc00905c>
 8009230:	b8800317 	ldw	r2,12(r23)
 8009234:	b8c00217 	ldw	r3,8(r23)
 8009238:	81bfff04 	addi	r6,r16,-4
 800923c:	01000904 	movi	r4,36
 8009240:	18800315 	stw	r2,12(r3)
 8009244:	10c00215 	stw	r3,8(r2)
 8009248:	bc400204 	addi	r17,r23,8
 800924c:	21805a36 	bltu	r4,r6,80093b8 <_realloc_r+0x544>
 8009250:	008004c4 	movi	r2,19
 8009254:	1180562e 	bgeu	r2,r6,80093b0 <_realloc_r+0x53c>
 8009258:	98800017 	ldw	r2,0(r19)
 800925c:	b8800215 	stw	r2,8(r23)
 8009260:	98800117 	ldw	r2,4(r19)
 8009264:	b8800315 	stw	r2,12(r23)
 8009268:	008006c4 	movi	r2,27
 800926c:	11805636 	bltu	r2,r6,80093c8 <_realloc_r+0x554>
 8009270:	b8800404 	addi	r2,r23,16
 8009274:	9cc00204 	addi	r19,r19,8
 8009278:	98c00017 	ldw	r3,0(r19)
 800927c:	10c00015 	stw	r3,0(r2)
 8009280:	98c00117 	ldw	r3,4(r19)
 8009284:	10c00115 	stw	r3,4(r2)
 8009288:	98c00217 	ldw	r3,8(r19)
 800928c:	10c00215 	stw	r3,8(r2)
 8009290:	bd07883a 	add	r3,r23,r20
 8009294:	b505c83a 	sub	r2,r22,r20
 8009298:	e0c00215 	stw	r3,8(fp)
 800929c:	10800054 	ori	r2,r2,1
 80092a0:	18800115 	stw	r2,4(r3)
 80092a4:	b8800117 	ldw	r2,4(r23)
 80092a8:	9009883a 	mov	r4,r18
 80092ac:	1080004c 	andi	r2,r2,1
 80092b0:	a0a8b03a 	or	r20,r20,r2
 80092b4:	bd000115 	stw	r20,4(r23)
 80092b8:	800f1100 	call	800f110 <__malloc_unlock>
 80092bc:	8805883a 	mov	r2,r17
 80092c0:	003f5306 	br	8009010 <__alt_data_end+0xfc009010>
 80092c4:	98c00017 	ldw	r3,0(r19)
 80092c8:	88c00015 	stw	r3,0(r17)
 80092cc:	98c00117 	ldw	r3,4(r19)
 80092d0:	88c00115 	stw	r3,4(r17)
 80092d4:	00c006c4 	movi	r3,27
 80092d8:	19801d36 	bltu	r3,r6,8009350 <_realloc_r+0x4dc>
 80092dc:	88800204 	addi	r2,r17,8
 80092e0:	98c00204 	addi	r3,r19,8
 80092e4:	003fa306 	br	8009174 <__alt_data_end+0xfc009174>
 80092e8:	8807883a 	mov	r3,r17
 80092ec:	003f7406 	br	80090c0 <__alt_data_end+0xfc0090c0>
 80092f0:	ad2b883a 	add	r21,r21,r20
 80092f4:	2505c83a 	sub	r2,r4,r20
 80092f8:	e5400215 	stw	r21,8(fp)
 80092fc:	10800054 	ori	r2,r2,1
 8009300:	a8800115 	stw	r2,4(r21)
 8009304:	98bfff17 	ldw	r2,-4(r19)
 8009308:	9009883a 	mov	r4,r18
 800930c:	1080004c 	andi	r2,r2,1
 8009310:	a0a8b03a 	or	r20,r20,r2
 8009314:	9d3fff15 	stw	r20,-4(r19)
 8009318:	800f1100 	call	800f110 <__malloc_unlock>
 800931c:	9805883a 	mov	r2,r19
 8009320:	003f3b06 	br	8009010 <__alt_data_end+0xfc009010>
 8009324:	8809883a 	mov	r4,r17
 8009328:	980b883a 	mov	r5,r19
 800932c:	8007bac0 	call	8007bac <memmove>
 8009330:	003f9606 	br	800918c <__alt_data_end+0xfc00918c>
 8009334:	8809883a 	mov	r4,r17
 8009338:	980b883a 	mov	r5,r19
 800933c:	8007bac0 	call	8007bac <memmove>
 8009340:	b8c00117 	ldw	r3,4(r23)
 8009344:	b021883a 	mov	r16,r22
 8009348:	b82b883a 	mov	r21,r23
 800934c:	003f2306 	br	8008fdc <__alt_data_end+0xfc008fdc>
 8009350:	98c00217 	ldw	r3,8(r19)
 8009354:	88c00215 	stw	r3,8(r17)
 8009358:	98c00317 	ldw	r3,12(r19)
 800935c:	88c00315 	stw	r3,12(r17)
 8009360:	30800c26 	beq	r6,r2,8009394 <_realloc_r+0x520>
 8009364:	88800404 	addi	r2,r17,16
 8009368:	98c00404 	addi	r3,r19,16
 800936c:	003f8106 	br	8009174 <__alt_data_end+0xfc009174>
 8009370:	893fff17 	ldw	r4,-4(r17)
 8009374:	00bfff04 	movi	r2,-4
 8009378:	9823883a 	mov	r17,r19
 800937c:	2084703a 	and	r2,r4,r2
 8009380:	80a1883a 	add	r16,r16,r2
 8009384:	003f1506 	br	8008fdc <__alt_data_end+0xfc008fdc>
 8009388:	b8c00404 	addi	r3,r23,16
 800938c:	9cc00204 	addi	r19,r19,8
 8009390:	003f4b06 	br	80090c0 <__alt_data_end+0xfc0090c0>
 8009394:	99000417 	ldw	r4,16(r19)
 8009398:	88800604 	addi	r2,r17,24
 800939c:	98c00604 	addi	r3,r19,24
 80093a0:	89000415 	stw	r4,16(r17)
 80093a4:	99000517 	ldw	r4,20(r19)
 80093a8:	89000515 	stw	r4,20(r17)
 80093ac:	003f7106 	br	8009174 <__alt_data_end+0xfc009174>
 80093b0:	8805883a 	mov	r2,r17
 80093b4:	003fb006 	br	8009278 <__alt_data_end+0xfc009278>
 80093b8:	8809883a 	mov	r4,r17
 80093bc:	980b883a 	mov	r5,r19
 80093c0:	8007bac0 	call	8007bac <memmove>
 80093c4:	003fb206 	br	8009290 <__alt_data_end+0xfc009290>
 80093c8:	98800217 	ldw	r2,8(r19)
 80093cc:	b8800415 	stw	r2,16(r23)
 80093d0:	98800317 	ldw	r2,12(r19)
 80093d4:	b8800515 	stw	r2,20(r23)
 80093d8:	31000726 	beq	r6,r4,80093f8 <_realloc_r+0x584>
 80093dc:	b8800604 	addi	r2,r23,24
 80093e0:	9cc00404 	addi	r19,r19,16
 80093e4:	003fa406 	br	8009278 <__alt_data_end+0xfc009278>
 80093e8:	9009883a 	mov	r4,r18
 80093ec:	800f1100 	call	800f110 <__malloc_unlock>
 80093f0:	0005883a 	mov	r2,zero
 80093f4:	003f0606 	br	8009010 <__alt_data_end+0xfc009010>
 80093f8:	98c00417 	ldw	r3,16(r19)
 80093fc:	9cc00604 	addi	r19,r19,24
 8009400:	b8800804 	addi	r2,r23,32
 8009404:	b8c00615 	stw	r3,24(r23)
 8009408:	98ffff17 	ldw	r3,-4(r19)
 800940c:	b8c00715 	stw	r3,28(r23)
 8009410:	003f9906 	br	8009278 <__alt_data_end+0xfc009278>

08009414 <__fpclassifyd>:
 8009414:	00a00034 	movhi	r2,32768
 8009418:	10bfffc4 	addi	r2,r2,-1
 800941c:	2884703a 	and	r2,r5,r2
 8009420:	10000726 	beq	r2,zero,8009440 <__fpclassifyd+0x2c>
 8009424:	00fffc34 	movhi	r3,65520
 8009428:	019ff834 	movhi	r6,32736
 800942c:	28c7883a 	add	r3,r5,r3
 8009430:	31bfffc4 	addi	r6,r6,-1
 8009434:	30c00536 	bltu	r6,r3,800944c <__fpclassifyd+0x38>
 8009438:	00800104 	movi	r2,4
 800943c:	f800283a 	ret
 8009440:	2000021e 	bne	r4,zero,800944c <__fpclassifyd+0x38>
 8009444:	00800084 	movi	r2,2
 8009448:	f800283a 	ret
 800944c:	00dffc34 	movhi	r3,32752
 8009450:	019ff834 	movhi	r6,32736
 8009454:	28cb883a 	add	r5,r5,r3
 8009458:	31bfffc4 	addi	r6,r6,-1
 800945c:	317ff62e 	bgeu	r6,r5,8009438 <__alt_data_end+0xfc009438>
 8009460:	01400434 	movhi	r5,16
 8009464:	297fffc4 	addi	r5,r5,-1
 8009468:	28800236 	bltu	r5,r2,8009474 <__fpclassifyd+0x60>
 800946c:	008000c4 	movi	r2,3
 8009470:	f800283a 	ret
 8009474:	10c00226 	beq	r2,r3,8009480 <__fpclassifyd+0x6c>
 8009478:	0005883a 	mov	r2,zero
 800947c:	f800283a 	ret
 8009480:	2005003a 	cmpeq	r2,r4,zero
 8009484:	f800283a 	ret

08009488 <_sbrk_r>:
 8009488:	defffd04 	addi	sp,sp,-12
 800948c:	dc000015 	stw	r16,0(sp)
 8009490:	04020074 	movhi	r16,2049
 8009494:	dc400115 	stw	r17,4(sp)
 8009498:	8414f004 	addi	r16,r16,21440
 800949c:	2023883a 	mov	r17,r4
 80094a0:	2809883a 	mov	r4,r5
 80094a4:	dfc00215 	stw	ra,8(sp)
 80094a8:	80000015 	stw	zero,0(r16)
 80094ac:	800f3040 	call	800f304 <sbrk>
 80094b0:	00ffffc4 	movi	r3,-1
 80094b4:	10c00526 	beq	r2,r3,80094cc <_sbrk_r+0x44>
 80094b8:	dfc00217 	ldw	ra,8(sp)
 80094bc:	dc400117 	ldw	r17,4(sp)
 80094c0:	dc000017 	ldw	r16,0(sp)
 80094c4:	dec00304 	addi	sp,sp,12
 80094c8:	f800283a 	ret
 80094cc:	80c00017 	ldw	r3,0(r16)
 80094d0:	183ff926 	beq	r3,zero,80094b8 <__alt_data_end+0xfc0094b8>
 80094d4:	88c00015 	stw	r3,0(r17)
 80094d8:	003ff706 	br	80094b8 <__alt_data_end+0xfc0094b8>

080094dc <__sread>:
 80094dc:	defffe04 	addi	sp,sp,-8
 80094e0:	dc000015 	stw	r16,0(sp)
 80094e4:	2821883a 	mov	r16,r5
 80094e8:	2940038f 	ldh	r5,14(r5)
 80094ec:	dfc00115 	stw	ra,4(sp)
 80094f0:	800b1980 	call	800b198 <_read_r>
 80094f4:	10000716 	blt	r2,zero,8009514 <__sread+0x38>
 80094f8:	80c01417 	ldw	r3,80(r16)
 80094fc:	1887883a 	add	r3,r3,r2
 8009500:	80c01415 	stw	r3,80(r16)
 8009504:	dfc00117 	ldw	ra,4(sp)
 8009508:	dc000017 	ldw	r16,0(sp)
 800950c:	dec00204 	addi	sp,sp,8
 8009510:	f800283a 	ret
 8009514:	80c0030b 	ldhu	r3,12(r16)
 8009518:	18fbffcc 	andi	r3,r3,61439
 800951c:	80c0030d 	sth	r3,12(r16)
 8009520:	dfc00117 	ldw	ra,4(sp)
 8009524:	dc000017 	ldw	r16,0(sp)
 8009528:	dec00204 	addi	sp,sp,8
 800952c:	f800283a 	ret

08009530 <__seofread>:
 8009530:	0005883a 	mov	r2,zero
 8009534:	f800283a 	ret

08009538 <__swrite>:
 8009538:	2880030b 	ldhu	r2,12(r5)
 800953c:	defffb04 	addi	sp,sp,-20
 8009540:	dcc00315 	stw	r19,12(sp)
 8009544:	dc800215 	stw	r18,8(sp)
 8009548:	dc400115 	stw	r17,4(sp)
 800954c:	dc000015 	stw	r16,0(sp)
 8009550:	dfc00415 	stw	ra,16(sp)
 8009554:	10c0400c 	andi	r3,r2,256
 8009558:	2821883a 	mov	r16,r5
 800955c:	2027883a 	mov	r19,r4
 8009560:	3025883a 	mov	r18,r6
 8009564:	3823883a 	mov	r17,r7
 8009568:	18000526 	beq	r3,zero,8009580 <__swrite+0x48>
 800956c:	2940038f 	ldh	r5,14(r5)
 8009570:	000d883a 	mov	r6,zero
 8009574:	01c00084 	movi	r7,2
 8009578:	800b13c0 	call	800b13c <_lseek_r>
 800957c:	8080030b 	ldhu	r2,12(r16)
 8009580:	8140038f 	ldh	r5,14(r16)
 8009584:	10bbffcc 	andi	r2,r2,61439
 8009588:	9809883a 	mov	r4,r19
 800958c:	900d883a 	mov	r6,r18
 8009590:	880f883a 	mov	r7,r17
 8009594:	8080030d 	sth	r2,12(r16)
 8009598:	dfc00417 	ldw	ra,16(sp)
 800959c:	dcc00317 	ldw	r19,12(sp)
 80095a0:	dc800217 	ldw	r18,8(sp)
 80095a4:	dc400117 	ldw	r17,4(sp)
 80095a8:	dc000017 	ldw	r16,0(sp)
 80095ac:	dec00504 	addi	sp,sp,20
 80095b0:	800ac181 	jmpi	800ac18 <_write_r>

080095b4 <__sseek>:
 80095b4:	defffe04 	addi	sp,sp,-8
 80095b8:	dc000015 	stw	r16,0(sp)
 80095bc:	2821883a 	mov	r16,r5
 80095c0:	2940038f 	ldh	r5,14(r5)
 80095c4:	dfc00115 	stw	ra,4(sp)
 80095c8:	800b13c0 	call	800b13c <_lseek_r>
 80095cc:	00ffffc4 	movi	r3,-1
 80095d0:	10c00826 	beq	r2,r3,80095f4 <__sseek+0x40>
 80095d4:	80c0030b 	ldhu	r3,12(r16)
 80095d8:	80801415 	stw	r2,80(r16)
 80095dc:	18c40014 	ori	r3,r3,4096
 80095e0:	80c0030d 	sth	r3,12(r16)
 80095e4:	dfc00117 	ldw	ra,4(sp)
 80095e8:	dc000017 	ldw	r16,0(sp)
 80095ec:	dec00204 	addi	sp,sp,8
 80095f0:	f800283a 	ret
 80095f4:	80c0030b 	ldhu	r3,12(r16)
 80095f8:	18fbffcc 	andi	r3,r3,61439
 80095fc:	80c0030d 	sth	r3,12(r16)
 8009600:	dfc00117 	ldw	ra,4(sp)
 8009604:	dc000017 	ldw	r16,0(sp)
 8009608:	dec00204 	addi	sp,sp,8
 800960c:	f800283a 	ret

08009610 <__sclose>:
 8009610:	2940038f 	ldh	r5,14(r5)
 8009614:	800ac741 	jmpi	800ac74 <_close_r>

08009618 <strcmp>:
 8009618:	2144b03a 	or	r2,r4,r5
 800961c:	108000cc 	andi	r2,r2,3
 8009620:	1000171e 	bne	r2,zero,8009680 <strcmp+0x68>
 8009624:	20800017 	ldw	r2,0(r4)
 8009628:	28c00017 	ldw	r3,0(r5)
 800962c:	10c0141e 	bne	r2,r3,8009680 <strcmp+0x68>
 8009630:	027fbff4 	movhi	r9,65279
 8009634:	4a7fbfc4 	addi	r9,r9,-257
 8009638:	0086303a 	nor	r3,zero,r2
 800963c:	02202074 	movhi	r8,32897
 8009640:	1245883a 	add	r2,r2,r9
 8009644:	42202004 	addi	r8,r8,-32640
 8009648:	10c4703a 	and	r2,r2,r3
 800964c:	1204703a 	and	r2,r2,r8
 8009650:	10000226 	beq	r2,zero,800965c <strcmp+0x44>
 8009654:	00001706 	br	80096b4 <strcmp+0x9c>
 8009658:	1000161e 	bne	r2,zero,80096b4 <strcmp+0x9c>
 800965c:	21000104 	addi	r4,r4,4
 8009660:	20c00017 	ldw	r3,0(r4)
 8009664:	29400104 	addi	r5,r5,4
 8009668:	29800017 	ldw	r6,0(r5)
 800966c:	1a4f883a 	add	r7,r3,r9
 8009670:	00c4303a 	nor	r2,zero,r3
 8009674:	3884703a 	and	r2,r7,r2
 8009678:	1204703a 	and	r2,r2,r8
 800967c:	19bff626 	beq	r3,r6,8009658 <__alt_data_end+0xfc009658>
 8009680:	20800007 	ldb	r2,0(r4)
 8009684:	1000051e 	bne	r2,zero,800969c <strcmp+0x84>
 8009688:	00000606 	br	80096a4 <strcmp+0x8c>
 800968c:	21000044 	addi	r4,r4,1
 8009690:	20800007 	ldb	r2,0(r4)
 8009694:	29400044 	addi	r5,r5,1
 8009698:	10000226 	beq	r2,zero,80096a4 <strcmp+0x8c>
 800969c:	28c00007 	ldb	r3,0(r5)
 80096a0:	10fffa26 	beq	r2,r3,800968c <__alt_data_end+0xfc00968c>
 80096a4:	20800003 	ldbu	r2,0(r4)
 80096a8:	28c00003 	ldbu	r3,0(r5)
 80096ac:	10c5c83a 	sub	r2,r2,r3
 80096b0:	f800283a 	ret
 80096b4:	0005883a 	mov	r2,zero
 80096b8:	f800283a 	ret

080096bc <__sprint_r.part.0>:
 80096bc:	28801917 	ldw	r2,100(r5)
 80096c0:	defff604 	addi	sp,sp,-40
 80096c4:	dd400515 	stw	r21,20(sp)
 80096c8:	dcc00315 	stw	r19,12(sp)
 80096cc:	dfc00915 	stw	ra,36(sp)
 80096d0:	df000815 	stw	fp,32(sp)
 80096d4:	ddc00715 	stw	r23,28(sp)
 80096d8:	dd800615 	stw	r22,24(sp)
 80096dc:	dd000415 	stw	r20,16(sp)
 80096e0:	dc800215 	stw	r18,8(sp)
 80096e4:	dc400115 	stw	r17,4(sp)
 80096e8:	dc000015 	stw	r16,0(sp)
 80096ec:	1088000c 	andi	r2,r2,8192
 80096f0:	2827883a 	mov	r19,r5
 80096f4:	302b883a 	mov	r21,r6
 80096f8:	10002d26 	beq	r2,zero,80097b0 <__sprint_r.part.0+0xf4>
 80096fc:	30800217 	ldw	r2,8(r6)
 8009700:	35800017 	ldw	r22,0(r6)
 8009704:	10002826 	beq	r2,zero,80097a8 <__sprint_r.part.0+0xec>
 8009708:	2029883a 	mov	r20,r4
 800970c:	b5c00104 	addi	r23,r22,4
 8009710:	04bfffc4 	movi	r18,-1
 8009714:	bc400017 	ldw	r17,0(r23)
 8009718:	b4000017 	ldw	r16,0(r22)
 800971c:	0039883a 	mov	fp,zero
 8009720:	8822d0ba 	srli	r17,r17,2
 8009724:	04400316 	blt	zero,r17,8009734 <__sprint_r.part.0+0x78>
 8009728:	00001706 	br	8009788 <__sprint_r.part.0+0xcc>
 800972c:	84000104 	addi	r16,r16,4
 8009730:	8f001526 	beq	r17,fp,8009788 <__sprint_r.part.0+0xcc>
 8009734:	81400017 	ldw	r5,0(r16)
 8009738:	a009883a 	mov	r4,r20
 800973c:	980d883a 	mov	r6,r19
 8009740:	800aeb40 	call	800aeb4 <_fputwc_r>
 8009744:	e7000044 	addi	fp,fp,1
 8009748:	14bff81e 	bne	r2,r18,800972c <__alt_data_end+0xfc00972c>
 800974c:	9005883a 	mov	r2,r18
 8009750:	a8000215 	stw	zero,8(r21)
 8009754:	a8000115 	stw	zero,4(r21)
 8009758:	dfc00917 	ldw	ra,36(sp)
 800975c:	df000817 	ldw	fp,32(sp)
 8009760:	ddc00717 	ldw	r23,28(sp)
 8009764:	dd800617 	ldw	r22,24(sp)
 8009768:	dd400517 	ldw	r21,20(sp)
 800976c:	dd000417 	ldw	r20,16(sp)
 8009770:	dcc00317 	ldw	r19,12(sp)
 8009774:	dc800217 	ldw	r18,8(sp)
 8009778:	dc400117 	ldw	r17,4(sp)
 800977c:	dc000017 	ldw	r16,0(sp)
 8009780:	dec00a04 	addi	sp,sp,40
 8009784:	f800283a 	ret
 8009788:	a8c00217 	ldw	r3,8(r21)
 800978c:	8c63883a 	add	r17,r17,r17
 8009790:	8c63883a 	add	r17,r17,r17
 8009794:	1c45c83a 	sub	r2,r3,r17
 8009798:	a8800215 	stw	r2,8(r21)
 800979c:	b5800204 	addi	r22,r22,8
 80097a0:	bdc00204 	addi	r23,r23,8
 80097a4:	103fdb1e 	bne	r2,zero,8009714 <__alt_data_end+0xfc009714>
 80097a8:	0005883a 	mov	r2,zero
 80097ac:	003fe806 	br	8009750 <__alt_data_end+0xfc009750>
 80097b0:	80069380 	call	8006938 <__sfvwrite_r>
 80097b4:	003fe606 	br	8009750 <__alt_data_end+0xfc009750>

080097b8 <__sprint_r>:
 80097b8:	30c00217 	ldw	r3,8(r6)
 80097bc:	18000126 	beq	r3,zero,80097c4 <__sprint_r+0xc>
 80097c0:	80096bc1 	jmpi	80096bc <__sprint_r.part.0>
 80097c4:	30000115 	stw	zero,4(r6)
 80097c8:	0005883a 	mov	r2,zero
 80097cc:	f800283a 	ret

080097d0 <___vfiprintf_internal_r>:
 80097d0:	defeca04 	addi	sp,sp,-1240
 80097d4:	dcc12f15 	stw	r19,1212(sp)
 80097d8:	dfc13515 	stw	ra,1236(sp)
 80097dc:	df013415 	stw	fp,1232(sp)
 80097e0:	ddc13315 	stw	r23,1228(sp)
 80097e4:	dd813215 	stw	r22,1224(sp)
 80097e8:	dd413115 	stw	r21,1220(sp)
 80097ec:	dd013015 	stw	r20,1216(sp)
 80097f0:	dc812e15 	stw	r18,1208(sp)
 80097f4:	dc412d15 	stw	r17,1204(sp)
 80097f8:	dc012c15 	stw	r16,1200(sp)
 80097fc:	d9012115 	stw	r4,1156(sp)
 8009800:	d9412015 	stw	r5,1152(sp)
 8009804:	d9c12315 	stw	r7,1164(sp)
 8009808:	3027883a 	mov	r19,r6
 800980c:	20000226 	beq	r4,zero,8009818 <___vfiprintf_internal_r+0x48>
 8009810:	20800e17 	ldw	r2,56(r4)
 8009814:	1000f726 	beq	r2,zero,8009bf4 <___vfiprintf_internal_r+0x424>
 8009818:	d8812017 	ldw	r2,1152(sp)
 800981c:	10c0030b 	ldhu	r3,12(r2)
 8009820:	1908000c 	andi	r4,r3,8192
 8009824:	1805883a 	mov	r2,r3
 8009828:	2000081e 	bne	r4,zero,800984c <___vfiprintf_internal_r+0x7c>
 800982c:	d9412017 	ldw	r5,1152(sp)
 8009830:	18880014 	ori	r2,r3,8192
 8009834:	00f7ffc4 	movi	r3,-8193
 8009838:	29001917 	ldw	r4,100(r5)
 800983c:	2880030d 	sth	r2,12(r5)
 8009840:	20c8703a 	and	r4,r4,r3
 8009844:	29001915 	stw	r4,100(r5)
 8009848:	1007883a 	mov	r3,r2
 800984c:	1100020c 	andi	r4,r2,8
 8009850:	2000a726 	beq	r4,zero,8009af0 <___vfiprintf_internal_r+0x320>
 8009854:	d9412017 	ldw	r5,1152(sp)
 8009858:	29000417 	ldw	r4,16(r5)
 800985c:	2000a426 	beq	r4,zero,8009af0 <___vfiprintf_internal_r+0x320>
 8009860:	1080068c 	andi	r2,r2,26
 8009864:	01000284 	movi	r4,10
 8009868:	1100ab26 	beq	r2,r4,8009b18 <___vfiprintf_internal_r+0x348>
 800986c:	d9010a04 	addi	r4,sp,1064
 8009870:	d94109c4 	addi	r5,sp,1063
 8009874:	07020074 	movhi	fp,2049
 8009878:	04420074 	movhi	r17,2049
 800987c:	2145c83a 	sub	r2,r4,r5
 8009880:	e7072204 	addi	fp,fp,7304
 8009884:	8c471e04 	addi	r17,r17,7288
 8009888:	d9011e15 	stw	r4,1144(sp)
 800988c:	d9411f15 	stw	r5,1148(sp)
 8009890:	dec11a15 	stw	sp,1128(sp)
 8009894:	d8011c15 	stw	zero,1136(sp)
 8009898:	d8011b15 	stw	zero,1132(sp)
 800989c:	d8012715 	stw	zero,1180(sp)
 80098a0:	d8012515 	stw	zero,1172(sp)
 80098a4:	d811883a 	mov	r8,sp
 80098a8:	d8812815 	stw	r2,1184(sp)
 80098ac:	982f883a 	mov	r23,r19
 80098b0:	b8800007 	ldb	r2,0(r23)
 80098b4:	1003b026 	beq	r2,zero,800a778 <___vfiprintf_internal_r+0xfa8>
 80098b8:	01000944 	movi	r4,37
 80098bc:	1103ae26 	beq	r2,r4,800a778 <___vfiprintf_internal_r+0xfa8>
 80098c0:	b805883a 	mov	r2,r23
 80098c4:	00000106 	br	80098cc <___vfiprintf_internal_r+0xfc>
 80098c8:	19000326 	beq	r3,r4,80098d8 <___vfiprintf_internal_r+0x108>
 80098cc:	10800044 	addi	r2,r2,1
 80098d0:	10c00007 	ldb	r3,0(r2)
 80098d4:	183ffc1e 	bne	r3,zero,80098c8 <__alt_data_end+0xfc0098c8>
 80098d8:	15e1c83a 	sub	r16,r2,r23
 80098dc:	1029883a 	mov	r20,r2
 80098e0:	80001026 	beq	r16,zero,8009924 <___vfiprintf_internal_r+0x154>
 80098e4:	d8c11c17 	ldw	r3,1136(sp)
 80098e8:	d8811b17 	ldw	r2,1132(sp)
 80098ec:	45c00015 	stw	r23,0(r8)
 80098f0:	80c7883a 	add	r3,r16,r3
 80098f4:	10800044 	addi	r2,r2,1
 80098f8:	44000115 	stw	r16,4(r8)
 80098fc:	d8c11c15 	stw	r3,1136(sp)
 8009900:	d8811b15 	stw	r2,1132(sp)
 8009904:	010001c4 	movi	r4,7
 8009908:	2080740e 	bge	r4,r2,8009adc <___vfiprintf_internal_r+0x30c>
 800990c:	1803a71e 	bne	r3,zero,800a7ac <___vfiprintf_internal_r+0xfdc>
 8009910:	d8c12517 	ldw	r3,1172(sp)
 8009914:	d8011b15 	stw	zero,1132(sp)
 8009918:	d811883a 	mov	r8,sp
 800991c:	1c07883a 	add	r3,r3,r16
 8009920:	d8c12515 	stw	r3,1172(sp)
 8009924:	a0800007 	ldb	r2,0(r20)
 8009928:	1002bf26 	beq	r2,zero,800a428 <___vfiprintf_internal_r+0xc58>
 800992c:	a5c00044 	addi	r23,r20,1
 8009930:	a1800047 	ldb	r6,1(r20)
 8009934:	d8011d85 	stb	zero,1142(sp)
 8009938:	d8012205 	stb	zero,1160(sp)
 800993c:	043fffc4 	movi	r16,-1
 8009940:	d8012415 	stw	zero,1168(sp)
 8009944:	0025883a 	mov	r18,zero
 8009948:	05001604 	movi	r20,88
 800994c:	05400244 	movi	r21,9
 8009950:	4027883a 	mov	r19,r8
 8009954:	bdc00044 	addi	r23,r23,1
 8009958:	30bff804 	addi	r2,r6,-32
 800995c:	a0825636 	bltu	r20,r2,800a2b8 <___vfiprintf_internal_r+0xae8>
 8009960:	100490ba 	slli	r2,r2,2
 8009964:	01020074 	movhi	r4,2049
 8009968:	21265e04 	addi	r4,r4,-26248
 800996c:	1105883a 	add	r2,r2,r4
 8009970:	10800017 	ldw	r2,0(r2)
 8009974:	1000683a 	jmp	r2
 8009978:	0800a248 	cmpgei	zero,at,649
 800997c:	0800a2b8 	rdprs	zero,at,650
 8009980:	0800a2b8 	rdprs	zero,at,650
 8009984:	0800a2ac 	andhi	zero,at,650
 8009988:	0800a2b8 	rdprs	zero,at,650
 800998c:	0800a2b8 	rdprs	zero,at,650
 8009990:	0800a2b8 	rdprs	zero,at,650
 8009994:	0800a2b8 	rdprs	zero,at,650
 8009998:	0800a2b8 	rdprs	zero,at,650
 800999c:	0800a2b8 	rdprs	zero,at,650
 80099a0:	0800a038 	rdprs	zero,at,640
 80099a4:	0800a260 	cmpeqi	zero,at,649
 80099a8:	0800a2b8 	rdprs	zero,at,650
 80099ac:	08009c0c 	andi	zero,at,624
 80099b0:	0800a05c 	xori	zero,at,641
 80099b4:	0800a2b8 	rdprs	zero,at,650
 80099b8:	08009c18 	cmpnei	zero,at,624
 80099bc:	08009c24 	muli	zero,at,624
 80099c0:	08009c24 	muli	zero,at,624
 80099c4:	08009c24 	muli	zero,at,624
 80099c8:	08009c24 	muli	zero,at,624
 80099cc:	08009c24 	muli	zero,at,624
 80099d0:	08009c24 	muli	zero,at,624
 80099d4:	08009c24 	muli	zero,at,624
 80099d8:	08009c24 	muli	zero,at,624
 80099dc:	08009c24 	muli	zero,at,624
 80099e0:	0800a2b8 	rdprs	zero,at,650
 80099e4:	0800a2b8 	rdprs	zero,at,650
 80099e8:	0800a2b8 	rdprs	zero,at,650
 80099ec:	0800a2b8 	rdprs	zero,at,650
 80099f0:	0800a2b8 	rdprs	zero,at,650
 80099f4:	0800a2b8 	rdprs	zero,at,650
 80099f8:	0800a2b8 	rdprs	zero,at,650
 80099fc:	0800a2b8 	rdprs	zero,at,650
 8009a00:	0800a2b8 	rdprs	zero,at,650
 8009a04:	0800a2b8 	rdprs	zero,at,650
 8009a08:	08009c64 	muli	zero,at,625
 8009a0c:	0800a2b8 	rdprs	zero,at,650
 8009a10:	0800a2b8 	rdprs	zero,at,650
 8009a14:	0800a2b8 	rdprs	zero,at,650
 8009a18:	0800a2b8 	rdprs	zero,at,650
 8009a1c:	0800a2b8 	rdprs	zero,at,650
 8009a20:	0800a2b8 	rdprs	zero,at,650
 8009a24:	0800a2b8 	rdprs	zero,at,650
 8009a28:	0800a2b8 	rdprs	zero,at,650
 8009a2c:	0800a2b8 	rdprs	zero,at,650
 8009a30:	0800a2b8 	rdprs	zero,at,650
 8009a34:	08009f54 	ori	zero,at,637
 8009a38:	0800a2b8 	rdprs	zero,at,650
 8009a3c:	0800a2b8 	rdprs	zero,at,650
 8009a40:	0800a2b8 	rdprs	zero,at,650
 8009a44:	0800a2b8 	rdprs	zero,at,650
 8009a48:	0800a2b8 	rdprs	zero,at,650
 8009a4c:	08009f94 	ori	zero,at,638
 8009a50:	0800a2b8 	rdprs	zero,at,650
 8009a54:	0800a2b8 	rdprs	zero,at,650
 8009a58:	08009fd8 	cmpnei	zero,at,639
 8009a5c:	0800a2b8 	rdprs	zero,at,650
 8009a60:	0800a2b8 	rdprs	zero,at,650
 8009a64:	0800a2b8 	rdprs	zero,at,650
 8009a68:	0800a2b8 	rdprs	zero,at,650
 8009a6c:	0800a2b8 	rdprs	zero,at,650
 8009a70:	0800a2b8 	rdprs	zero,at,650
 8009a74:	0800a2b8 	rdprs	zero,at,650
 8009a78:	0800a2b8 	rdprs	zero,at,650
 8009a7c:	0800a2b8 	rdprs	zero,at,650
 8009a80:	0800a2b8 	rdprs	zero,at,650
 8009a84:	08009f20 	cmpeqi	zero,at,636
 8009a88:	0800a270 	cmpltui	zero,at,649
 8009a8c:	0800a2b8 	rdprs	zero,at,650
 8009a90:	0800a2b8 	rdprs	zero,at,650
 8009a94:	0800a2b8 	rdprs	zero,at,650
 8009a98:	0800a0ac 	andhi	zero,at,642
 8009a9c:	0800a270 	cmpltui	zero,at,649
 8009aa0:	0800a2b8 	rdprs	zero,at,650
 8009aa4:	0800a2b8 	rdprs	zero,at,650
 8009aa8:	08009fc4 	addi	zero,at,639
 8009aac:	0800a2b8 	rdprs	zero,at,650
 8009ab0:	0800a210 	cmplti	zero,at,648
 8009ab4:	0800a198 	cmpnei	zero,at,646
 8009ab8:	0800a1cc 	andi	zero,at,647
 8009abc:	0800a0b8 	rdprs	zero,at,642
 8009ac0:	0800a2b8 	rdprs	zero,at,650
 8009ac4:	0800a0c4 	addi	zero,at,643
 8009ac8:	0800a2b8 	rdprs	zero,at,650
 8009acc:	0800a120 	cmpeqi	zero,at,644
 8009ad0:	0800a2b8 	rdprs	zero,at,650
 8009ad4:	0800a2b8 	rdprs	zero,at,650
 8009ad8:	0800a154 	ori	zero,at,645
 8009adc:	42000204 	addi	r8,r8,8
 8009ae0:	d8c12517 	ldw	r3,1172(sp)
 8009ae4:	1c07883a 	add	r3,r3,r16
 8009ae8:	d8c12515 	stw	r3,1172(sp)
 8009aec:	003f8d06 	br	8009924 <__alt_data_end+0xfc009924>
 8009af0:	d9012117 	ldw	r4,1156(sp)
 8009af4:	d9412017 	ldw	r5,1152(sp)
 8009af8:	80044980 	call	8004498 <__swsetup_r>
 8009afc:	1000301e 	bne	r2,zero,8009bc0 <___vfiprintf_internal_r+0x3f0>
 8009b00:	d8812017 	ldw	r2,1152(sp)
 8009b04:	01000284 	movi	r4,10
 8009b08:	10c0030b 	ldhu	r3,12(r2)
 8009b0c:	1805883a 	mov	r2,r3
 8009b10:	1080068c 	andi	r2,r2,26
 8009b14:	113f551e 	bne	r2,r4,800986c <__alt_data_end+0xfc00986c>
 8009b18:	d9012017 	ldw	r4,1152(sp)
 8009b1c:	2080038b 	ldhu	r2,14(r4)
 8009b20:	113fffcc 	andi	r4,r2,65535
 8009b24:	2120001c 	xori	r4,r4,32768
 8009b28:	21200004 	addi	r4,r4,-32768
 8009b2c:	203f4f16 	blt	r4,zero,800986c <__alt_data_end+0xfc00986c>
 8009b30:	d9412017 	ldw	r5,1152(sp)
 8009b34:	d9012117 	ldw	r4,1156(sp)
 8009b38:	d9c12317 	ldw	r7,1164(sp)
 8009b3c:	2b001917 	ldw	r12,100(r5)
 8009b40:	2ac00717 	ldw	r11,28(r5)
 8009b44:	2a800917 	ldw	r10,36(r5)
 8009b48:	02010004 	movi	r8,1024
 8009b4c:	18ffff4c 	andi	r3,r3,65533
 8009b50:	da0b883a 	add	r5,sp,r8
 8009b54:	980d883a 	mov	r6,r19
 8009b58:	d8c1030d 	sth	r3,1036(sp)
 8009b5c:	db011915 	stw	r12,1124(sp)
 8009b60:	d881038d 	sth	r2,1038(sp)
 8009b64:	dac10715 	stw	r11,1052(sp)
 8009b68:	da810915 	stw	r10,1060(sp)
 8009b6c:	dec10015 	stw	sp,1024(sp)
 8009b70:	dec10415 	stw	sp,1040(sp)
 8009b74:	da010215 	stw	r8,1032(sp)
 8009b78:	da010515 	stw	r8,1044(sp)
 8009b7c:	d8010615 	stw	zero,1048(sp)
 8009b80:	80097d00 	call	80097d0 <___vfiprintf_internal_r>
 8009b84:	1021883a 	mov	r16,r2
 8009b88:	10000416 	blt	r2,zero,8009b9c <___vfiprintf_internal_r+0x3cc>
 8009b8c:	d9012117 	ldw	r4,1156(sp)
 8009b90:	d9410004 	addi	r5,sp,1024
 8009b94:	8005f180 	call	8005f18 <_fflush_r>
 8009b98:	10040f1e 	bne	r2,zero,800abd8 <___vfiprintf_internal_r+0x1408>
 8009b9c:	d881030b 	ldhu	r2,1036(sp)
 8009ba0:	1080100c 	andi	r2,r2,64
 8009ba4:	10000426 	beq	r2,zero,8009bb8 <___vfiprintf_internal_r+0x3e8>
 8009ba8:	d8c12017 	ldw	r3,1152(sp)
 8009bac:	1880030b 	ldhu	r2,12(r3)
 8009bb0:	10801014 	ori	r2,r2,64
 8009bb4:	1880030d 	sth	r2,12(r3)
 8009bb8:	8005883a 	mov	r2,r16
 8009bbc:	00000106 	br	8009bc4 <___vfiprintf_internal_r+0x3f4>
 8009bc0:	00bfffc4 	movi	r2,-1
 8009bc4:	dfc13517 	ldw	ra,1236(sp)
 8009bc8:	df013417 	ldw	fp,1232(sp)
 8009bcc:	ddc13317 	ldw	r23,1228(sp)
 8009bd0:	dd813217 	ldw	r22,1224(sp)
 8009bd4:	dd413117 	ldw	r21,1220(sp)
 8009bd8:	dd013017 	ldw	r20,1216(sp)
 8009bdc:	dcc12f17 	ldw	r19,1212(sp)
 8009be0:	dc812e17 	ldw	r18,1208(sp)
 8009be4:	dc412d17 	ldw	r17,1204(sp)
 8009be8:	dc012c17 	ldw	r16,1200(sp)
 8009bec:	dec13604 	addi	sp,sp,1240
 8009bf0:	f800283a 	ret
 8009bf4:	80064d40 	call	80064d4 <__sinit>
 8009bf8:	003f0706 	br	8009818 <__alt_data_end+0xfc009818>
 8009bfc:	d8c12417 	ldw	r3,1168(sp)
 8009c00:	d8812315 	stw	r2,1164(sp)
 8009c04:	00c7c83a 	sub	r3,zero,r3
 8009c08:	d8c12415 	stw	r3,1168(sp)
 8009c0c:	94800114 	ori	r18,r18,4
 8009c10:	b9800007 	ldb	r6,0(r23)
 8009c14:	003f4f06 	br	8009954 <__alt_data_end+0xfc009954>
 8009c18:	94802014 	ori	r18,r18,128
 8009c1c:	b9800007 	ldb	r6,0(r23)
 8009c20:	003f4c06 	br	8009954 <__alt_data_end+0xfc009954>
 8009c24:	dc012615 	stw	r16,1176(sp)
 8009c28:	d8012415 	stw	zero,1168(sp)
 8009c2c:	35bff404 	addi	r22,r6,-48
 8009c30:	0009883a 	mov	r4,zero
 8009c34:	b821883a 	mov	r16,r23
 8009c38:	01400284 	movi	r5,10
 8009c3c:	800c2ec0 	call	800c2ec <__mulsi3>
 8009c40:	81800007 	ldb	r6,0(r16)
 8009c44:	1589883a 	add	r4,r2,r22
 8009c48:	bdc00044 	addi	r23,r23,1
 8009c4c:	35bff404 	addi	r22,r6,-48
 8009c50:	b821883a 	mov	r16,r23
 8009c54:	adbff82e 	bgeu	r21,r22,8009c38 <__alt_data_end+0xfc009c38>
 8009c58:	d9012415 	stw	r4,1168(sp)
 8009c5c:	dc012617 	ldw	r16,1176(sp)
 8009c60:	003f3d06 	br	8009958 <__alt_data_end+0xfc009958>
 8009c64:	d8c12203 	ldbu	r3,1160(sp)
 8009c68:	94800414 	ori	r18,r18,16
 8009c6c:	9080080c 	andi	r2,r18,32
 8009c70:	d8c11d85 	stb	r3,1142(sp)
 8009c74:	9811883a 	mov	r8,r19
 8009c78:	d8c12317 	ldw	r3,1164(sp)
 8009c7c:	10018226 	beq	r2,zero,800a288 <___vfiprintf_internal_r+0xab8>
 8009c80:	d9012317 	ldw	r4,1164(sp)
 8009c84:	18800117 	ldw	r2,4(r3)
 8009c88:	1cc00017 	ldw	r19,0(r3)
 8009c8c:	21000204 	addi	r4,r4,8
 8009c90:	d9012315 	stw	r4,1164(sp)
 8009c94:	102b883a 	mov	r21,r2
 8009c98:	10030016 	blt	r2,zero,800a89c <___vfiprintf_internal_r+0x10cc>
 8009c9c:	dd811d83 	ldbu	r22,1142(sp)
 8009ca0:	8029883a 	mov	r20,r16
 8009ca4:	00800044 	movi	r2,1
 8009ca8:	9d46b03a 	or	r3,r19,r21
 8009cac:	80000216 	blt	r16,zero,8009cb8 <___vfiprintf_internal_r+0x4e8>
 8009cb0:	013fdfc4 	movi	r4,-129
 8009cb4:	9124703a 	and	r18,r18,r4
 8009cb8:	1801b41e 	bne	r3,zero,800a38c <___vfiprintf_internal_r+0xbbc>
 8009cbc:	80028126 	beq	r16,zero,800a6c4 <___vfiprintf_internal_r+0xef4>
 8009cc0:	10803fcc 	andi	r2,r2,255
 8009cc4:	00c00044 	movi	r3,1
 8009cc8:	10c1d126 	beq	r2,r3,800a410 <___vfiprintf_internal_r+0xc40>
 8009ccc:	00c00084 	movi	r3,2
 8009cd0:	10c28626 	beq	r2,r3,800a6ec <___vfiprintf_internal_r+0xf1c>
 8009cd4:	d8c10a04 	addi	r3,sp,1064
 8009cd8:	9808d0fa 	srli	r4,r19,3
 8009cdc:	a80a977a 	slli	r5,r21,29
 8009ce0:	a82ad0fa 	srli	r21,r21,3
 8009ce4:	9cc001cc 	andi	r19,r19,7
 8009ce8:	98800c04 	addi	r2,r19,48
 8009cec:	18ffffc4 	addi	r3,r3,-1
 8009cf0:	2926b03a 	or	r19,r5,r4
 8009cf4:	18800005 	stb	r2,0(r3)
 8009cf8:	9d48b03a 	or	r4,r19,r21
 8009cfc:	203ff61e 	bne	r4,zero,8009cd8 <__alt_data_end+0xfc009cd8>
 8009d00:	9100004c 	andi	r4,r18,1
 8009d04:	d8c12215 	stw	r3,1160(sp)
 8009d08:	2002b31e 	bne	r4,zero,800a7d8 <___vfiprintf_internal_r+0x1008>
 8009d0c:	d9411e17 	ldw	r5,1144(sp)
 8009d10:	28e9c83a 	sub	r20,r5,r3
 8009d14:	a02b883a 	mov	r21,r20
 8009d18:	a400010e 	bge	r20,r16,8009d20 <___vfiprintf_internal_r+0x550>
 8009d1c:	802b883a 	mov	r21,r16
 8009d20:	b5803fcc 	andi	r22,r22,255
 8009d24:	b580201c 	xori	r22,r22,128
 8009d28:	b5bfe004 	addi	r22,r22,-128
 8009d2c:	b0000126 	beq	r22,zero,8009d34 <___vfiprintf_internal_r+0x564>
 8009d30:	ad400044 	addi	r21,r21,1
 8009d34:	9280008c 	andi	r10,r18,2
 8009d38:	50000126 	beq	r10,zero,8009d40 <___vfiprintf_internal_r+0x570>
 8009d3c:	ad400084 	addi	r21,r21,2
 8009d40:	9580210c 	andi	r22,r18,132
 8009d44:	b001751e 	bne	r22,zero,800a31c <___vfiprintf_internal_r+0xb4c>
 8009d48:	d9012417 	ldw	r4,1168(sp)
 8009d4c:	2567c83a 	sub	r19,r4,r21
 8009d50:	04c1720e 	bge	zero,r19,800a31c <___vfiprintf_internal_r+0xb4c>
 8009d54:	01c00404 	movi	r7,16
 8009d58:	d8c11c17 	ldw	r3,1136(sp)
 8009d5c:	3cc36b0e 	bge	r7,r19,800ab0c <___vfiprintf_internal_r+0x133c>
 8009d60:	00820074 	movhi	r2,2049
 8009d64:	10872204 	addi	r2,r2,7304
 8009d68:	dc012915 	stw	r16,1188(sp)
 8009d6c:	d9011b17 	ldw	r4,1132(sp)
 8009d70:	9821883a 	mov	r16,r19
 8009d74:	d8812615 	stw	r2,1176(sp)
 8009d78:	030001c4 	movi	r12,7
 8009d7c:	5027883a 	mov	r19,r10
 8009d80:	00000506 	br	8009d98 <___vfiprintf_internal_r+0x5c8>
 8009d84:	21400084 	addi	r5,r4,2
 8009d88:	42000204 	addi	r8,r8,8
 8009d8c:	1009883a 	mov	r4,r2
 8009d90:	843ffc04 	addi	r16,r16,-16
 8009d94:	3c000d0e 	bge	r7,r16,8009dcc <___vfiprintf_internal_r+0x5fc>
 8009d98:	18c00404 	addi	r3,r3,16
 8009d9c:	20800044 	addi	r2,r4,1
 8009da0:	47000015 	stw	fp,0(r8)
 8009da4:	41c00115 	stw	r7,4(r8)
 8009da8:	d8c11c15 	stw	r3,1136(sp)
 8009dac:	d8811b15 	stw	r2,1132(sp)
 8009db0:	60bff40e 	bge	r12,r2,8009d84 <__alt_data_end+0xfc009d84>
 8009db4:	18014b1e 	bne	r3,zero,800a2e4 <___vfiprintf_internal_r+0xb14>
 8009db8:	843ffc04 	addi	r16,r16,-16
 8009dbc:	0009883a 	mov	r4,zero
 8009dc0:	01400044 	movi	r5,1
 8009dc4:	d811883a 	mov	r8,sp
 8009dc8:	3c3ff316 	blt	r7,r16,8009d98 <__alt_data_end+0xfc009d98>
 8009dcc:	9815883a 	mov	r10,r19
 8009dd0:	8027883a 	mov	r19,r16
 8009dd4:	dc012917 	ldw	r16,1188(sp)
 8009dd8:	d9012617 	ldw	r4,1176(sp)
 8009ddc:	98c7883a 	add	r3,r19,r3
 8009de0:	44c00115 	stw	r19,4(r8)
 8009de4:	41000015 	stw	r4,0(r8)
 8009de8:	d8c11c15 	stw	r3,1136(sp)
 8009dec:	d9411b15 	stw	r5,1132(sp)
 8009df0:	008001c4 	movi	r2,7
 8009df4:	11425116 	blt	r2,r5,800a73c <___vfiprintf_internal_r+0xf6c>
 8009df8:	d9011d87 	ldb	r4,1142(sp)
 8009dfc:	42000204 	addi	r8,r8,8
 8009e00:	28800044 	addi	r2,r5,1
 8009e04:	20014a1e 	bne	r4,zero,800a330 <___vfiprintf_internal_r+0xb60>
 8009e08:	50000c26 	beq	r10,zero,8009e3c <___vfiprintf_internal_r+0x66c>
 8009e0c:	d9011d04 	addi	r4,sp,1140
 8009e10:	18c00084 	addi	r3,r3,2
 8009e14:	41000015 	stw	r4,0(r8)
 8009e18:	01000084 	movi	r4,2
 8009e1c:	41000115 	stw	r4,4(r8)
 8009e20:	d8c11c15 	stw	r3,1136(sp)
 8009e24:	d8811b15 	stw	r2,1132(sp)
 8009e28:	010001c4 	movi	r4,7
 8009e2c:	20822016 	blt	r4,r2,800a6b0 <___vfiprintf_internal_r+0xee0>
 8009e30:	100b883a 	mov	r5,r2
 8009e34:	42000204 	addi	r8,r8,8
 8009e38:	10800044 	addi	r2,r2,1
 8009e3c:	01002004 	movi	r4,128
 8009e40:	b101de26 	beq	r22,r4,800a5bc <___vfiprintf_internal_r+0xdec>
 8009e44:	8521c83a 	sub	r16,r16,r20
 8009e48:	0400230e 	bge	zero,r16,8009ed8 <___vfiprintf_internal_r+0x708>
 8009e4c:	04c00404 	movi	r19,16
 8009e50:	9c030d0e 	bge	r19,r16,800aa88 <___vfiprintf_internal_r+0x12b8>
 8009e54:	00820074 	movhi	r2,2049
 8009e58:	10871e04 	addi	r2,r2,7288
 8009e5c:	d8812615 	stw	r2,1176(sp)
 8009e60:	058001c4 	movi	r22,7
 8009e64:	00000506 	br	8009e7c <___vfiprintf_internal_r+0x6ac>
 8009e68:	28800084 	addi	r2,r5,2
 8009e6c:	42000204 	addi	r8,r8,8
 8009e70:	200b883a 	mov	r5,r4
 8009e74:	843ffc04 	addi	r16,r16,-16
 8009e78:	9c000d0e 	bge	r19,r16,8009eb0 <___vfiprintf_internal_r+0x6e0>
 8009e7c:	18c00404 	addi	r3,r3,16
 8009e80:	29000044 	addi	r4,r5,1
 8009e84:	44400015 	stw	r17,0(r8)
 8009e88:	44c00115 	stw	r19,4(r8)
 8009e8c:	d8c11c15 	stw	r3,1136(sp)
 8009e90:	d9011b15 	stw	r4,1132(sp)
 8009e94:	b13ff40e 	bge	r22,r4,8009e68 <__alt_data_end+0xfc009e68>
 8009e98:	1801321e 	bne	r3,zero,800a364 <___vfiprintf_internal_r+0xb94>
 8009e9c:	843ffc04 	addi	r16,r16,-16
 8009ea0:	000b883a 	mov	r5,zero
 8009ea4:	00800044 	movi	r2,1
 8009ea8:	d811883a 	mov	r8,sp
 8009eac:	9c3ff316 	blt	r19,r16,8009e7c <__alt_data_end+0xfc009e7c>
 8009eb0:	d9012617 	ldw	r4,1176(sp)
 8009eb4:	1c07883a 	add	r3,r3,r16
 8009eb8:	44000115 	stw	r16,4(r8)
 8009ebc:	41000015 	stw	r4,0(r8)
 8009ec0:	d8c11c15 	stw	r3,1136(sp)
 8009ec4:	d8811b15 	stw	r2,1132(sp)
 8009ec8:	010001c4 	movi	r4,7
 8009ecc:	20816216 	blt	r4,r2,800a458 <___vfiprintf_internal_r+0xc88>
 8009ed0:	42000204 	addi	r8,r8,8
 8009ed4:	10800044 	addi	r2,r2,1
 8009ed8:	d9012217 	ldw	r4,1160(sp)
 8009edc:	1d07883a 	add	r3,r3,r20
 8009ee0:	45000115 	stw	r20,4(r8)
 8009ee4:	41000015 	stw	r4,0(r8)
 8009ee8:	d8c11c15 	stw	r3,1136(sp)
 8009eec:	d8811b15 	stw	r2,1132(sp)
 8009ef0:	010001c4 	movi	r4,7
 8009ef4:	2081610e 	bge	r4,r2,800a47c <___vfiprintf_internal_r+0xcac>
 8009ef8:	1802211e 	bne	r3,zero,800a780 <___vfiprintf_internal_r+0xfb0>
 8009efc:	d8011b15 	stw	zero,1132(sp)
 8009f00:	9480010c 	andi	r18,r18,4
 8009f04:	9002171e 	bne	r18,zero,800a764 <___vfiprintf_internal_r+0xf94>
 8009f08:	d9412417 	ldw	r5,1168(sp)
 8009f0c:	a9433716 	blt	r21,r5,800abec <___vfiprintf_internal_r+0x141c>
 8009f10:	d8812517 	ldw	r2,1172(sp)
 8009f14:	1545883a 	add	r2,r2,r21
 8009f18:	d8812515 	stw	r2,1172(sp)
 8009f1c:	00019a06 	br	800a588 <___vfiprintf_internal_r+0xdb8>
 8009f20:	d8c12317 	ldw	r3,1164(sp)
 8009f24:	05400044 	movi	r21,1
 8009f28:	9811883a 	mov	r8,r19
 8009f2c:	18800017 	ldw	r2,0(r3)
 8009f30:	18c00104 	addi	r3,r3,4
 8009f34:	d8c12315 	stw	r3,1164(sp)
 8009f38:	d8c10004 	addi	r3,sp,1024
 8009f3c:	d8011d85 	stb	zero,1142(sp)
 8009f40:	d8810005 	stb	r2,1024(sp)
 8009f44:	a829883a 	mov	r20,r21
 8009f48:	d8c12215 	stw	r3,1160(sp)
 8009f4c:	0021883a 	mov	r16,zero
 8009f50:	003f7806 	br	8009d34 <__alt_data_end+0xfc009d34>
 8009f54:	94800414 	ori	r18,r18,16
 8009f58:	9080080c 	andi	r2,r18,32
 8009f5c:	9811883a 	mov	r8,r19
 8009f60:	10009026 	beq	r2,zero,800a1a4 <___vfiprintf_internal_r+0x9d4>
 8009f64:	d8812317 	ldw	r2,1164(sp)
 8009f68:	d8c12317 	ldw	r3,1164(sp)
 8009f6c:	14c00017 	ldw	r19,0(r2)
 8009f70:	15400117 	ldw	r21,4(r2)
 8009f74:	18c00204 	addi	r3,r3,8
 8009f78:	d8c12315 	stw	r3,1164(sp)
 8009f7c:	0005883a 	mov	r2,zero
 8009f80:	9d46b03a 	or	r3,r19,r21
 8009f84:	d8011d85 	stb	zero,1142(sp)
 8009f88:	8029883a 	mov	r20,r16
 8009f8c:	002d883a 	mov	r22,zero
 8009f90:	003f4606 	br	8009cac <__alt_data_end+0xfc009cac>
 8009f94:	94800414 	ori	r18,r18,16
 8009f98:	9080080c 	andi	r2,r18,32
 8009f9c:	9811883a 	mov	r8,r19
 8009fa0:	10006226 	beq	r2,zero,800a12c <___vfiprintf_internal_r+0x95c>
 8009fa4:	d9012317 	ldw	r4,1164(sp)
 8009fa8:	00800044 	movi	r2,1
 8009fac:	24c00017 	ldw	r19,0(r4)
 8009fb0:	25400117 	ldw	r21,4(r4)
 8009fb4:	21000204 	addi	r4,r4,8
 8009fb8:	d9012315 	stw	r4,1164(sp)
 8009fbc:	9d46b03a 	or	r3,r19,r21
 8009fc0:	003ff006 	br	8009f84 <__alt_data_end+0xfc009f84>
 8009fc4:	b9800007 	ldb	r6,0(r23)
 8009fc8:	00801b04 	movi	r2,108
 8009fcc:	3082b226 	beq	r6,r2,800aa98 <___vfiprintf_internal_r+0x12c8>
 8009fd0:	94800414 	ori	r18,r18,16
 8009fd4:	003e5f06 	br	8009954 <__alt_data_end+0xfc009954>
 8009fd8:	d8c12203 	ldbu	r3,1160(sp)
 8009fdc:	01020074 	movhi	r4,2049
 8009fe0:	2106b804 	addi	r4,r4,6880
 8009fe4:	d8c11d85 	stb	r3,1142(sp)
 8009fe8:	d9012715 	stw	r4,1180(sp)
 8009fec:	90c0080c 	andi	r3,r18,32
 8009ff0:	9811883a 	mov	r8,r19
 8009ff4:	d8812317 	ldw	r2,1164(sp)
 8009ff8:	18005f26 	beq	r3,zero,800a178 <___vfiprintf_internal_r+0x9a8>
 8009ffc:	d9012317 	ldw	r4,1164(sp)
 800a000:	14c00017 	ldw	r19,0(r2)
 800a004:	15400117 	ldw	r21,4(r2)
 800a008:	21000204 	addi	r4,r4,8
 800a00c:	d9012315 	stw	r4,1164(sp)
 800a010:	9080004c 	andi	r2,r18,1
 800a014:	1001e226 	beq	r2,zero,800a7a0 <___vfiprintf_internal_r+0xfd0>
 800a018:	9d46b03a 	or	r3,r19,r21
 800a01c:	18024e26 	beq	r3,zero,800a958 <___vfiprintf_internal_r+0x1188>
 800a020:	00800c04 	movi	r2,48
 800a024:	d8811d05 	stb	r2,1140(sp)
 800a028:	d9811d45 	stb	r6,1141(sp)
 800a02c:	94800094 	ori	r18,r18,2
 800a030:	00800084 	movi	r2,2
 800a034:	003fd306 	br	8009f84 <__alt_data_end+0xfc009f84>
 800a038:	d9012317 	ldw	r4,1164(sp)
 800a03c:	d9412317 	ldw	r5,1164(sp)
 800a040:	21000017 	ldw	r4,0(r4)
 800a044:	28800104 	addi	r2,r5,4
 800a048:	d9012415 	stw	r4,1168(sp)
 800a04c:	203eeb16 	blt	r4,zero,8009bfc <__alt_data_end+0xfc009bfc>
 800a050:	d8812315 	stw	r2,1164(sp)
 800a054:	b9800007 	ldb	r6,0(r23)
 800a058:	003e3e06 	br	8009954 <__alt_data_end+0xfc009954>
 800a05c:	b9800007 	ldb	r6,0(r23)
 800a060:	01000a84 	movi	r4,42
 800a064:	b8800044 	addi	r2,r23,1
 800a068:	3102d226 	beq	r6,r4,800abb4 <___vfiprintf_internal_r+0x13e4>
 800a06c:	35bff404 	addi	r22,r6,-48
 800a070:	102f883a 	mov	r23,r2
 800a074:	0021883a 	mov	r16,zero
 800a078:	adbe3736 	bltu	r21,r22,8009958 <__alt_data_end+0xfc009958>
 800a07c:	0009883a 	mov	r4,zero
 800a080:	01400284 	movi	r5,10
 800a084:	800c2ec0 	call	800c2ec <__mulsi3>
 800a088:	b9800007 	ldb	r6,0(r23)
 800a08c:	b089883a 	add	r4,r22,r2
 800a090:	bdc00044 	addi	r23,r23,1
 800a094:	35bff404 	addi	r22,r6,-48
 800a098:	adbff92e 	bgeu	r21,r22,800a080 <__alt_data_end+0xfc00a080>
 800a09c:	2021883a 	mov	r16,r4
 800a0a0:	203e2d0e 	bge	r4,zero,8009958 <__alt_data_end+0xfc009958>
 800a0a4:	043fffc4 	movi	r16,-1
 800a0a8:	003e2b06 	br	8009958 <__alt_data_end+0xfc009958>
 800a0ac:	94801014 	ori	r18,r18,64
 800a0b0:	b9800007 	ldb	r6,0(r23)
 800a0b4:	003e2706 	br	8009954 <__alt_data_end+0xfc009954>
 800a0b8:	94800814 	ori	r18,r18,32
 800a0bc:	b9800007 	ldb	r6,0(r23)
 800a0c0:	003e2406 	br	8009954 <__alt_data_end+0xfc009954>
 800a0c4:	d9412317 	ldw	r5,1164(sp)
 800a0c8:	d8812317 	ldw	r2,1164(sp)
 800a0cc:	d8011d85 	stb	zero,1142(sp)
 800a0d0:	29400017 	ldw	r5,0(r5)
 800a0d4:	9811883a 	mov	r8,r19
 800a0d8:	14c00104 	addi	r19,r2,4
 800a0dc:	d9412215 	stw	r5,1160(sp)
 800a0e0:	28029026 	beq	r5,zero,800ab24 <___vfiprintf_internal_r+0x1354>
 800a0e4:	d9012217 	ldw	r4,1160(sp)
 800a0e8:	80027616 	blt	r16,zero,800aac4 <___vfiprintf_internal_r+0x12f4>
 800a0ec:	000b883a 	mov	r5,zero
 800a0f0:	800d883a 	mov	r6,r16
 800a0f4:	da012a15 	stw	r8,1192(sp)
 800a0f8:	800798c0 	call	800798c <memchr>
 800a0fc:	da012a17 	ldw	r8,1192(sp)
 800a100:	1002a026 	beq	r2,zero,800ab84 <___vfiprintf_internal_r+0x13b4>
 800a104:	d8c12217 	ldw	r3,1160(sp)
 800a108:	10e9c83a 	sub	r20,r2,r3
 800a10c:	85023816 	blt	r16,r20,800a9f0 <___vfiprintf_internal_r+0x1220>
 800a110:	dd811d83 	ldbu	r22,1142(sp)
 800a114:	dcc12315 	stw	r19,1164(sp)
 800a118:	0021883a 	mov	r16,zero
 800a11c:	003efd06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a120:	9080080c 	andi	r2,r18,32
 800a124:	9811883a 	mov	r8,r19
 800a128:	103f9e1e 	bne	r2,zero,8009fa4 <__alt_data_end+0xfc009fa4>
 800a12c:	9080040c 	andi	r2,r18,16
 800a130:	10021726 	beq	r2,zero,800a990 <___vfiprintf_internal_r+0x11c0>
 800a134:	d9412317 	ldw	r5,1164(sp)
 800a138:	002b883a 	mov	r21,zero
 800a13c:	00800044 	movi	r2,1
 800a140:	2cc00017 	ldw	r19,0(r5)
 800a144:	29400104 	addi	r5,r5,4
 800a148:	d9412315 	stw	r5,1164(sp)
 800a14c:	9807883a 	mov	r3,r19
 800a150:	003f8c06 	br	8009f84 <__alt_data_end+0xfc009f84>
 800a154:	d8c12203 	ldbu	r3,1160(sp)
 800a158:	01020074 	movhi	r4,2049
 800a15c:	2106bd04 	addi	r4,r4,6900
 800a160:	d8c11d85 	stb	r3,1142(sp)
 800a164:	d9012715 	stw	r4,1180(sp)
 800a168:	90c0080c 	andi	r3,r18,32
 800a16c:	9811883a 	mov	r8,r19
 800a170:	d8812317 	ldw	r2,1164(sp)
 800a174:	183fa11e 	bne	r3,zero,8009ffc <__alt_data_end+0xfc009ffc>
 800a178:	90c0040c 	andi	r3,r18,16
 800a17c:	1801e526 	beq	r3,zero,800a914 <___vfiprintf_internal_r+0x1144>
 800a180:	d9412317 	ldw	r5,1164(sp)
 800a184:	14c00017 	ldw	r19,0(r2)
 800a188:	002b883a 	mov	r21,zero
 800a18c:	29400104 	addi	r5,r5,4
 800a190:	d9412315 	stw	r5,1164(sp)
 800a194:	003f9e06 	br	800a010 <__alt_data_end+0xfc00a010>
 800a198:	9080080c 	andi	r2,r18,32
 800a19c:	9811883a 	mov	r8,r19
 800a1a0:	103f701e 	bne	r2,zero,8009f64 <__alt_data_end+0xfc009f64>
 800a1a4:	9080040c 	andi	r2,r18,16
 800a1a8:	1001ef26 	beq	r2,zero,800a968 <___vfiprintf_internal_r+0x1198>
 800a1ac:	d9012317 	ldw	r4,1164(sp)
 800a1b0:	002b883a 	mov	r21,zero
 800a1b4:	0005883a 	mov	r2,zero
 800a1b8:	24c00017 	ldw	r19,0(r4)
 800a1bc:	21000104 	addi	r4,r4,4
 800a1c0:	d9012315 	stw	r4,1164(sp)
 800a1c4:	9807883a 	mov	r3,r19
 800a1c8:	003f6e06 	br	8009f84 <__alt_data_end+0xfc009f84>
 800a1cc:	d8c12317 	ldw	r3,1164(sp)
 800a1d0:	9811883a 	mov	r8,r19
 800a1d4:	00800c04 	movi	r2,48
 800a1d8:	1cc00017 	ldw	r19,0(r3)
 800a1dc:	01020074 	movhi	r4,2049
 800a1e0:	18c00104 	addi	r3,r3,4
 800a1e4:	d8811d05 	stb	r2,1140(sp)
 800a1e8:	2106bd04 	addi	r4,r4,6900
 800a1ec:	00801e04 	movi	r2,120
 800a1f0:	d8811d45 	stb	r2,1141(sp)
 800a1f4:	d8c12315 	stw	r3,1164(sp)
 800a1f8:	002b883a 	mov	r21,zero
 800a1fc:	94800094 	ori	r18,r18,2
 800a200:	d9012715 	stw	r4,1180(sp)
 800a204:	00800084 	movi	r2,2
 800a208:	9807883a 	mov	r3,r19
 800a20c:	003f5d06 	br	8009f84 <__alt_data_end+0xfc009f84>
 800a210:	d8c12203 	ldbu	r3,1160(sp)
 800a214:	9080080c 	andi	r2,r18,32
 800a218:	9811883a 	mov	r8,r19
 800a21c:	d8c11d85 	stb	r3,1142(sp)
 800a220:	1001b126 	beq	r2,zero,800a8e8 <___vfiprintf_internal_r+0x1118>
 800a224:	d9012317 	ldw	r4,1164(sp)
 800a228:	d9412517 	ldw	r5,1172(sp)
 800a22c:	20800017 	ldw	r2,0(r4)
 800a230:	2807d7fa 	srai	r3,r5,31
 800a234:	21000104 	addi	r4,r4,4
 800a238:	d9012315 	stw	r4,1164(sp)
 800a23c:	11400015 	stw	r5,0(r2)
 800a240:	10c00115 	stw	r3,4(r2)
 800a244:	003d9a06 	br	80098b0 <__alt_data_end+0xfc0098b0>
 800a248:	d8812207 	ldb	r2,1160(sp)
 800a24c:	1001c41e 	bne	r2,zero,800a960 <___vfiprintf_internal_r+0x1190>
 800a250:	00c00804 	movi	r3,32
 800a254:	d8c12205 	stb	r3,1160(sp)
 800a258:	b9800007 	ldb	r6,0(r23)
 800a25c:	003dbd06 	br	8009954 <__alt_data_end+0xfc009954>
 800a260:	00c00ac4 	movi	r3,43
 800a264:	d8c12205 	stb	r3,1160(sp)
 800a268:	b9800007 	ldb	r6,0(r23)
 800a26c:	003db906 	br	8009954 <__alt_data_end+0xfc009954>
 800a270:	d8c12203 	ldbu	r3,1160(sp)
 800a274:	9080080c 	andi	r2,r18,32
 800a278:	9811883a 	mov	r8,r19
 800a27c:	d8c11d85 	stb	r3,1142(sp)
 800a280:	d8c12317 	ldw	r3,1164(sp)
 800a284:	103e7e1e 	bne	r2,zero,8009c80 <__alt_data_end+0xfc009c80>
 800a288:	9080040c 	andi	r2,r18,16
 800a28c:	1001a926 	beq	r2,zero,800a934 <___vfiprintf_internal_r+0x1164>
 800a290:	1cc00017 	ldw	r19,0(r3)
 800a294:	d9412317 	ldw	r5,1164(sp)
 800a298:	982bd7fa 	srai	r21,r19,31
 800a29c:	29400104 	addi	r5,r5,4
 800a2a0:	d9412315 	stw	r5,1164(sp)
 800a2a4:	a805883a 	mov	r2,r21
 800a2a8:	003e7b06 	br	8009c98 <__alt_data_end+0xfc009c98>
 800a2ac:	94800054 	ori	r18,r18,1
 800a2b0:	b9800007 	ldb	r6,0(r23)
 800a2b4:	003da706 	br	8009954 <__alt_data_end+0xfc009954>
 800a2b8:	d8c12203 	ldbu	r3,1160(sp)
 800a2bc:	9811883a 	mov	r8,r19
 800a2c0:	d8c11d85 	stb	r3,1142(sp)
 800a2c4:	30005826 	beq	r6,zero,800a428 <___vfiprintf_internal_r+0xc58>
 800a2c8:	05400044 	movi	r21,1
 800a2cc:	d8c10004 	addi	r3,sp,1024
 800a2d0:	d9810005 	stb	r6,1024(sp)
 800a2d4:	d8011d85 	stb	zero,1142(sp)
 800a2d8:	a829883a 	mov	r20,r21
 800a2dc:	d8c12215 	stw	r3,1160(sp)
 800a2e0:	003f1a06 	br	8009f4c <__alt_data_end+0xfc009f4c>
 800a2e4:	d9012117 	ldw	r4,1156(sp)
 800a2e8:	d9412017 	ldw	r5,1152(sp)
 800a2ec:	d9811a04 	addi	r6,sp,1128
 800a2f0:	d9c12a15 	stw	r7,1192(sp)
 800a2f4:	db012b15 	stw	r12,1196(sp)
 800a2f8:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a2fc:	d9c12a17 	ldw	r7,1192(sp)
 800a300:	db012b17 	ldw	r12,1196(sp)
 800a304:	10004e1e 	bne	r2,zero,800a440 <___vfiprintf_internal_r+0xc70>
 800a308:	d9011b17 	ldw	r4,1132(sp)
 800a30c:	d8c11c17 	ldw	r3,1136(sp)
 800a310:	d811883a 	mov	r8,sp
 800a314:	21400044 	addi	r5,r4,1
 800a318:	003e9d06 	br	8009d90 <__alt_data_end+0xfc009d90>
 800a31c:	d9411b17 	ldw	r5,1132(sp)
 800a320:	d8c11c17 	ldw	r3,1136(sp)
 800a324:	28800044 	addi	r2,r5,1
 800a328:	d9011d87 	ldb	r4,1142(sp)
 800a32c:	203eb626 	beq	r4,zero,8009e08 <__alt_data_end+0xfc009e08>
 800a330:	01000044 	movi	r4,1
 800a334:	d9411d84 	addi	r5,sp,1142
 800a338:	1907883a 	add	r3,r3,r4
 800a33c:	41400015 	stw	r5,0(r8)
 800a340:	41000115 	stw	r4,4(r8)
 800a344:	d8c11c15 	stw	r3,1136(sp)
 800a348:	d8811b15 	stw	r2,1132(sp)
 800a34c:	014001c4 	movi	r5,7
 800a350:	2880ce16 	blt	r5,r2,800a68c <___vfiprintf_internal_r+0xebc>
 800a354:	100b883a 	mov	r5,r2
 800a358:	42000204 	addi	r8,r8,8
 800a35c:	10800044 	addi	r2,r2,1
 800a360:	003ea906 	br	8009e08 <__alt_data_end+0xfc009e08>
 800a364:	d9012117 	ldw	r4,1156(sp)
 800a368:	d9412017 	ldw	r5,1152(sp)
 800a36c:	d9811a04 	addi	r6,sp,1128
 800a370:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a374:	1000321e 	bne	r2,zero,800a440 <___vfiprintf_internal_r+0xc70>
 800a378:	d9411b17 	ldw	r5,1132(sp)
 800a37c:	d8c11c17 	ldw	r3,1136(sp)
 800a380:	d811883a 	mov	r8,sp
 800a384:	28800044 	addi	r2,r5,1
 800a388:	003eba06 	br	8009e74 <__alt_data_end+0xfc009e74>
 800a38c:	10803fcc 	andi	r2,r2,255
 800a390:	00c00044 	movi	r3,1
 800a394:	10fe4d1e 	bne	r2,r3,8009ccc <__alt_data_end+0xfc009ccc>
 800a398:	a800021e 	bne	r21,zero,800a3a4 <___vfiprintf_internal_r+0xbd4>
 800a39c:	00800244 	movi	r2,9
 800a3a0:	14c01b2e 	bgeu	r2,r19,800a410 <___vfiprintf_internal_r+0xc40>
 800a3a4:	dc012215 	stw	r16,1160(sp)
 800a3a8:	dd010a04 	addi	r20,sp,1064
 800a3ac:	a821883a 	mov	r16,r21
 800a3b0:	402b883a 	mov	r21,r8
 800a3b4:	9809883a 	mov	r4,r19
 800a3b8:	800b883a 	mov	r5,r16
 800a3bc:	01800284 	movi	r6,10
 800a3c0:	000f883a 	mov	r7,zero
 800a3c4:	800bba40 	call	800bba4 <__umoddi3>
 800a3c8:	10800c04 	addi	r2,r2,48
 800a3cc:	a53fffc4 	addi	r20,r20,-1
 800a3d0:	9809883a 	mov	r4,r19
 800a3d4:	800b883a 	mov	r5,r16
 800a3d8:	01800284 	movi	r6,10
 800a3dc:	000f883a 	mov	r7,zero
 800a3e0:	a0800005 	stb	r2,0(r20)
 800a3e4:	800b5640 	call	800b564 <__udivdi3>
 800a3e8:	1027883a 	mov	r19,r2
 800a3ec:	10c4b03a 	or	r2,r2,r3
 800a3f0:	1821883a 	mov	r16,r3
 800a3f4:	103fef1e 	bne	r2,zero,800a3b4 <__alt_data_end+0xfc00a3b4>
 800a3f8:	d9011e17 	ldw	r4,1144(sp)
 800a3fc:	dc012217 	ldw	r16,1160(sp)
 800a400:	a811883a 	mov	r8,r21
 800a404:	dd012215 	stw	r20,1160(sp)
 800a408:	2529c83a 	sub	r20,r4,r20
 800a40c:	003e4106 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a410:	9cc00c04 	addi	r19,r19,48
 800a414:	d8c109c4 	addi	r3,sp,1063
 800a418:	dcc109c5 	stb	r19,1063(sp)
 800a41c:	dd012817 	ldw	r20,1184(sp)
 800a420:	d8c12215 	stw	r3,1160(sp)
 800a424:	003e3b06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a428:	d8811c17 	ldw	r2,1136(sp)
 800a42c:	10000426 	beq	r2,zero,800a440 <___vfiprintf_internal_r+0xc70>
 800a430:	d9012117 	ldw	r4,1156(sp)
 800a434:	d9412017 	ldw	r5,1152(sp)
 800a438:	d9811a04 	addi	r6,sp,1128
 800a43c:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a440:	d9412017 	ldw	r5,1152(sp)
 800a444:	2880030b 	ldhu	r2,12(r5)
 800a448:	1080100c 	andi	r2,r2,64
 800a44c:	103ddc1e 	bne	r2,zero,8009bc0 <__alt_data_end+0xfc009bc0>
 800a450:	d8812517 	ldw	r2,1172(sp)
 800a454:	003ddb06 	br	8009bc4 <__alt_data_end+0xfc009bc4>
 800a458:	1801061e 	bne	r3,zero,800a874 <___vfiprintf_internal_r+0x10a4>
 800a45c:	d8c12217 	ldw	r3,1160(sp)
 800a460:	00800044 	movi	r2,1
 800a464:	dd000115 	stw	r20,4(sp)
 800a468:	d8c00015 	stw	r3,0(sp)
 800a46c:	dd011c15 	stw	r20,1136(sp)
 800a470:	d8811b15 	stw	r2,1132(sp)
 800a474:	a007883a 	mov	r3,r20
 800a478:	d811883a 	mov	r8,sp
 800a47c:	42000204 	addi	r8,r8,8
 800a480:	9480010c 	andi	r18,r18,4
 800a484:	90003426 	beq	r18,zero,800a558 <___vfiprintf_internal_r+0xd88>
 800a488:	d9412417 	ldw	r5,1168(sp)
 800a48c:	2d65c83a 	sub	r18,r5,r21
 800a490:	0480310e 	bge	zero,r18,800a558 <___vfiprintf_internal_r+0xd88>
 800a494:	04000404 	movi	r16,16
 800a498:	8481ad0e 	bge	r16,r18,800ab50 <___vfiprintf_internal_r+0x1380>
 800a49c:	01420074 	movhi	r5,2049
 800a4a0:	29472204 	addi	r5,r5,7304
 800a4a4:	d9011b17 	ldw	r4,1132(sp)
 800a4a8:	d9412615 	stw	r5,1176(sp)
 800a4ac:	04c001c4 	movi	r19,7
 800a4b0:	dd012117 	ldw	r20,1156(sp)
 800a4b4:	dd812017 	ldw	r22,1152(sp)
 800a4b8:	00000506 	br	800a4d0 <___vfiprintf_internal_r+0xd00>
 800a4bc:	21400084 	addi	r5,r4,2
 800a4c0:	42000204 	addi	r8,r8,8
 800a4c4:	1009883a 	mov	r4,r2
 800a4c8:	94bffc04 	addi	r18,r18,-16
 800a4cc:	84800d0e 	bge	r16,r18,800a504 <___vfiprintf_internal_r+0xd34>
 800a4d0:	18c00404 	addi	r3,r3,16
 800a4d4:	20800044 	addi	r2,r4,1
 800a4d8:	47000015 	stw	fp,0(r8)
 800a4dc:	44000115 	stw	r16,4(r8)
 800a4e0:	d8c11c15 	stw	r3,1136(sp)
 800a4e4:	d8811b15 	stw	r2,1132(sp)
 800a4e8:	98bff40e 	bge	r19,r2,800a4bc <__alt_data_end+0xfc00a4bc>
 800a4ec:	1800291e 	bne	r3,zero,800a594 <___vfiprintf_internal_r+0xdc4>
 800a4f0:	94bffc04 	addi	r18,r18,-16
 800a4f4:	0009883a 	mov	r4,zero
 800a4f8:	01400044 	movi	r5,1
 800a4fc:	d811883a 	mov	r8,sp
 800a500:	84bff316 	blt	r16,r18,800a4d0 <__alt_data_end+0xfc00a4d0>
 800a504:	d8812617 	ldw	r2,1176(sp)
 800a508:	1c87883a 	add	r3,r3,r18
 800a50c:	44800115 	stw	r18,4(r8)
 800a510:	40800015 	stw	r2,0(r8)
 800a514:	d8c11c15 	stw	r3,1136(sp)
 800a518:	d9411b15 	stw	r5,1132(sp)
 800a51c:	008001c4 	movi	r2,7
 800a520:	11400d0e 	bge	r2,r5,800a558 <___vfiprintf_internal_r+0xd88>
 800a524:	1800061e 	bne	r3,zero,800a540 <___vfiprintf_internal_r+0xd70>
 800a528:	d8c12417 	ldw	r3,1168(sp)
 800a52c:	a8c12e16 	blt	r21,r3,800a9e8 <___vfiprintf_internal_r+0x1218>
 800a530:	d9012517 	ldw	r4,1172(sp)
 800a534:	2549883a 	add	r4,r4,r21
 800a538:	d9012515 	stw	r4,1172(sp)
 800a53c:	00001206 	br	800a588 <___vfiprintf_internal_r+0xdb8>
 800a540:	d9012117 	ldw	r4,1156(sp)
 800a544:	d9412017 	ldw	r5,1152(sp)
 800a548:	d9811a04 	addi	r6,sp,1128
 800a54c:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a550:	103fbb1e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800a554:	d8c11c17 	ldw	r3,1136(sp)
 800a558:	d8812417 	ldw	r2,1168(sp)
 800a55c:	a880010e 	bge	r21,r2,800a564 <___vfiprintf_internal_r+0xd94>
 800a560:	102b883a 	mov	r21,r2
 800a564:	d9012517 	ldw	r4,1172(sp)
 800a568:	2549883a 	add	r4,r4,r21
 800a56c:	d9012515 	stw	r4,1172(sp)
 800a570:	18000526 	beq	r3,zero,800a588 <___vfiprintf_internal_r+0xdb8>
 800a574:	d9012117 	ldw	r4,1156(sp)
 800a578:	d9412017 	ldw	r5,1152(sp)
 800a57c:	d9811a04 	addi	r6,sp,1128
 800a580:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a584:	103fae1e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800a588:	d8011b15 	stw	zero,1132(sp)
 800a58c:	d811883a 	mov	r8,sp
 800a590:	003cc706 	br	80098b0 <__alt_data_end+0xfc0098b0>
 800a594:	a009883a 	mov	r4,r20
 800a598:	b00b883a 	mov	r5,r22
 800a59c:	d9811a04 	addi	r6,sp,1128
 800a5a0:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a5a4:	103fa61e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800a5a8:	d9011b17 	ldw	r4,1132(sp)
 800a5ac:	d8c11c17 	ldw	r3,1136(sp)
 800a5b0:	d811883a 	mov	r8,sp
 800a5b4:	21400044 	addi	r5,r4,1
 800a5b8:	003fc306 	br	800a4c8 <__alt_data_end+0xfc00a4c8>
 800a5bc:	d9012417 	ldw	r4,1168(sp)
 800a5c0:	256dc83a 	sub	r22,r4,r21
 800a5c4:	05be1f0e 	bge	zero,r22,8009e44 <__alt_data_end+0xfc009e44>
 800a5c8:	04c00404 	movi	r19,16
 800a5cc:	9d81720e 	bge	r19,r22,800ab98 <___vfiprintf_internal_r+0x13c8>
 800a5d0:	00820074 	movhi	r2,2049
 800a5d4:	10871e04 	addi	r2,r2,7288
 800a5d8:	d8812615 	stw	r2,1176(sp)
 800a5dc:	028001c4 	movi	r10,7
 800a5e0:	00000506 	br	800a5f8 <___vfiprintf_internal_r+0xe28>
 800a5e4:	29000084 	addi	r4,r5,2
 800a5e8:	42000204 	addi	r8,r8,8
 800a5ec:	100b883a 	mov	r5,r2
 800a5f0:	b5bffc04 	addi	r22,r22,-16
 800a5f4:	9d800d0e 	bge	r19,r22,800a62c <___vfiprintf_internal_r+0xe5c>
 800a5f8:	18c00404 	addi	r3,r3,16
 800a5fc:	28800044 	addi	r2,r5,1
 800a600:	44400015 	stw	r17,0(r8)
 800a604:	44c00115 	stw	r19,4(r8)
 800a608:	d8c11c15 	stw	r3,1136(sp)
 800a60c:	d8811b15 	stw	r2,1132(sp)
 800a610:	50bff40e 	bge	r10,r2,800a5e4 <__alt_data_end+0xfc00a5e4>
 800a614:	1800111e 	bne	r3,zero,800a65c <___vfiprintf_internal_r+0xe8c>
 800a618:	b5bffc04 	addi	r22,r22,-16
 800a61c:	000b883a 	mov	r5,zero
 800a620:	01000044 	movi	r4,1
 800a624:	d811883a 	mov	r8,sp
 800a628:	9dbff316 	blt	r19,r22,800a5f8 <__alt_data_end+0xfc00a5f8>
 800a62c:	d9412617 	ldw	r5,1176(sp)
 800a630:	1d87883a 	add	r3,r3,r22
 800a634:	45800115 	stw	r22,4(r8)
 800a638:	41400015 	stw	r5,0(r8)
 800a63c:	d8c11c15 	stw	r3,1136(sp)
 800a640:	d9011b15 	stw	r4,1132(sp)
 800a644:	008001c4 	movi	r2,7
 800a648:	11008516 	blt	r2,r4,800a860 <___vfiprintf_internal_r+0x1090>
 800a64c:	42000204 	addi	r8,r8,8
 800a650:	20800044 	addi	r2,r4,1
 800a654:	200b883a 	mov	r5,r4
 800a658:	003dfa06 	br	8009e44 <__alt_data_end+0xfc009e44>
 800a65c:	d9012117 	ldw	r4,1156(sp)
 800a660:	d9412017 	ldw	r5,1152(sp)
 800a664:	d9811a04 	addi	r6,sp,1128
 800a668:	da812a15 	stw	r10,1192(sp)
 800a66c:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a670:	da812a17 	ldw	r10,1192(sp)
 800a674:	103f721e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800a678:	d9411b17 	ldw	r5,1132(sp)
 800a67c:	d8c11c17 	ldw	r3,1136(sp)
 800a680:	d811883a 	mov	r8,sp
 800a684:	29000044 	addi	r4,r5,1
 800a688:	003fd906 	br	800a5f0 <__alt_data_end+0xfc00a5f0>
 800a68c:	1800681e 	bne	r3,zero,800a830 <___vfiprintf_internal_r+0x1060>
 800a690:	50004d26 	beq	r10,zero,800a7c8 <___vfiprintf_internal_r+0xff8>
 800a694:	d8811d04 	addi	r2,sp,1140
 800a698:	00c00084 	movi	r3,2
 800a69c:	d8800015 	stw	r2,0(sp)
 800a6a0:	d8c00115 	stw	r3,4(sp)
 800a6a4:	2005883a 	mov	r2,r4
 800a6a8:	d811883a 	mov	r8,sp
 800a6ac:	003de006 	br	8009e30 <__alt_data_end+0xfc009e30>
 800a6b0:	1800551e 	bne	r3,zero,800a808 <___vfiprintf_internal_r+0x1038>
 800a6b4:	000b883a 	mov	r5,zero
 800a6b8:	00800044 	movi	r2,1
 800a6bc:	d811883a 	mov	r8,sp
 800a6c0:	003dde06 	br	8009e3c <__alt_data_end+0xfc009e3c>
 800a6c4:	10803fcc 	andi	r2,r2,255
 800a6c8:	1000191e 	bne	r2,zero,800a730 <___vfiprintf_internal_r+0xf60>
 800a6cc:	9080004c 	andi	r2,r18,1
 800a6d0:	10001726 	beq	r2,zero,800a730 <___vfiprintf_internal_r+0xf60>
 800a6d4:	00800c04 	movi	r2,48
 800a6d8:	d8c109c4 	addi	r3,sp,1063
 800a6dc:	d88109c5 	stb	r2,1063(sp)
 800a6e0:	dd012817 	ldw	r20,1184(sp)
 800a6e4:	d8c12215 	stw	r3,1160(sp)
 800a6e8:	003d8a06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a6ec:	d9012717 	ldw	r4,1180(sp)
 800a6f0:	dd010a04 	addi	r20,sp,1064
 800a6f4:	988003cc 	andi	r2,r19,15
 800a6f8:	a806973a 	slli	r3,r21,28
 800a6fc:	2085883a 	add	r2,r4,r2
 800a700:	9826d13a 	srli	r19,r19,4
 800a704:	10800003 	ldbu	r2,0(r2)
 800a708:	a82ad13a 	srli	r21,r21,4
 800a70c:	a53fffc4 	addi	r20,r20,-1
 800a710:	1ce6b03a 	or	r19,r3,r19
 800a714:	a0800005 	stb	r2,0(r20)
 800a718:	9d44b03a 	or	r2,r19,r21
 800a71c:	103ff51e 	bne	r2,zero,800a6f4 <__alt_data_end+0xfc00a6f4>
 800a720:	d9411e17 	ldw	r5,1144(sp)
 800a724:	dd012215 	stw	r20,1160(sp)
 800a728:	2d29c83a 	sub	r20,r5,r20
 800a72c:	003d7906 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a730:	d8c10a04 	addi	r3,sp,1064
 800a734:	d8c12215 	stw	r3,1160(sp)
 800a738:	003d7606 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a73c:	18009e1e 	bne	r3,zero,800a9b8 <___vfiprintf_internal_r+0x11e8>
 800a740:	d8811d87 	ldb	r2,1142(sp)
 800a744:	10005f26 	beq	r2,zero,800a8c4 <___vfiprintf_internal_r+0x10f4>
 800a748:	00c00044 	movi	r3,1
 800a74c:	d9011d84 	addi	r4,sp,1142
 800a750:	1805883a 	mov	r2,r3
 800a754:	d9000015 	stw	r4,0(sp)
 800a758:	d8c00115 	stw	r3,4(sp)
 800a75c:	d811883a 	mov	r8,sp
 800a760:	003efc06 	br	800a354 <__alt_data_end+0xfc00a354>
 800a764:	d9412417 	ldw	r5,1168(sp)
 800a768:	d811883a 	mov	r8,sp
 800a76c:	2d65c83a 	sub	r18,r5,r21
 800a770:	04bf4816 	blt	zero,r18,800a494 <__alt_data_end+0xfc00a494>
 800a774:	003f6c06 	br	800a528 <__alt_data_end+0xfc00a528>
 800a778:	b829883a 	mov	r20,r23
 800a77c:	003c6906 	br	8009924 <__alt_data_end+0xfc009924>
 800a780:	d9012117 	ldw	r4,1156(sp)
 800a784:	d9412017 	ldw	r5,1152(sp)
 800a788:	d9811a04 	addi	r6,sp,1128
 800a78c:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a790:	103f2b1e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800a794:	d8c11c17 	ldw	r3,1136(sp)
 800a798:	d811883a 	mov	r8,sp
 800a79c:	003f3806 	br	800a480 <__alt_data_end+0xfc00a480>
 800a7a0:	00800084 	movi	r2,2
 800a7a4:	9d46b03a 	or	r3,r19,r21
 800a7a8:	003df606 	br	8009f84 <__alt_data_end+0xfc009f84>
 800a7ac:	d9012117 	ldw	r4,1156(sp)
 800a7b0:	d9412017 	ldw	r5,1152(sp)
 800a7b4:	d9811a04 	addi	r6,sp,1128
 800a7b8:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a7bc:	103f201e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800a7c0:	d811883a 	mov	r8,sp
 800a7c4:	003cc606 	br	8009ae0 <__alt_data_end+0xfc009ae0>
 800a7c8:	000b883a 	mov	r5,zero
 800a7cc:	2005883a 	mov	r2,r4
 800a7d0:	d811883a 	mov	r8,sp
 800a7d4:	003d9906 	br	8009e3c <__alt_data_end+0xfc009e3c>
 800a7d8:	10803fcc 	andi	r2,r2,255
 800a7dc:	1080201c 	xori	r2,r2,128
 800a7e0:	10bfe004 	addi	r2,r2,-128
 800a7e4:	01000c04 	movi	r4,48
 800a7e8:	1100b226 	beq	r2,r4,800aab4 <___vfiprintf_internal_r+0x12e4>
 800a7ec:	d9412217 	ldw	r5,1160(sp)
 800a7f0:	d8811e17 	ldw	r2,1144(sp)
 800a7f4:	193fffc5 	stb	r4,-1(r3)
 800a7f8:	297fffc4 	addi	r5,r5,-1
 800a7fc:	d9412215 	stw	r5,1160(sp)
 800a800:	1169c83a 	sub	r20,r2,r5
 800a804:	003d4306 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a808:	d9012117 	ldw	r4,1156(sp)
 800a80c:	d9412017 	ldw	r5,1152(sp)
 800a810:	d9811a04 	addi	r6,sp,1128
 800a814:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a818:	103f091e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800a81c:	d9411b17 	ldw	r5,1132(sp)
 800a820:	d8c11c17 	ldw	r3,1136(sp)
 800a824:	d811883a 	mov	r8,sp
 800a828:	28800044 	addi	r2,r5,1
 800a82c:	003d8306 	br	8009e3c <__alt_data_end+0xfc009e3c>
 800a830:	d9012117 	ldw	r4,1156(sp)
 800a834:	d9412017 	ldw	r5,1152(sp)
 800a838:	d9811a04 	addi	r6,sp,1128
 800a83c:	da812a15 	stw	r10,1192(sp)
 800a840:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a844:	da812a17 	ldw	r10,1192(sp)
 800a848:	103efd1e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800a84c:	d9411b17 	ldw	r5,1132(sp)
 800a850:	d8c11c17 	ldw	r3,1136(sp)
 800a854:	d811883a 	mov	r8,sp
 800a858:	28800044 	addi	r2,r5,1
 800a85c:	003d6a06 	br	8009e08 <__alt_data_end+0xfc009e08>
 800a860:	1800a01e 	bne	r3,zero,800aae4 <___vfiprintf_internal_r+0x1314>
 800a864:	000b883a 	mov	r5,zero
 800a868:	00800044 	movi	r2,1
 800a86c:	d811883a 	mov	r8,sp
 800a870:	003d7406 	br	8009e44 <__alt_data_end+0xfc009e44>
 800a874:	d9012117 	ldw	r4,1156(sp)
 800a878:	d9412017 	ldw	r5,1152(sp)
 800a87c:	d9811a04 	addi	r6,sp,1128
 800a880:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a884:	103eee1e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800a888:	d8811b17 	ldw	r2,1132(sp)
 800a88c:	d8c11c17 	ldw	r3,1136(sp)
 800a890:	d811883a 	mov	r8,sp
 800a894:	10800044 	addi	r2,r2,1
 800a898:	003d8f06 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a89c:	04e7c83a 	sub	r19,zero,r19
 800a8a0:	9804c03a 	cmpne	r2,r19,zero
 800a8a4:	056bc83a 	sub	r21,zero,r21
 800a8a8:	a8abc83a 	sub	r21,r21,r2
 800a8ac:	05800b44 	movi	r22,45
 800a8b0:	dd811d85 	stb	r22,1142(sp)
 800a8b4:	8029883a 	mov	r20,r16
 800a8b8:	00800044 	movi	r2,1
 800a8bc:	9d46b03a 	or	r3,r19,r21
 800a8c0:	003cfa06 	br	8009cac <__alt_data_end+0xfc009cac>
 800a8c4:	000b883a 	mov	r5,zero
 800a8c8:	00800044 	movi	r2,1
 800a8cc:	d811883a 	mov	r8,sp
 800a8d0:	503d5a26 	beq	r10,zero,8009e3c <__alt_data_end+0xfc009e3c>
 800a8d4:	00c00084 	movi	r3,2
 800a8d8:	d9011d04 	addi	r4,sp,1140
 800a8dc:	d9000015 	stw	r4,0(sp)
 800a8e0:	d8c00115 	stw	r3,4(sp)
 800a8e4:	003d5206 	br	8009e30 <__alt_data_end+0xfc009e30>
 800a8e8:	9080040c 	andi	r2,r18,16
 800a8ec:	1000421e 	bne	r2,zero,800a9f8 <___vfiprintf_internal_r+0x1228>
 800a8f0:	9480100c 	andi	r18,r18,64
 800a8f4:	90009c26 	beq	r18,zero,800ab68 <___vfiprintf_internal_r+0x1398>
 800a8f8:	d9412317 	ldw	r5,1164(sp)
 800a8fc:	d8c12517 	ldw	r3,1172(sp)
 800a900:	28800017 	ldw	r2,0(r5)
 800a904:	29400104 	addi	r5,r5,4
 800a908:	d9412315 	stw	r5,1164(sp)
 800a90c:	10c0000d 	sth	r3,0(r2)
 800a910:	003be706 	br	80098b0 <__alt_data_end+0xfc0098b0>
 800a914:	90c0100c 	andi	r3,r18,64
 800a918:	18003e26 	beq	r3,zero,800aa14 <___vfiprintf_internal_r+0x1244>
 800a91c:	d8c12317 	ldw	r3,1164(sp)
 800a920:	14c0000b 	ldhu	r19,0(r2)
 800a924:	002b883a 	mov	r21,zero
 800a928:	18c00104 	addi	r3,r3,4
 800a92c:	d8c12315 	stw	r3,1164(sp)
 800a930:	003db706 	br	800a010 <__alt_data_end+0xfc00a010>
 800a934:	9080100c 	andi	r2,r18,64
 800a938:	10004c26 	beq	r2,zero,800aa6c <___vfiprintf_internal_r+0x129c>
 800a93c:	1cc0000f 	ldh	r19,0(r3)
 800a940:	d8812317 	ldw	r2,1164(sp)
 800a944:	982bd7fa 	srai	r21,r19,31
 800a948:	10800104 	addi	r2,r2,4
 800a94c:	d8812315 	stw	r2,1164(sp)
 800a950:	a805883a 	mov	r2,r21
 800a954:	003cd006 	br	8009c98 <__alt_data_end+0xfc009c98>
 800a958:	00800084 	movi	r2,2
 800a95c:	003d8906 	br	8009f84 <__alt_data_end+0xfc009f84>
 800a960:	b9800007 	ldb	r6,0(r23)
 800a964:	003bfb06 	br	8009954 <__alt_data_end+0xfc009954>
 800a968:	9080100c 	andi	r2,r18,64
 800a96c:	10003726 	beq	r2,zero,800aa4c <___vfiprintf_internal_r+0x127c>
 800a970:	d9412317 	ldw	r5,1164(sp)
 800a974:	002b883a 	mov	r21,zero
 800a978:	0005883a 	mov	r2,zero
 800a97c:	2cc0000b 	ldhu	r19,0(r5)
 800a980:	29400104 	addi	r5,r5,4
 800a984:	d9412315 	stw	r5,1164(sp)
 800a988:	9807883a 	mov	r3,r19
 800a98c:	003d7d06 	br	8009f84 <__alt_data_end+0xfc009f84>
 800a990:	9080100c 	andi	r2,r18,64
 800a994:	10002526 	beq	r2,zero,800aa2c <___vfiprintf_internal_r+0x125c>
 800a998:	d8812317 	ldw	r2,1164(sp)
 800a99c:	002b883a 	mov	r21,zero
 800a9a0:	14c0000b 	ldhu	r19,0(r2)
 800a9a4:	10800104 	addi	r2,r2,4
 800a9a8:	d8812315 	stw	r2,1164(sp)
 800a9ac:	9807883a 	mov	r3,r19
 800a9b0:	00800044 	movi	r2,1
 800a9b4:	003d7306 	br	8009f84 <__alt_data_end+0xfc009f84>
 800a9b8:	d9012117 	ldw	r4,1156(sp)
 800a9bc:	d9412017 	ldw	r5,1152(sp)
 800a9c0:	d9811a04 	addi	r6,sp,1128
 800a9c4:	da812a15 	stw	r10,1192(sp)
 800a9c8:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800a9cc:	da812a17 	ldw	r10,1192(sp)
 800a9d0:	103e9b1e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800a9d4:	d9411b17 	ldw	r5,1132(sp)
 800a9d8:	d8c11c17 	ldw	r3,1136(sp)
 800a9dc:	d811883a 	mov	r8,sp
 800a9e0:	28800044 	addi	r2,r5,1
 800a9e4:	003e5006 	br	800a328 <__alt_data_end+0xfc00a328>
 800a9e8:	182b883a 	mov	r21,r3
 800a9ec:	003ed006 	br	800a530 <__alt_data_end+0xfc00a530>
 800a9f0:	8029883a 	mov	r20,r16
 800a9f4:	003dc606 	br	800a110 <__alt_data_end+0xfc00a110>
 800a9f8:	d8c12317 	ldw	r3,1164(sp)
 800a9fc:	d9012517 	ldw	r4,1172(sp)
 800aa00:	18800017 	ldw	r2,0(r3)
 800aa04:	18c00104 	addi	r3,r3,4
 800aa08:	d8c12315 	stw	r3,1164(sp)
 800aa0c:	11000015 	stw	r4,0(r2)
 800aa10:	003ba706 	br	80098b0 <__alt_data_end+0xfc0098b0>
 800aa14:	d9012317 	ldw	r4,1164(sp)
 800aa18:	14c00017 	ldw	r19,0(r2)
 800aa1c:	002b883a 	mov	r21,zero
 800aa20:	21000104 	addi	r4,r4,4
 800aa24:	d9012315 	stw	r4,1164(sp)
 800aa28:	003d7906 	br	800a010 <__alt_data_end+0xfc00a010>
 800aa2c:	d8c12317 	ldw	r3,1164(sp)
 800aa30:	002b883a 	mov	r21,zero
 800aa34:	00800044 	movi	r2,1
 800aa38:	1cc00017 	ldw	r19,0(r3)
 800aa3c:	18c00104 	addi	r3,r3,4
 800aa40:	d8c12315 	stw	r3,1164(sp)
 800aa44:	9807883a 	mov	r3,r19
 800aa48:	003d4e06 	br	8009f84 <__alt_data_end+0xfc009f84>
 800aa4c:	d8812317 	ldw	r2,1164(sp)
 800aa50:	002b883a 	mov	r21,zero
 800aa54:	14c00017 	ldw	r19,0(r2)
 800aa58:	10800104 	addi	r2,r2,4
 800aa5c:	d8812315 	stw	r2,1164(sp)
 800aa60:	9807883a 	mov	r3,r19
 800aa64:	0005883a 	mov	r2,zero
 800aa68:	003d4606 	br	8009f84 <__alt_data_end+0xfc009f84>
 800aa6c:	1cc00017 	ldw	r19,0(r3)
 800aa70:	d8c12317 	ldw	r3,1164(sp)
 800aa74:	982bd7fa 	srai	r21,r19,31
 800aa78:	18c00104 	addi	r3,r3,4
 800aa7c:	d8c12315 	stw	r3,1164(sp)
 800aa80:	a805883a 	mov	r2,r21
 800aa84:	003c8406 	br	8009c98 <__alt_data_end+0xfc009c98>
 800aa88:	01020074 	movhi	r4,2049
 800aa8c:	21071e04 	addi	r4,r4,7288
 800aa90:	d9012615 	stw	r4,1176(sp)
 800aa94:	003d0606 	br	8009eb0 <__alt_data_end+0xfc009eb0>
 800aa98:	b9800043 	ldbu	r6,1(r23)
 800aa9c:	94800814 	ori	r18,r18,32
 800aaa0:	bdc00044 	addi	r23,r23,1
 800aaa4:	31803fcc 	andi	r6,r6,255
 800aaa8:	3180201c 	xori	r6,r6,128
 800aaac:	31bfe004 	addi	r6,r6,-128
 800aab0:	003ba806 	br	8009954 <__alt_data_end+0xfc009954>
 800aab4:	d8811e17 	ldw	r2,1144(sp)
 800aab8:	d8c12217 	ldw	r3,1160(sp)
 800aabc:	10e9c83a 	sub	r20,r2,r3
 800aac0:	003c9406 	br	8009d14 <__alt_data_end+0xfc009d14>
 800aac4:	da012a15 	stw	r8,1192(sp)
 800aac8:	80022e00 	call	80022e0 <strlen>
 800aacc:	1029883a 	mov	r20,r2
 800aad0:	dd811d83 	ldbu	r22,1142(sp)
 800aad4:	dcc12315 	stw	r19,1164(sp)
 800aad8:	0021883a 	mov	r16,zero
 800aadc:	da012a17 	ldw	r8,1192(sp)
 800aae0:	003c8c06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800aae4:	d9012117 	ldw	r4,1156(sp)
 800aae8:	d9412017 	ldw	r5,1152(sp)
 800aaec:	d9811a04 	addi	r6,sp,1128
 800aaf0:	80096bc0 	call	80096bc <__sprint_r.part.0>
 800aaf4:	103e521e 	bne	r2,zero,800a440 <__alt_data_end+0xfc00a440>
 800aaf8:	d9411b17 	ldw	r5,1132(sp)
 800aafc:	d8c11c17 	ldw	r3,1136(sp)
 800ab00:	d811883a 	mov	r8,sp
 800ab04:	28800044 	addi	r2,r5,1
 800ab08:	003cce06 	br	8009e44 <__alt_data_end+0xfc009e44>
 800ab0c:	01420074 	movhi	r5,2049
 800ab10:	29472204 	addi	r5,r5,7304
 800ab14:	d9412615 	stw	r5,1176(sp)
 800ab18:	d9411b17 	ldw	r5,1132(sp)
 800ab1c:	29400044 	addi	r5,r5,1
 800ab20:	003cad06 	br	8009dd8 <__alt_data_end+0xfc009dd8>
 800ab24:	00800184 	movi	r2,6
 800ab28:	1400012e 	bgeu	r2,r16,800ab30 <___vfiprintf_internal_r+0x1360>
 800ab2c:	1021883a 	mov	r16,r2
 800ab30:	8029883a 	mov	r20,r16
 800ab34:	802b883a 	mov	r21,r16
 800ab38:	80001c16 	blt	r16,zero,800abac <___vfiprintf_internal_r+0x13dc>
 800ab3c:	00c20074 	movhi	r3,2049
 800ab40:	18c6c204 	addi	r3,r3,6920
 800ab44:	dcc12315 	stw	r19,1164(sp)
 800ab48:	d8c12215 	stw	r3,1160(sp)
 800ab4c:	003cff06 	br	8009f4c <__alt_data_end+0xfc009f4c>
 800ab50:	d9411b17 	ldw	r5,1132(sp)
 800ab54:	00820074 	movhi	r2,2049
 800ab58:	10872204 	addi	r2,r2,7304
 800ab5c:	d8812615 	stw	r2,1176(sp)
 800ab60:	29400044 	addi	r5,r5,1
 800ab64:	003e6706 	br	800a504 <__alt_data_end+0xfc00a504>
 800ab68:	d9012317 	ldw	r4,1164(sp)
 800ab6c:	d9412517 	ldw	r5,1172(sp)
 800ab70:	20800017 	ldw	r2,0(r4)
 800ab74:	21000104 	addi	r4,r4,4
 800ab78:	d9012315 	stw	r4,1164(sp)
 800ab7c:	11400015 	stw	r5,0(r2)
 800ab80:	003b4b06 	br	80098b0 <__alt_data_end+0xfc0098b0>
 800ab84:	8029883a 	mov	r20,r16
 800ab88:	dd811d83 	ldbu	r22,1142(sp)
 800ab8c:	dcc12315 	stw	r19,1164(sp)
 800ab90:	0021883a 	mov	r16,zero
 800ab94:	003c5f06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800ab98:	01020074 	movhi	r4,2049
 800ab9c:	21071e04 	addi	r4,r4,7288
 800aba0:	d9012615 	stw	r4,1176(sp)
 800aba4:	1009883a 	mov	r4,r2
 800aba8:	003ea006 	br	800a62c <__alt_data_end+0xfc00a62c>
 800abac:	002b883a 	mov	r21,zero
 800abb0:	003fe206 	br	800ab3c <__alt_data_end+0xfc00ab3c>
 800abb4:	d9412317 	ldw	r5,1164(sp)
 800abb8:	b807883a 	mov	r3,r23
 800abbc:	102f883a 	mov	r23,r2
 800abc0:	2c000017 	ldw	r16,0(r5)
 800abc4:	29000104 	addi	r4,r5,4
 800abc8:	d9012315 	stw	r4,1164(sp)
 800abcc:	80000416 	blt	r16,zero,800abe0 <___vfiprintf_internal_r+0x1410>
 800abd0:	19800047 	ldb	r6,1(r3)
 800abd4:	003b5f06 	br	8009954 <__alt_data_end+0xfc009954>
 800abd8:	043fffc4 	movi	r16,-1
 800abdc:	003bef06 	br	8009b9c <__alt_data_end+0xfc009b9c>
 800abe0:	043fffc4 	movi	r16,-1
 800abe4:	19800047 	ldb	r6,1(r3)
 800abe8:	003b5a06 	br	8009954 <__alt_data_end+0xfc009954>
 800abec:	282b883a 	mov	r21,r5
 800abf0:	003cc706 	br	8009f10 <__alt_data_end+0xfc009f10>

0800abf4 <__vfiprintf_internal>:
 800abf4:	2007883a 	mov	r3,r4
 800abf8:	01020074 	movhi	r4,2049
 800abfc:	210e1f04 	addi	r4,r4,14460
 800ac00:	21000017 	ldw	r4,0(r4)
 800ac04:	2805883a 	mov	r2,r5
 800ac08:	300f883a 	mov	r7,r6
 800ac0c:	180b883a 	mov	r5,r3
 800ac10:	100d883a 	mov	r6,r2
 800ac14:	80097d01 	jmpi	80097d0 <___vfiprintf_internal_r>

0800ac18 <_write_r>:
 800ac18:	defffd04 	addi	sp,sp,-12
 800ac1c:	dc000015 	stw	r16,0(sp)
 800ac20:	04020074 	movhi	r16,2049
 800ac24:	dc400115 	stw	r17,4(sp)
 800ac28:	8414f004 	addi	r16,r16,21440
 800ac2c:	2023883a 	mov	r17,r4
 800ac30:	2809883a 	mov	r4,r5
 800ac34:	300b883a 	mov	r5,r6
 800ac38:	380d883a 	mov	r6,r7
 800ac3c:	dfc00215 	stw	ra,8(sp)
 800ac40:	80000015 	stw	zero,0(r16)
 800ac44:	800f4340 	call	800f434 <write>
 800ac48:	00ffffc4 	movi	r3,-1
 800ac4c:	10c00526 	beq	r2,r3,800ac64 <_write_r+0x4c>
 800ac50:	dfc00217 	ldw	ra,8(sp)
 800ac54:	dc400117 	ldw	r17,4(sp)
 800ac58:	dc000017 	ldw	r16,0(sp)
 800ac5c:	dec00304 	addi	sp,sp,12
 800ac60:	f800283a 	ret
 800ac64:	80c00017 	ldw	r3,0(r16)
 800ac68:	183ff926 	beq	r3,zero,800ac50 <__alt_data_end+0xfc00ac50>
 800ac6c:	88c00015 	stw	r3,0(r17)
 800ac70:	003ff706 	br	800ac50 <__alt_data_end+0xfc00ac50>

0800ac74 <_close_r>:
 800ac74:	defffd04 	addi	sp,sp,-12
 800ac78:	dc000015 	stw	r16,0(sp)
 800ac7c:	04020074 	movhi	r16,2049
 800ac80:	dc400115 	stw	r17,4(sp)
 800ac84:	8414f004 	addi	r16,r16,21440
 800ac88:	2023883a 	mov	r17,r4
 800ac8c:	2809883a 	mov	r4,r5
 800ac90:	dfc00215 	stw	ra,8(sp)
 800ac94:	80000015 	stw	zero,0(r16)
 800ac98:	800eb600 	call	800eb60 <close>
 800ac9c:	00ffffc4 	movi	r3,-1
 800aca0:	10c00526 	beq	r2,r3,800acb8 <_close_r+0x44>
 800aca4:	dfc00217 	ldw	ra,8(sp)
 800aca8:	dc400117 	ldw	r17,4(sp)
 800acac:	dc000017 	ldw	r16,0(sp)
 800acb0:	dec00304 	addi	sp,sp,12
 800acb4:	f800283a 	ret
 800acb8:	80c00017 	ldw	r3,0(r16)
 800acbc:	183ff926 	beq	r3,zero,800aca4 <__alt_data_end+0xfc00aca4>
 800acc0:	88c00015 	stw	r3,0(r17)
 800acc4:	003ff706 	br	800aca4 <__alt_data_end+0xfc00aca4>

0800acc8 <_calloc_r>:
 800acc8:	defffe04 	addi	sp,sp,-8
 800accc:	dc000015 	stw	r16,0(sp)
 800acd0:	2021883a 	mov	r16,r4
 800acd4:	2809883a 	mov	r4,r5
 800acd8:	300b883a 	mov	r5,r6
 800acdc:	dfc00115 	stw	ra,4(sp)
 800ace0:	800c2ec0 	call	800c2ec <__mulsi3>
 800ace4:	8009883a 	mov	r4,r16
 800ace8:	100b883a 	mov	r5,r2
 800acec:	80071e40 	call	80071e4 <_malloc_r>
 800acf0:	1021883a 	mov	r16,r2
 800acf4:	10002826 	beq	r2,zero,800ad98 <_calloc_r+0xd0>
 800acf8:	11bfff17 	ldw	r6,-4(r2)
 800acfc:	00bfff04 	movi	r2,-4
 800ad00:	00c00904 	movi	r3,36
 800ad04:	308c703a 	and	r6,r6,r2
 800ad08:	308d883a 	add	r6,r6,r2
 800ad0c:	19801436 	bltu	r3,r6,800ad60 <_calloc_r+0x98>
 800ad10:	008004c4 	movi	r2,19
 800ad14:	11800936 	bltu	r2,r6,800ad3c <_calloc_r+0x74>
 800ad18:	8005883a 	mov	r2,r16
 800ad1c:	10000015 	stw	zero,0(r2)
 800ad20:	10000115 	stw	zero,4(r2)
 800ad24:	10000215 	stw	zero,8(r2)
 800ad28:	8005883a 	mov	r2,r16
 800ad2c:	dfc00117 	ldw	ra,4(sp)
 800ad30:	dc000017 	ldw	r16,0(sp)
 800ad34:	dec00204 	addi	sp,sp,8
 800ad38:	f800283a 	ret
 800ad3c:	80000015 	stw	zero,0(r16)
 800ad40:	80000115 	stw	zero,4(r16)
 800ad44:	008006c4 	movi	r2,27
 800ad48:	11800d2e 	bgeu	r2,r6,800ad80 <_calloc_r+0xb8>
 800ad4c:	80000215 	stw	zero,8(r16)
 800ad50:	80000315 	stw	zero,12(r16)
 800ad54:	30c00c26 	beq	r6,r3,800ad88 <_calloc_r+0xc0>
 800ad58:	80800404 	addi	r2,r16,16
 800ad5c:	003fef06 	br	800ad1c <__alt_data_end+0xfc00ad1c>
 800ad60:	8009883a 	mov	r4,r16
 800ad64:	000b883a 	mov	r5,zero
 800ad68:	8007d080 	call	8007d08 <memset>
 800ad6c:	8005883a 	mov	r2,r16
 800ad70:	dfc00117 	ldw	ra,4(sp)
 800ad74:	dc000017 	ldw	r16,0(sp)
 800ad78:	dec00204 	addi	sp,sp,8
 800ad7c:	f800283a 	ret
 800ad80:	80800204 	addi	r2,r16,8
 800ad84:	003fe506 	br	800ad1c <__alt_data_end+0xfc00ad1c>
 800ad88:	80000415 	stw	zero,16(r16)
 800ad8c:	80800604 	addi	r2,r16,24
 800ad90:	80000515 	stw	zero,20(r16)
 800ad94:	003fe106 	br	800ad1c <__alt_data_end+0xfc00ad1c>
 800ad98:	0005883a 	mov	r2,zero
 800ad9c:	003fe306 	br	800ad2c <__alt_data_end+0xfc00ad2c>

0800ada0 <_fclose_r>:
 800ada0:	28003226 	beq	r5,zero,800ae6c <_fclose_r+0xcc>
 800ada4:	defffc04 	addi	sp,sp,-16
 800ada8:	dc400115 	stw	r17,4(sp)
 800adac:	2023883a 	mov	r17,r4
 800adb0:	dc000015 	stw	r16,0(sp)
 800adb4:	dfc00315 	stw	ra,12(sp)
 800adb8:	dc800215 	stw	r18,8(sp)
 800adbc:	2821883a 	mov	r16,r5
 800adc0:	80064e40 	call	80064e4 <__sfp_lock_acquire>
 800adc4:	88000226 	beq	r17,zero,800add0 <_fclose_r+0x30>
 800adc8:	88800e17 	ldw	r2,56(r17)
 800adcc:	10002926 	beq	r2,zero,800ae74 <_fclose_r+0xd4>
 800add0:	8080030f 	ldh	r2,12(r16)
 800add4:	10002226 	beq	r2,zero,800ae60 <_fclose_r+0xc0>
 800add8:	8809883a 	mov	r4,r17
 800addc:	800b883a 	mov	r5,r16
 800ade0:	8005f180 	call	8005f18 <_fflush_r>
 800ade4:	1025883a 	mov	r18,r2
 800ade8:	80800b17 	ldw	r2,44(r16)
 800adec:	10000426 	beq	r2,zero,800ae00 <_fclose_r+0x60>
 800adf0:	81400717 	ldw	r5,28(r16)
 800adf4:	8809883a 	mov	r4,r17
 800adf8:	103ee83a 	callr	r2
 800adfc:	10002616 	blt	r2,zero,800ae98 <_fclose_r+0xf8>
 800ae00:	8080030b 	ldhu	r2,12(r16)
 800ae04:	1080200c 	andi	r2,r2,128
 800ae08:	10001f1e 	bne	r2,zero,800ae88 <_fclose_r+0xe8>
 800ae0c:	81400c17 	ldw	r5,48(r16)
 800ae10:	28000526 	beq	r5,zero,800ae28 <_fclose_r+0x88>
 800ae14:	80801004 	addi	r2,r16,64
 800ae18:	28800226 	beq	r5,r2,800ae24 <_fclose_r+0x84>
 800ae1c:	8809883a 	mov	r4,r17
 800ae20:	80066480 	call	8006648 <_free_r>
 800ae24:	80000c15 	stw	zero,48(r16)
 800ae28:	81401117 	ldw	r5,68(r16)
 800ae2c:	28000326 	beq	r5,zero,800ae3c <_fclose_r+0x9c>
 800ae30:	8809883a 	mov	r4,r17
 800ae34:	80066480 	call	8006648 <_free_r>
 800ae38:	80001115 	stw	zero,68(r16)
 800ae3c:	8000030d 	sth	zero,12(r16)
 800ae40:	80064e80 	call	80064e8 <__sfp_lock_release>
 800ae44:	9005883a 	mov	r2,r18
 800ae48:	dfc00317 	ldw	ra,12(sp)
 800ae4c:	dc800217 	ldw	r18,8(sp)
 800ae50:	dc400117 	ldw	r17,4(sp)
 800ae54:	dc000017 	ldw	r16,0(sp)
 800ae58:	dec00404 	addi	sp,sp,16
 800ae5c:	f800283a 	ret
 800ae60:	80064e80 	call	80064e8 <__sfp_lock_release>
 800ae64:	0005883a 	mov	r2,zero
 800ae68:	003ff706 	br	800ae48 <__alt_data_end+0xfc00ae48>
 800ae6c:	0005883a 	mov	r2,zero
 800ae70:	f800283a 	ret
 800ae74:	8809883a 	mov	r4,r17
 800ae78:	80064d40 	call	80064d4 <__sinit>
 800ae7c:	8080030f 	ldh	r2,12(r16)
 800ae80:	103fd51e 	bne	r2,zero,800add8 <__alt_data_end+0xfc00add8>
 800ae84:	003ff606 	br	800ae60 <__alt_data_end+0xfc00ae60>
 800ae88:	81400417 	ldw	r5,16(r16)
 800ae8c:	8809883a 	mov	r4,r17
 800ae90:	80066480 	call	8006648 <_free_r>
 800ae94:	003fdd06 	br	800ae0c <__alt_data_end+0xfc00ae0c>
 800ae98:	04bfffc4 	movi	r18,-1
 800ae9c:	003fd806 	br	800ae00 <__alt_data_end+0xfc00ae00>

0800aea0 <fclose>:
 800aea0:	00820074 	movhi	r2,2049
 800aea4:	108e1f04 	addi	r2,r2,14460
 800aea8:	200b883a 	mov	r5,r4
 800aeac:	11000017 	ldw	r4,0(r2)
 800aeb0:	800ada01 	jmpi	800ada0 <_fclose_r>

0800aeb4 <_fputwc_r>:
 800aeb4:	3080030b 	ldhu	r2,12(r6)
 800aeb8:	defff804 	addi	sp,sp,-32
 800aebc:	dcc00415 	stw	r19,16(sp)
 800aec0:	dc800315 	stw	r18,12(sp)
 800aec4:	dc000115 	stw	r16,4(sp)
 800aec8:	dfc00715 	stw	ra,28(sp)
 800aecc:	dd400615 	stw	r21,24(sp)
 800aed0:	dd000515 	stw	r20,20(sp)
 800aed4:	dc400215 	stw	r17,8(sp)
 800aed8:	10c8000c 	andi	r3,r2,8192
 800aedc:	3021883a 	mov	r16,r6
 800aee0:	2027883a 	mov	r19,r4
 800aee4:	2825883a 	mov	r18,r5
 800aee8:	1800051e 	bne	r3,zero,800af00 <_fputwc_r+0x4c>
 800aeec:	30c01917 	ldw	r3,100(r6)
 800aef0:	10880014 	ori	r2,r2,8192
 800aef4:	3080030d 	sth	r2,12(r6)
 800aef8:	18880014 	ori	r2,r3,8192
 800aefc:	30801915 	stw	r2,100(r6)
 800af00:	8006fd40 	call	8006fd4 <__locale_mb_cur_max>
 800af04:	00c00044 	movi	r3,1
 800af08:	10c03e26 	beq	r2,r3,800b004 <_fputwc_r+0x150>
 800af0c:	9809883a 	mov	r4,r19
 800af10:	d80b883a 	mov	r5,sp
 800af14:	900d883a 	mov	r6,r18
 800af18:	81c01704 	addi	r7,r16,92
 800af1c:	800b3640 	call	800b364 <_wcrtomb_r>
 800af20:	1029883a 	mov	r20,r2
 800af24:	00bfffc4 	movi	r2,-1
 800af28:	a0802026 	beq	r20,r2,800afac <_fputwc_r+0xf8>
 800af2c:	d9400003 	ldbu	r5,0(sp)
 800af30:	a0001c26 	beq	r20,zero,800afa4 <_fputwc_r+0xf0>
 800af34:	0023883a 	mov	r17,zero
 800af38:	05400284 	movi	r21,10
 800af3c:	00000906 	br	800af64 <_fputwc_r+0xb0>
 800af40:	80800017 	ldw	r2,0(r16)
 800af44:	11400005 	stb	r5,0(r2)
 800af48:	80c00017 	ldw	r3,0(r16)
 800af4c:	18c00044 	addi	r3,r3,1
 800af50:	80c00015 	stw	r3,0(r16)
 800af54:	8c400044 	addi	r17,r17,1
 800af58:	dc45883a 	add	r2,sp,r17
 800af5c:	8d00112e 	bgeu	r17,r20,800afa4 <_fputwc_r+0xf0>
 800af60:	11400003 	ldbu	r5,0(r2)
 800af64:	80c00217 	ldw	r3,8(r16)
 800af68:	18ffffc4 	addi	r3,r3,-1
 800af6c:	80c00215 	stw	r3,8(r16)
 800af70:	183ff30e 	bge	r3,zero,800af40 <__alt_data_end+0xfc00af40>
 800af74:	80800617 	ldw	r2,24(r16)
 800af78:	18801916 	blt	r3,r2,800afe0 <_fputwc_r+0x12c>
 800af7c:	80800017 	ldw	r2,0(r16)
 800af80:	11400005 	stb	r5,0(r2)
 800af84:	80800017 	ldw	r2,0(r16)
 800af88:	10c00003 	ldbu	r3,0(r2)
 800af8c:	10800044 	addi	r2,r2,1
 800af90:	1d402326 	beq	r3,r21,800b020 <_fputwc_r+0x16c>
 800af94:	80800015 	stw	r2,0(r16)
 800af98:	8c400044 	addi	r17,r17,1
 800af9c:	dc45883a 	add	r2,sp,r17
 800afa0:	8d3fef36 	bltu	r17,r20,800af60 <__alt_data_end+0xfc00af60>
 800afa4:	9005883a 	mov	r2,r18
 800afa8:	00000406 	br	800afbc <_fputwc_r+0x108>
 800afac:	80c0030b 	ldhu	r3,12(r16)
 800afb0:	a005883a 	mov	r2,r20
 800afb4:	18c01014 	ori	r3,r3,64
 800afb8:	80c0030d 	sth	r3,12(r16)
 800afbc:	dfc00717 	ldw	ra,28(sp)
 800afc0:	dd400617 	ldw	r21,24(sp)
 800afc4:	dd000517 	ldw	r20,20(sp)
 800afc8:	dcc00417 	ldw	r19,16(sp)
 800afcc:	dc800317 	ldw	r18,12(sp)
 800afd0:	dc400217 	ldw	r17,8(sp)
 800afd4:	dc000117 	ldw	r16,4(sp)
 800afd8:	dec00804 	addi	sp,sp,32
 800afdc:	f800283a 	ret
 800afe0:	9809883a 	mov	r4,r19
 800afe4:	29403fcc 	andi	r5,r5,255
 800afe8:	800d883a 	mov	r6,r16
 800afec:	800b1f40 	call	800b1f4 <__swbuf_r>
 800aff0:	10bfffe0 	cmpeqi	r2,r2,-1
 800aff4:	10803fcc 	andi	r2,r2,255
 800aff8:	103fd626 	beq	r2,zero,800af54 <__alt_data_end+0xfc00af54>
 800affc:	00bfffc4 	movi	r2,-1
 800b000:	003fee06 	br	800afbc <__alt_data_end+0xfc00afbc>
 800b004:	90ffffc4 	addi	r3,r18,-1
 800b008:	01003f84 	movi	r4,254
 800b00c:	20ffbf36 	bltu	r4,r3,800af0c <__alt_data_end+0xfc00af0c>
 800b010:	900b883a 	mov	r5,r18
 800b014:	dc800005 	stb	r18,0(sp)
 800b018:	1029883a 	mov	r20,r2
 800b01c:	003fc506 	br	800af34 <__alt_data_end+0xfc00af34>
 800b020:	9809883a 	mov	r4,r19
 800b024:	a80b883a 	mov	r5,r21
 800b028:	800d883a 	mov	r6,r16
 800b02c:	800b1f40 	call	800b1f4 <__swbuf_r>
 800b030:	10bfffe0 	cmpeqi	r2,r2,-1
 800b034:	003fef06 	br	800aff4 <__alt_data_end+0xfc00aff4>

0800b038 <fputwc>:
 800b038:	defffc04 	addi	sp,sp,-16
 800b03c:	dc000115 	stw	r16,4(sp)
 800b040:	04020074 	movhi	r16,2049
 800b044:	840e1f04 	addi	r16,r16,14460
 800b048:	dc400215 	stw	r17,8(sp)
 800b04c:	2023883a 	mov	r17,r4
 800b050:	81000017 	ldw	r4,0(r16)
 800b054:	dfc00315 	stw	ra,12(sp)
 800b058:	280d883a 	mov	r6,r5
 800b05c:	20000626 	beq	r4,zero,800b078 <fputwc+0x40>
 800b060:	20800e17 	ldw	r2,56(r4)
 800b064:	1000041e 	bne	r2,zero,800b078 <fputwc+0x40>
 800b068:	d9400015 	stw	r5,0(sp)
 800b06c:	80064d40 	call	80064d4 <__sinit>
 800b070:	81000017 	ldw	r4,0(r16)
 800b074:	d9800017 	ldw	r6,0(sp)
 800b078:	880b883a 	mov	r5,r17
 800b07c:	dfc00317 	ldw	ra,12(sp)
 800b080:	dc400217 	ldw	r17,8(sp)
 800b084:	dc000117 	ldw	r16,4(sp)
 800b088:	dec00404 	addi	sp,sp,16
 800b08c:	800aeb41 	jmpi	800aeb4 <_fputwc_r>

0800b090 <_fstat_r>:
 800b090:	defffd04 	addi	sp,sp,-12
 800b094:	dc000015 	stw	r16,0(sp)
 800b098:	04020074 	movhi	r16,2049
 800b09c:	dc400115 	stw	r17,4(sp)
 800b0a0:	8414f004 	addi	r16,r16,21440
 800b0a4:	2023883a 	mov	r17,r4
 800b0a8:	2809883a 	mov	r4,r5
 800b0ac:	300b883a 	mov	r5,r6
 800b0b0:	dfc00215 	stw	ra,8(sp)
 800b0b4:	80000015 	stw	zero,0(r16)
 800b0b8:	800ecb40 	call	800ecb4 <fstat>
 800b0bc:	00ffffc4 	movi	r3,-1
 800b0c0:	10c00526 	beq	r2,r3,800b0d8 <_fstat_r+0x48>
 800b0c4:	dfc00217 	ldw	ra,8(sp)
 800b0c8:	dc400117 	ldw	r17,4(sp)
 800b0cc:	dc000017 	ldw	r16,0(sp)
 800b0d0:	dec00304 	addi	sp,sp,12
 800b0d4:	f800283a 	ret
 800b0d8:	80c00017 	ldw	r3,0(r16)
 800b0dc:	183ff926 	beq	r3,zero,800b0c4 <__alt_data_end+0xfc00b0c4>
 800b0e0:	88c00015 	stw	r3,0(r17)
 800b0e4:	003ff706 	br	800b0c4 <__alt_data_end+0xfc00b0c4>

0800b0e8 <_isatty_r>:
 800b0e8:	defffd04 	addi	sp,sp,-12
 800b0ec:	dc000015 	stw	r16,0(sp)
 800b0f0:	04020074 	movhi	r16,2049
 800b0f4:	dc400115 	stw	r17,4(sp)
 800b0f8:	8414f004 	addi	r16,r16,21440
 800b0fc:	2023883a 	mov	r17,r4
 800b100:	2809883a 	mov	r4,r5
 800b104:	dfc00215 	stw	ra,8(sp)
 800b108:	80000015 	stw	zero,0(r16)
 800b10c:	800edbc0 	call	800edbc <isatty>
 800b110:	00ffffc4 	movi	r3,-1
 800b114:	10c00526 	beq	r2,r3,800b12c <_isatty_r+0x44>
 800b118:	dfc00217 	ldw	ra,8(sp)
 800b11c:	dc400117 	ldw	r17,4(sp)
 800b120:	dc000017 	ldw	r16,0(sp)
 800b124:	dec00304 	addi	sp,sp,12
 800b128:	f800283a 	ret
 800b12c:	80c00017 	ldw	r3,0(r16)
 800b130:	183ff926 	beq	r3,zero,800b118 <__alt_data_end+0xfc00b118>
 800b134:	88c00015 	stw	r3,0(r17)
 800b138:	003ff706 	br	800b118 <__alt_data_end+0xfc00b118>

0800b13c <_lseek_r>:
 800b13c:	defffd04 	addi	sp,sp,-12
 800b140:	dc000015 	stw	r16,0(sp)
 800b144:	04020074 	movhi	r16,2049
 800b148:	dc400115 	stw	r17,4(sp)
 800b14c:	8414f004 	addi	r16,r16,21440
 800b150:	2023883a 	mov	r17,r4
 800b154:	2809883a 	mov	r4,r5
 800b158:	300b883a 	mov	r5,r6
 800b15c:	380d883a 	mov	r6,r7
 800b160:	dfc00215 	stw	ra,8(sp)
 800b164:	80000015 	stw	zero,0(r16)
 800b168:	800ef9c0 	call	800ef9c <lseek>
 800b16c:	00ffffc4 	movi	r3,-1
 800b170:	10c00526 	beq	r2,r3,800b188 <_lseek_r+0x4c>
 800b174:	dfc00217 	ldw	ra,8(sp)
 800b178:	dc400117 	ldw	r17,4(sp)
 800b17c:	dc000017 	ldw	r16,0(sp)
 800b180:	dec00304 	addi	sp,sp,12
 800b184:	f800283a 	ret
 800b188:	80c00017 	ldw	r3,0(r16)
 800b18c:	183ff926 	beq	r3,zero,800b174 <__alt_data_end+0xfc00b174>
 800b190:	88c00015 	stw	r3,0(r17)
 800b194:	003ff706 	br	800b174 <__alt_data_end+0xfc00b174>

0800b198 <_read_r>:
 800b198:	defffd04 	addi	sp,sp,-12
 800b19c:	dc000015 	stw	r16,0(sp)
 800b1a0:	04020074 	movhi	r16,2049
 800b1a4:	dc400115 	stw	r17,4(sp)
 800b1a8:	8414f004 	addi	r16,r16,21440
 800b1ac:	2023883a 	mov	r17,r4
 800b1b0:	2809883a 	mov	r4,r5
 800b1b4:	300b883a 	mov	r5,r6
 800b1b8:	380d883a 	mov	r6,r7
 800b1bc:	dfc00215 	stw	ra,8(sp)
 800b1c0:	80000015 	stw	zero,0(r16)
 800b1c4:	800f1800 	call	800f180 <read>
 800b1c8:	00ffffc4 	movi	r3,-1
 800b1cc:	10c00526 	beq	r2,r3,800b1e4 <_read_r+0x4c>
 800b1d0:	dfc00217 	ldw	ra,8(sp)
 800b1d4:	dc400117 	ldw	r17,4(sp)
 800b1d8:	dc000017 	ldw	r16,0(sp)
 800b1dc:	dec00304 	addi	sp,sp,12
 800b1e0:	f800283a 	ret
 800b1e4:	80c00017 	ldw	r3,0(r16)
 800b1e8:	183ff926 	beq	r3,zero,800b1d0 <__alt_data_end+0xfc00b1d0>
 800b1ec:	88c00015 	stw	r3,0(r17)
 800b1f0:	003ff706 	br	800b1d0 <__alt_data_end+0xfc00b1d0>

0800b1f4 <__swbuf_r>:
 800b1f4:	defffc04 	addi	sp,sp,-16
 800b1f8:	dc800215 	stw	r18,8(sp)
 800b1fc:	dc400115 	stw	r17,4(sp)
 800b200:	dc000015 	stw	r16,0(sp)
 800b204:	dfc00315 	stw	ra,12(sp)
 800b208:	2025883a 	mov	r18,r4
 800b20c:	2823883a 	mov	r17,r5
 800b210:	3021883a 	mov	r16,r6
 800b214:	20000226 	beq	r4,zero,800b220 <__swbuf_r+0x2c>
 800b218:	20800e17 	ldw	r2,56(r4)
 800b21c:	10004126 	beq	r2,zero,800b324 <__swbuf_r+0x130>
 800b220:	80c00617 	ldw	r3,24(r16)
 800b224:	8180030b 	ldhu	r6,12(r16)
 800b228:	80c00215 	stw	r3,8(r16)
 800b22c:	30c0020c 	andi	r3,r6,8
 800b230:	18003526 	beq	r3,zero,800b308 <__swbuf_r+0x114>
 800b234:	80c00417 	ldw	r3,16(r16)
 800b238:	18003326 	beq	r3,zero,800b308 <__swbuf_r+0x114>
 800b23c:	3088000c 	andi	r2,r6,8192
 800b240:	8c403fcc 	andi	r17,r17,255
 800b244:	10001726 	beq	r2,zero,800b2a4 <__swbuf_r+0xb0>
 800b248:	80800017 	ldw	r2,0(r16)
 800b24c:	81000517 	ldw	r4,20(r16)
 800b250:	10c7c83a 	sub	r3,r2,r3
 800b254:	19001d0e 	bge	r3,r4,800b2cc <__swbuf_r+0xd8>
 800b258:	18c00044 	addi	r3,r3,1
 800b25c:	81400217 	ldw	r5,8(r16)
 800b260:	11000044 	addi	r4,r2,1
 800b264:	81000015 	stw	r4,0(r16)
 800b268:	297fffc4 	addi	r5,r5,-1
 800b26c:	81400215 	stw	r5,8(r16)
 800b270:	14400005 	stb	r17,0(r2)
 800b274:	80800517 	ldw	r2,20(r16)
 800b278:	10c01d26 	beq	r2,r3,800b2f0 <__swbuf_r+0xfc>
 800b27c:	8080030b 	ldhu	r2,12(r16)
 800b280:	1080004c 	andi	r2,r2,1
 800b284:	1000181e 	bne	r2,zero,800b2e8 <__swbuf_r+0xf4>
 800b288:	8805883a 	mov	r2,r17
 800b28c:	dfc00317 	ldw	ra,12(sp)
 800b290:	dc800217 	ldw	r18,8(sp)
 800b294:	dc400117 	ldw	r17,4(sp)
 800b298:	dc000017 	ldw	r16,0(sp)
 800b29c:	dec00404 	addi	sp,sp,16
 800b2a0:	f800283a 	ret
 800b2a4:	81001917 	ldw	r4,100(r16)
 800b2a8:	00b7ffc4 	movi	r2,-8193
 800b2ac:	31880014 	ori	r6,r6,8192
 800b2b0:	2084703a 	and	r2,r4,r2
 800b2b4:	80801915 	stw	r2,100(r16)
 800b2b8:	80800017 	ldw	r2,0(r16)
 800b2bc:	81000517 	ldw	r4,20(r16)
 800b2c0:	8180030d 	sth	r6,12(r16)
 800b2c4:	10c7c83a 	sub	r3,r2,r3
 800b2c8:	193fe316 	blt	r3,r4,800b258 <__alt_data_end+0xfc00b258>
 800b2cc:	9009883a 	mov	r4,r18
 800b2d0:	800b883a 	mov	r5,r16
 800b2d4:	8005f180 	call	8005f18 <_fflush_r>
 800b2d8:	1000091e 	bne	r2,zero,800b300 <__swbuf_r+0x10c>
 800b2dc:	80800017 	ldw	r2,0(r16)
 800b2e0:	00c00044 	movi	r3,1
 800b2e4:	003fdd06 	br	800b25c <__alt_data_end+0xfc00b25c>
 800b2e8:	00800284 	movi	r2,10
 800b2ec:	88bfe61e 	bne	r17,r2,800b288 <__alt_data_end+0xfc00b288>
 800b2f0:	9009883a 	mov	r4,r18
 800b2f4:	800b883a 	mov	r5,r16
 800b2f8:	8005f180 	call	8005f18 <_fflush_r>
 800b2fc:	103fe226 	beq	r2,zero,800b288 <__alt_data_end+0xfc00b288>
 800b300:	00bfffc4 	movi	r2,-1
 800b304:	003fe106 	br	800b28c <__alt_data_end+0xfc00b28c>
 800b308:	9009883a 	mov	r4,r18
 800b30c:	800b883a 	mov	r5,r16
 800b310:	80044980 	call	8004498 <__swsetup_r>
 800b314:	1000051e 	bne	r2,zero,800b32c <__swbuf_r+0x138>
 800b318:	8180030b 	ldhu	r6,12(r16)
 800b31c:	80c00417 	ldw	r3,16(r16)
 800b320:	003fc606 	br	800b23c <__alt_data_end+0xfc00b23c>
 800b324:	80064d40 	call	80064d4 <__sinit>
 800b328:	003fbd06 	br	800b220 <__alt_data_end+0xfc00b220>
 800b32c:	80c0030b 	ldhu	r3,12(r16)
 800b330:	00bfffc4 	movi	r2,-1
 800b334:	18c01014 	ori	r3,r3,64
 800b338:	80c0030d 	sth	r3,12(r16)
 800b33c:	00c00244 	movi	r3,9
 800b340:	90c00015 	stw	r3,0(r18)
 800b344:	003fd106 	br	800b28c <__alt_data_end+0xfc00b28c>

0800b348 <__swbuf>:
 800b348:	00c20074 	movhi	r3,2049
 800b34c:	18ce1f04 	addi	r3,r3,14460
 800b350:	2005883a 	mov	r2,r4
 800b354:	19000017 	ldw	r4,0(r3)
 800b358:	280d883a 	mov	r6,r5
 800b35c:	100b883a 	mov	r5,r2
 800b360:	800b1f41 	jmpi	800b1f4 <__swbuf_r>

0800b364 <_wcrtomb_r>:
 800b364:	defff604 	addi	sp,sp,-40
 800b368:	00820074 	movhi	r2,2049
 800b36c:	dc800815 	stw	r18,32(sp)
 800b370:	dc400715 	stw	r17,28(sp)
 800b374:	dc000615 	stw	r16,24(sp)
 800b378:	108e2304 	addi	r2,r2,14476
 800b37c:	dfc00915 	stw	ra,36(sp)
 800b380:	2021883a 	mov	r16,r4
 800b384:	3823883a 	mov	r17,r7
 800b388:	14800017 	ldw	r18,0(r2)
 800b38c:	28001426 	beq	r5,zero,800b3e0 <_wcrtomb_r+0x7c>
 800b390:	d9400415 	stw	r5,16(sp)
 800b394:	d9800515 	stw	r6,20(sp)
 800b398:	8006fc80 	call	8006fc8 <__locale_charset>
 800b39c:	d9400417 	ldw	r5,16(sp)
 800b3a0:	d9800517 	ldw	r6,20(sp)
 800b3a4:	8009883a 	mov	r4,r16
 800b3a8:	dc400015 	stw	r17,0(sp)
 800b3ac:	100f883a 	mov	r7,r2
 800b3b0:	903ee83a 	callr	r18
 800b3b4:	00ffffc4 	movi	r3,-1
 800b3b8:	10c0031e 	bne	r2,r3,800b3c8 <_wcrtomb_r+0x64>
 800b3bc:	88000015 	stw	zero,0(r17)
 800b3c0:	00c02284 	movi	r3,138
 800b3c4:	80c00015 	stw	r3,0(r16)
 800b3c8:	dfc00917 	ldw	ra,36(sp)
 800b3cc:	dc800817 	ldw	r18,32(sp)
 800b3d0:	dc400717 	ldw	r17,28(sp)
 800b3d4:	dc000617 	ldw	r16,24(sp)
 800b3d8:	dec00a04 	addi	sp,sp,40
 800b3dc:	f800283a 	ret
 800b3e0:	8006fc80 	call	8006fc8 <__locale_charset>
 800b3e4:	8009883a 	mov	r4,r16
 800b3e8:	dc400015 	stw	r17,0(sp)
 800b3ec:	d9400104 	addi	r5,sp,4
 800b3f0:	000d883a 	mov	r6,zero
 800b3f4:	100f883a 	mov	r7,r2
 800b3f8:	903ee83a 	callr	r18
 800b3fc:	003fed06 	br	800b3b4 <__alt_data_end+0xfc00b3b4>

0800b400 <wcrtomb>:
 800b400:	defff504 	addi	sp,sp,-44
 800b404:	dc400515 	stw	r17,20(sp)
 800b408:	dc000415 	stw	r16,16(sp)
 800b40c:	dfc00a15 	stw	ra,40(sp)
 800b410:	dd400915 	stw	r21,36(sp)
 800b414:	dd000815 	stw	r20,32(sp)
 800b418:	dcc00715 	stw	r19,28(sp)
 800b41c:	dc800615 	stw	r18,24(sp)
 800b420:	2021883a 	mov	r16,r4
 800b424:	3023883a 	mov	r17,r6
 800b428:	20001d26 	beq	r4,zero,800b4a0 <wcrtomb+0xa0>
 800b42c:	04820074 	movhi	r18,2049
 800b430:	948e1f04 	addi	r18,r18,14460
 800b434:	00820074 	movhi	r2,2049
 800b438:	95400017 	ldw	r21,0(r18)
 800b43c:	108e2304 	addi	r2,r2,14476
 800b440:	15000017 	ldw	r20,0(r2)
 800b444:	2827883a 	mov	r19,r5
 800b448:	8006fc80 	call	8006fc8 <__locale_charset>
 800b44c:	a809883a 	mov	r4,r21
 800b450:	dc400015 	stw	r17,0(sp)
 800b454:	800b883a 	mov	r5,r16
 800b458:	980d883a 	mov	r6,r19
 800b45c:	100f883a 	mov	r7,r2
 800b460:	a03ee83a 	callr	r20
 800b464:	00ffffc4 	movi	r3,-1
 800b468:	10c0041e 	bne	r2,r3,800b47c <wcrtomb+0x7c>
 800b46c:	90c00017 	ldw	r3,0(r18)
 800b470:	01002284 	movi	r4,138
 800b474:	88000015 	stw	zero,0(r17)
 800b478:	19000015 	stw	r4,0(r3)
 800b47c:	dfc00a17 	ldw	ra,40(sp)
 800b480:	dd400917 	ldw	r21,36(sp)
 800b484:	dd000817 	ldw	r20,32(sp)
 800b488:	dcc00717 	ldw	r19,28(sp)
 800b48c:	dc800617 	ldw	r18,24(sp)
 800b490:	dc400517 	ldw	r17,20(sp)
 800b494:	dc000417 	ldw	r16,16(sp)
 800b498:	dec00b04 	addi	sp,sp,44
 800b49c:	f800283a 	ret
 800b4a0:	04820074 	movhi	r18,2049
 800b4a4:	948e1f04 	addi	r18,r18,14460
 800b4a8:	00820074 	movhi	r2,2049
 800b4ac:	94c00017 	ldw	r19,0(r18)
 800b4b0:	108e2304 	addi	r2,r2,14476
 800b4b4:	14000017 	ldw	r16,0(r2)
 800b4b8:	8006fc80 	call	8006fc8 <__locale_charset>
 800b4bc:	9809883a 	mov	r4,r19
 800b4c0:	dc400015 	stw	r17,0(sp)
 800b4c4:	d9400104 	addi	r5,sp,4
 800b4c8:	000d883a 	mov	r6,zero
 800b4cc:	100f883a 	mov	r7,r2
 800b4d0:	803ee83a 	callr	r16
 800b4d4:	003fe306 	br	800b464 <__alt_data_end+0xfc00b464>

0800b4d8 <__ascii_wctomb>:
 800b4d8:	28000526 	beq	r5,zero,800b4f0 <__ascii_wctomb+0x18>
 800b4dc:	00803fc4 	movi	r2,255
 800b4e0:	11800536 	bltu	r2,r6,800b4f8 <__ascii_wctomb+0x20>
 800b4e4:	29800005 	stb	r6,0(r5)
 800b4e8:	00800044 	movi	r2,1
 800b4ec:	f800283a 	ret
 800b4f0:	0005883a 	mov	r2,zero
 800b4f4:	f800283a 	ret
 800b4f8:	00802284 	movi	r2,138
 800b4fc:	20800015 	stw	r2,0(r4)
 800b500:	00bfffc4 	movi	r2,-1
 800b504:	f800283a 	ret

0800b508 <_wctomb_r>:
 800b508:	00820074 	movhi	r2,2049
 800b50c:	defff904 	addi	sp,sp,-28
 800b510:	108e2304 	addi	r2,r2,14476
 800b514:	dfc00615 	stw	ra,24(sp)
 800b518:	dc400515 	stw	r17,20(sp)
 800b51c:	dc000415 	stw	r16,16(sp)
 800b520:	3823883a 	mov	r17,r7
 800b524:	14000017 	ldw	r16,0(r2)
 800b528:	d9000115 	stw	r4,4(sp)
 800b52c:	d9400215 	stw	r5,8(sp)
 800b530:	d9800315 	stw	r6,12(sp)
 800b534:	8006fc80 	call	8006fc8 <__locale_charset>
 800b538:	d9000117 	ldw	r4,4(sp)
 800b53c:	d9400217 	ldw	r5,8(sp)
 800b540:	d9800317 	ldw	r6,12(sp)
 800b544:	dc400015 	stw	r17,0(sp)
 800b548:	100f883a 	mov	r7,r2
 800b54c:	803ee83a 	callr	r16
 800b550:	dfc00617 	ldw	ra,24(sp)
 800b554:	dc400517 	ldw	r17,20(sp)
 800b558:	dc000417 	ldw	r16,16(sp)
 800b55c:	dec00704 	addi	sp,sp,28
 800b560:	f800283a 	ret

0800b564 <__udivdi3>:
 800b564:	defff504 	addi	sp,sp,-44
 800b568:	dcc00415 	stw	r19,16(sp)
 800b56c:	dc000115 	stw	r16,4(sp)
 800b570:	dfc00a15 	stw	ra,40(sp)
 800b574:	df000915 	stw	fp,36(sp)
 800b578:	ddc00815 	stw	r23,32(sp)
 800b57c:	dd800715 	stw	r22,28(sp)
 800b580:	dd400615 	stw	r21,24(sp)
 800b584:	dd000515 	stw	r20,20(sp)
 800b588:	dc800315 	stw	r18,12(sp)
 800b58c:	dc400215 	stw	r17,8(sp)
 800b590:	2027883a 	mov	r19,r4
 800b594:	2821883a 	mov	r16,r5
 800b598:	3800471e 	bne	r7,zero,800b6b8 <__udivdi3+0x154>
 800b59c:	3025883a 	mov	r18,r6
 800b5a0:	2023883a 	mov	r17,r4
 800b5a4:	2980592e 	bgeu	r5,r6,800b70c <__udivdi3+0x1a8>
 800b5a8:	00bfffd4 	movui	r2,65535
 800b5ac:	2829883a 	mov	r20,r5
 800b5b0:	1180b236 	bltu	r2,r6,800b87c <__udivdi3+0x318>
 800b5b4:	00803fc4 	movi	r2,255
 800b5b8:	1181622e 	bgeu	r2,r6,800bb44 <__udivdi3+0x5e0>
 800b5bc:	00800204 	movi	r2,8
 800b5c0:	1007883a 	mov	r3,r2
 800b5c4:	3084d83a 	srl	r2,r6,r2
 800b5c8:	01020074 	movhi	r4,2049
 800b5cc:	21072604 	addi	r4,r4,7320
 800b5d0:	2085883a 	add	r2,r4,r2
 800b5d4:	11000003 	ldbu	r4,0(r2)
 800b5d8:	20c9883a 	add	r4,r4,r3
 800b5dc:	00c00804 	movi	r3,32
 800b5e0:	1907c83a 	sub	r3,r3,r4
 800b5e4:	18000526 	beq	r3,zero,800b5fc <__udivdi3+0x98>
 800b5e8:	80e0983a 	sll	r16,r16,r3
 800b5ec:	9908d83a 	srl	r4,r19,r4
 800b5f0:	30e4983a 	sll	r18,r6,r3
 800b5f4:	98e2983a 	sll	r17,r19,r3
 800b5f8:	8128b03a 	or	r20,r16,r4
 800b5fc:	902ad43a 	srli	r21,r18,16
 800b600:	a009883a 	mov	r4,r20
 800b604:	95bfffcc 	andi	r22,r18,65535
 800b608:	a80b883a 	mov	r5,r21
 800b60c:	800c2e40 	call	800c2e4 <__umodsi3>
 800b610:	a009883a 	mov	r4,r20
 800b614:	a80b883a 	mov	r5,r21
 800b618:	102f883a 	mov	r23,r2
 800b61c:	800c2dc0 	call	800c2dc <__udivsi3>
 800b620:	1009883a 	mov	r4,r2
 800b624:	b00b883a 	mov	r5,r22
 800b628:	1021883a 	mov	r16,r2
 800b62c:	800c2ec0 	call	800c2ec <__mulsi3>
 800b630:	b82e943a 	slli	r23,r23,16
 800b634:	8808d43a 	srli	r4,r17,16
 800b638:	b906b03a 	or	r3,r23,r4
 800b63c:	1880052e 	bgeu	r3,r2,800b654 <__udivdi3+0xf0>
 800b640:	1c87883a 	add	r3,r3,r18
 800b644:	813fffc4 	addi	r4,r16,-1
 800b648:	1c800136 	bltu	r3,r18,800b650 <__udivdi3+0xec>
 800b64c:	18815236 	bltu	r3,r2,800bb98 <__udivdi3+0x634>
 800b650:	2021883a 	mov	r16,r4
 800b654:	18a7c83a 	sub	r19,r3,r2
 800b658:	9809883a 	mov	r4,r19
 800b65c:	a80b883a 	mov	r5,r21
 800b660:	800c2e40 	call	800c2e4 <__umodsi3>
 800b664:	1029883a 	mov	r20,r2
 800b668:	9809883a 	mov	r4,r19
 800b66c:	a80b883a 	mov	r5,r21
 800b670:	a028943a 	slli	r20,r20,16
 800b674:	800c2dc0 	call	800c2dc <__udivsi3>
 800b678:	1009883a 	mov	r4,r2
 800b67c:	b00b883a 	mov	r5,r22
 800b680:	8c7fffcc 	andi	r17,r17,65535
 800b684:	1027883a 	mov	r19,r2
 800b688:	a462b03a 	or	r17,r20,r17
 800b68c:	800c2ec0 	call	800c2ec <__mulsi3>
 800b690:	8880052e 	bgeu	r17,r2,800b6a8 <__udivdi3+0x144>
 800b694:	8ca3883a 	add	r17,r17,r18
 800b698:	98ffffc4 	addi	r3,r19,-1
 800b69c:	8c811036 	bltu	r17,r18,800bae0 <__udivdi3+0x57c>
 800b6a0:	88810f2e 	bgeu	r17,r2,800bae0 <__udivdi3+0x57c>
 800b6a4:	9cffff84 	addi	r19,r19,-2
 800b6a8:	8020943a 	slli	r16,r16,16
 800b6ac:	0007883a 	mov	r3,zero
 800b6b0:	9c04b03a 	or	r2,r19,r16
 800b6b4:	00006006 	br	800b838 <__udivdi3+0x2d4>
 800b6b8:	29c05d36 	bltu	r5,r7,800b830 <__udivdi3+0x2cc>
 800b6bc:	00bfffd4 	movui	r2,65535
 800b6c0:	11c0692e 	bgeu	r2,r7,800b868 <__udivdi3+0x304>
 800b6c4:	00804034 	movhi	r2,256
 800b6c8:	10bfffc4 	addi	r2,r2,-1
 800b6cc:	11c10e2e 	bgeu	r2,r7,800bb08 <__udivdi3+0x5a4>
 800b6d0:	01400604 	movi	r5,24
 800b6d4:	2811883a 	mov	r8,r5
 800b6d8:	394ad83a 	srl	r5,r7,r5
 800b6dc:	00820074 	movhi	r2,2049
 800b6e0:	10872604 	addi	r2,r2,7320
 800b6e4:	114b883a 	add	r5,r2,r5
 800b6e8:	29400003 	ldbu	r5,0(r5)
 800b6ec:	00c00804 	movi	r3,32
 800b6f0:	2a0b883a 	add	r5,r5,r8
 800b6f4:	196fc83a 	sub	r23,r3,r5
 800b6f8:	b8006b1e 	bne	r23,zero,800b8a8 <__udivdi3+0x344>
 800b6fc:	3c011436 	bltu	r7,r16,800bb50 <__udivdi3+0x5ec>
 800b700:	9985403a 	cmpgeu	r2,r19,r6
 800b704:	0007883a 	mov	r3,zero
 800b708:	00004b06 	br	800b838 <__udivdi3+0x2d4>
 800b70c:	3000041e 	bne	r6,zero,800b720 <__udivdi3+0x1bc>
 800b710:	01000044 	movi	r4,1
 800b714:	000b883a 	mov	r5,zero
 800b718:	800c2dc0 	call	800c2dc <__udivsi3>
 800b71c:	1025883a 	mov	r18,r2
 800b720:	00bfffd4 	movui	r2,65535
 800b724:	14805b2e 	bgeu	r2,r18,800b894 <__udivdi3+0x330>
 800b728:	00804034 	movhi	r2,256
 800b72c:	10bfffc4 	addi	r2,r2,-1
 800b730:	1480fe2e 	bgeu	r2,r18,800bb2c <__udivdi3+0x5c8>
 800b734:	00800604 	movi	r2,24
 800b738:	1007883a 	mov	r3,r2
 800b73c:	9084d83a 	srl	r2,r18,r2
 800b740:	01020074 	movhi	r4,2049
 800b744:	21072604 	addi	r4,r4,7320
 800b748:	2085883a 	add	r2,r4,r2
 800b74c:	11800003 	ldbu	r6,0(r2)
 800b750:	01c00804 	movi	r7,32
 800b754:	30c7883a 	add	r3,r6,r3
 800b758:	38cfc83a 	sub	r7,r7,r3
 800b75c:	3800a71e 	bne	r7,zero,800b9fc <__udivdi3+0x498>
 800b760:	9028d43a 	srli	r20,r18,16
 800b764:	84a1c83a 	sub	r16,r16,r18
 800b768:	957fffcc 	andi	r21,r18,65535
 800b76c:	00c00044 	movi	r3,1
 800b770:	8009883a 	mov	r4,r16
 800b774:	a00b883a 	mov	r5,r20
 800b778:	d8c00015 	stw	r3,0(sp)
 800b77c:	800c2e40 	call	800c2e4 <__umodsi3>
 800b780:	8009883a 	mov	r4,r16
 800b784:	a00b883a 	mov	r5,r20
 800b788:	102d883a 	mov	r22,r2
 800b78c:	800c2dc0 	call	800c2dc <__udivsi3>
 800b790:	1009883a 	mov	r4,r2
 800b794:	a80b883a 	mov	r5,r21
 800b798:	1021883a 	mov	r16,r2
 800b79c:	800c2ec0 	call	800c2ec <__mulsi3>
 800b7a0:	b02c943a 	slli	r22,r22,16
 800b7a4:	880ed43a 	srli	r7,r17,16
 800b7a8:	d8c00017 	ldw	r3,0(sp)
 800b7ac:	b1ccb03a 	or	r6,r22,r7
 800b7b0:	3080052e 	bgeu	r6,r2,800b7c8 <__udivdi3+0x264>
 800b7b4:	348d883a 	add	r6,r6,r18
 800b7b8:	813fffc4 	addi	r4,r16,-1
 800b7bc:	34800136 	bltu	r6,r18,800b7c4 <__udivdi3+0x260>
 800b7c0:	3080f236 	bltu	r6,r2,800bb8c <__udivdi3+0x628>
 800b7c4:	2021883a 	mov	r16,r4
 800b7c8:	30a7c83a 	sub	r19,r6,r2
 800b7cc:	9809883a 	mov	r4,r19
 800b7d0:	a00b883a 	mov	r5,r20
 800b7d4:	d8c00015 	stw	r3,0(sp)
 800b7d8:	800c2e40 	call	800c2e4 <__umodsi3>
 800b7dc:	102d883a 	mov	r22,r2
 800b7e0:	9809883a 	mov	r4,r19
 800b7e4:	a00b883a 	mov	r5,r20
 800b7e8:	b02c943a 	slli	r22,r22,16
 800b7ec:	800c2dc0 	call	800c2dc <__udivsi3>
 800b7f0:	1009883a 	mov	r4,r2
 800b7f4:	a80b883a 	mov	r5,r21
 800b7f8:	8c7fffcc 	andi	r17,r17,65535
 800b7fc:	1027883a 	mov	r19,r2
 800b800:	b462b03a 	or	r17,r22,r17
 800b804:	800c2ec0 	call	800c2ec <__mulsi3>
 800b808:	d8c00017 	ldw	r3,0(sp)
 800b80c:	8880052e 	bgeu	r17,r2,800b824 <__udivdi3+0x2c0>
 800b810:	8ca3883a 	add	r17,r17,r18
 800b814:	993fffc4 	addi	r4,r19,-1
 800b818:	8c80af36 	bltu	r17,r18,800bad8 <__udivdi3+0x574>
 800b81c:	8880ae2e 	bgeu	r17,r2,800bad8 <__udivdi3+0x574>
 800b820:	9cffff84 	addi	r19,r19,-2
 800b824:	8020943a 	slli	r16,r16,16
 800b828:	9c04b03a 	or	r2,r19,r16
 800b82c:	00000206 	br	800b838 <__udivdi3+0x2d4>
 800b830:	0007883a 	mov	r3,zero
 800b834:	0005883a 	mov	r2,zero
 800b838:	dfc00a17 	ldw	ra,40(sp)
 800b83c:	df000917 	ldw	fp,36(sp)
 800b840:	ddc00817 	ldw	r23,32(sp)
 800b844:	dd800717 	ldw	r22,28(sp)
 800b848:	dd400617 	ldw	r21,24(sp)
 800b84c:	dd000517 	ldw	r20,20(sp)
 800b850:	dcc00417 	ldw	r19,16(sp)
 800b854:	dc800317 	ldw	r18,12(sp)
 800b858:	dc400217 	ldw	r17,8(sp)
 800b85c:	dc000117 	ldw	r16,4(sp)
 800b860:	dec00b04 	addi	sp,sp,44
 800b864:	f800283a 	ret
 800b868:	00803fc4 	movi	r2,255
 800b86c:	11c0a92e 	bgeu	r2,r7,800bb14 <__udivdi3+0x5b0>
 800b870:	01400204 	movi	r5,8
 800b874:	2811883a 	mov	r8,r5
 800b878:	003f9706 	br	800b6d8 <__alt_data_end+0xfc00b6d8>
 800b87c:	00804034 	movhi	r2,256
 800b880:	10bfffc4 	addi	r2,r2,-1
 800b884:	1180a62e 	bgeu	r2,r6,800bb20 <__udivdi3+0x5bc>
 800b888:	00800604 	movi	r2,24
 800b88c:	1007883a 	mov	r3,r2
 800b890:	003f4c06 	br	800b5c4 <__alt_data_end+0xfc00b5c4>
 800b894:	00803fc4 	movi	r2,255
 800b898:	1480a72e 	bgeu	r2,r18,800bb38 <__udivdi3+0x5d4>
 800b89c:	00800204 	movi	r2,8
 800b8a0:	1007883a 	mov	r3,r2
 800b8a4:	003fa506 	br	800b73c <__alt_data_end+0xfc00b73c>
 800b8a8:	3178d83a 	srl	fp,r6,r5
 800b8ac:	3dce983a 	sll	r7,r7,r23
 800b8b0:	8168d83a 	srl	r20,r16,r5
 800b8b4:	9950d83a 	srl	r8,r19,r5
 800b8b8:	3f38b03a 	or	fp,r7,fp
 800b8bc:	e024d43a 	srli	r18,fp,16
 800b8c0:	85e0983a 	sll	r16,r16,r23
 800b8c4:	a009883a 	mov	r4,r20
 800b8c8:	900b883a 	mov	r5,r18
 800b8cc:	8220b03a 	or	r16,r16,r8
 800b8d0:	35ea983a 	sll	r21,r6,r23
 800b8d4:	800c2e40 	call	800c2e4 <__umodsi3>
 800b8d8:	a009883a 	mov	r4,r20
 800b8dc:	900b883a 	mov	r5,r18
 800b8e0:	1023883a 	mov	r17,r2
 800b8e4:	e5bfffcc 	andi	r22,fp,65535
 800b8e8:	800c2dc0 	call	800c2dc <__udivsi3>
 800b8ec:	1009883a 	mov	r4,r2
 800b8f0:	b00b883a 	mov	r5,r22
 800b8f4:	1029883a 	mov	r20,r2
 800b8f8:	800c2ec0 	call	800c2ec <__mulsi3>
 800b8fc:	8806943a 	slli	r3,r17,16
 800b900:	8014d43a 	srli	r10,r16,16
 800b904:	1a92b03a 	or	r9,r3,r10
 800b908:	4880042e 	bgeu	r9,r2,800b91c <__udivdi3+0x3b8>
 800b90c:	4f13883a 	add	r9,r9,fp
 800b910:	a0ffffc4 	addi	r3,r20,-1
 800b914:	4f00952e 	bgeu	r9,fp,800bb6c <__udivdi3+0x608>
 800b918:	1829883a 	mov	r20,r3
 800b91c:	48a3c83a 	sub	r17,r9,r2
 800b920:	8809883a 	mov	r4,r17
 800b924:	900b883a 	mov	r5,r18
 800b928:	800c2e40 	call	800c2e4 <__umodsi3>
 800b92c:	8809883a 	mov	r4,r17
 800b930:	900b883a 	mov	r5,r18
 800b934:	d8800015 	stw	r2,0(sp)
 800b938:	800c2dc0 	call	800c2dc <__udivsi3>
 800b93c:	1009883a 	mov	r4,r2
 800b940:	b00b883a 	mov	r5,r22
 800b944:	1023883a 	mov	r17,r2
 800b948:	800c2ec0 	call	800c2ec <__mulsi3>
 800b94c:	d8c00017 	ldw	r3,0(sp)
 800b950:	823fffcc 	andi	r8,r16,65535
 800b954:	1806943a 	slli	r3,r3,16
 800b958:	1a20b03a 	or	r16,r3,r8
 800b95c:	8080042e 	bgeu	r16,r2,800b970 <__udivdi3+0x40c>
 800b960:	8721883a 	add	r16,r16,fp
 800b964:	88ffffc4 	addi	r3,r17,-1
 800b968:	87007c2e 	bgeu	r16,fp,800bb5c <__udivdi3+0x5f8>
 800b96c:	1823883a 	mov	r17,r3
 800b970:	a028943a 	slli	r20,r20,16
 800b974:	acbfffcc 	andi	r18,r21,65535
 800b978:	900b883a 	mov	r5,r18
 800b97c:	8d28b03a 	or	r20,r17,r20
 800b980:	a022d43a 	srli	r17,r20,16
 800b984:	a5bfffcc 	andi	r22,r20,65535
 800b988:	b009883a 	mov	r4,r22
 800b98c:	a82ad43a 	srli	r21,r21,16
 800b990:	80a1c83a 	sub	r16,r16,r2
 800b994:	800c2ec0 	call	800c2ec <__mulsi3>
 800b998:	8809883a 	mov	r4,r17
 800b99c:	900b883a 	mov	r5,r18
 800b9a0:	1039883a 	mov	fp,r2
 800b9a4:	800c2ec0 	call	800c2ec <__mulsi3>
 800b9a8:	8809883a 	mov	r4,r17
 800b9ac:	a80b883a 	mov	r5,r21
 800b9b0:	1025883a 	mov	r18,r2
 800b9b4:	800c2ec0 	call	800c2ec <__mulsi3>
 800b9b8:	b009883a 	mov	r4,r22
 800b9bc:	a80b883a 	mov	r5,r21
 800b9c0:	1023883a 	mov	r17,r2
 800b9c4:	800c2ec0 	call	800c2ec <__mulsi3>
 800b9c8:	e006d43a 	srli	r3,fp,16
 800b9cc:	9085883a 	add	r2,r18,r2
 800b9d0:	10c7883a 	add	r3,r2,r3
 800b9d4:	1c80022e 	bgeu	r3,r18,800b9e0 <__udivdi3+0x47c>
 800b9d8:	00800074 	movhi	r2,1
 800b9dc:	88a3883a 	add	r17,r17,r2
 800b9e0:	1808d43a 	srli	r4,r3,16
 800b9e4:	8909883a 	add	r4,r17,r4
 800b9e8:	81004436 	bltu	r16,r4,800bafc <__udivdi3+0x598>
 800b9ec:	81003e26 	beq	r16,r4,800bae8 <__udivdi3+0x584>
 800b9f0:	a005883a 	mov	r2,r20
 800b9f4:	0007883a 	mov	r3,zero
 800b9f8:	003f8f06 	br	800b838 <__alt_data_end+0xfc00b838>
 800b9fc:	91e4983a 	sll	r18,r18,r7
 800ba00:	80eed83a 	srl	r23,r16,r3
 800ba04:	81cc983a 	sll	r6,r16,r7
 800ba08:	9028d43a 	srli	r20,r18,16
 800ba0c:	98c6d83a 	srl	r3,r19,r3
 800ba10:	b809883a 	mov	r4,r23
 800ba14:	a00b883a 	mov	r5,r20
 800ba18:	30ecb03a 	or	r22,r6,r3
 800ba1c:	99e2983a 	sll	r17,r19,r7
 800ba20:	800c2e40 	call	800c2e4 <__umodsi3>
 800ba24:	b809883a 	mov	r4,r23
 800ba28:	a00b883a 	mov	r5,r20
 800ba2c:	1021883a 	mov	r16,r2
 800ba30:	957fffcc 	andi	r21,r18,65535
 800ba34:	800c2dc0 	call	800c2dc <__udivsi3>
 800ba38:	a80b883a 	mov	r5,r21
 800ba3c:	1009883a 	mov	r4,r2
 800ba40:	102f883a 	mov	r23,r2
 800ba44:	800c2ec0 	call	800c2ec <__mulsi3>
 800ba48:	8020943a 	slli	r16,r16,16
 800ba4c:	b00ad43a 	srli	r5,r22,16
 800ba50:	814cb03a 	or	r6,r16,r5
 800ba54:	3080062e 	bgeu	r6,r2,800ba70 <__udivdi3+0x50c>
 800ba58:	348d883a 	add	r6,r6,r18
 800ba5c:	b8ffffc4 	addi	r3,r23,-1
 800ba60:	34804836 	bltu	r6,r18,800bb84 <__udivdi3+0x620>
 800ba64:	3080472e 	bgeu	r6,r2,800bb84 <__udivdi3+0x620>
 800ba68:	bdffff84 	addi	r23,r23,-2
 800ba6c:	348d883a 	add	r6,r6,r18
 800ba70:	30a7c83a 	sub	r19,r6,r2
 800ba74:	9809883a 	mov	r4,r19
 800ba78:	a00b883a 	mov	r5,r20
 800ba7c:	800c2e40 	call	800c2e4 <__umodsi3>
 800ba80:	9809883a 	mov	r4,r19
 800ba84:	a00b883a 	mov	r5,r20
 800ba88:	1039883a 	mov	fp,r2
 800ba8c:	800c2dc0 	call	800c2dc <__udivsi3>
 800ba90:	1009883a 	mov	r4,r2
 800ba94:	a80b883a 	mov	r5,r21
 800ba98:	e038943a 	slli	fp,fp,16
 800ba9c:	1027883a 	mov	r19,r2
 800baa0:	800c2ec0 	call	800c2ec <__mulsi3>
 800baa4:	b1bfffcc 	andi	r6,r22,65535
 800baa8:	e18cb03a 	or	r6,fp,r6
 800baac:	3080062e 	bgeu	r6,r2,800bac8 <__udivdi3+0x564>
 800bab0:	348d883a 	add	r6,r6,r18
 800bab4:	98ffffc4 	addi	r3,r19,-1
 800bab8:	34803036 	bltu	r6,r18,800bb7c <__udivdi3+0x618>
 800babc:	30802f2e 	bgeu	r6,r2,800bb7c <__udivdi3+0x618>
 800bac0:	9cffff84 	addi	r19,r19,-2
 800bac4:	348d883a 	add	r6,r6,r18
 800bac8:	b82e943a 	slli	r23,r23,16
 800bacc:	30a1c83a 	sub	r16,r6,r2
 800bad0:	9dc6b03a 	or	r3,r19,r23
 800bad4:	003f2606 	br	800b770 <__alt_data_end+0xfc00b770>
 800bad8:	2027883a 	mov	r19,r4
 800badc:	003f5106 	br	800b824 <__alt_data_end+0xfc00b824>
 800bae0:	1827883a 	mov	r19,r3
 800bae4:	003ef006 	br	800b6a8 <__alt_data_end+0xfc00b6a8>
 800bae8:	1808943a 	slli	r4,r3,16
 800baec:	9dc6983a 	sll	r3,r19,r23
 800baf0:	e73fffcc 	andi	fp,fp,65535
 800baf4:	2709883a 	add	r4,r4,fp
 800baf8:	193fbd2e 	bgeu	r3,r4,800b9f0 <__alt_data_end+0xfc00b9f0>
 800bafc:	a0bfffc4 	addi	r2,r20,-1
 800bb00:	0007883a 	mov	r3,zero
 800bb04:	003f4c06 	br	800b838 <__alt_data_end+0xfc00b838>
 800bb08:	01400404 	movi	r5,16
 800bb0c:	2811883a 	mov	r8,r5
 800bb10:	003ef106 	br	800b6d8 <__alt_data_end+0xfc00b6d8>
 800bb14:	000b883a 	mov	r5,zero
 800bb18:	0011883a 	mov	r8,zero
 800bb1c:	003eee06 	br	800b6d8 <__alt_data_end+0xfc00b6d8>
 800bb20:	00800404 	movi	r2,16
 800bb24:	1007883a 	mov	r3,r2
 800bb28:	003ea606 	br	800b5c4 <__alt_data_end+0xfc00b5c4>
 800bb2c:	00800404 	movi	r2,16
 800bb30:	1007883a 	mov	r3,r2
 800bb34:	003f0106 	br	800b73c <__alt_data_end+0xfc00b73c>
 800bb38:	0005883a 	mov	r2,zero
 800bb3c:	0007883a 	mov	r3,zero
 800bb40:	003efe06 	br	800b73c <__alt_data_end+0xfc00b73c>
 800bb44:	0005883a 	mov	r2,zero
 800bb48:	0007883a 	mov	r3,zero
 800bb4c:	003e9d06 	br	800b5c4 <__alt_data_end+0xfc00b5c4>
 800bb50:	0007883a 	mov	r3,zero
 800bb54:	00800044 	movi	r2,1
 800bb58:	003f3706 	br	800b838 <__alt_data_end+0xfc00b838>
 800bb5c:	80bf832e 	bgeu	r16,r2,800b96c <__alt_data_end+0xfc00b96c>
 800bb60:	8c7fff84 	addi	r17,r17,-2
 800bb64:	8721883a 	add	r16,r16,fp
 800bb68:	003f8106 	br	800b970 <__alt_data_end+0xfc00b970>
 800bb6c:	48bf6a2e 	bgeu	r9,r2,800b918 <__alt_data_end+0xfc00b918>
 800bb70:	a53fff84 	addi	r20,r20,-2
 800bb74:	4f13883a 	add	r9,r9,fp
 800bb78:	003f6806 	br	800b91c <__alt_data_end+0xfc00b91c>
 800bb7c:	1827883a 	mov	r19,r3
 800bb80:	003fd106 	br	800bac8 <__alt_data_end+0xfc00bac8>
 800bb84:	182f883a 	mov	r23,r3
 800bb88:	003fb906 	br	800ba70 <__alt_data_end+0xfc00ba70>
 800bb8c:	843fff84 	addi	r16,r16,-2
 800bb90:	348d883a 	add	r6,r6,r18
 800bb94:	003f0c06 	br	800b7c8 <__alt_data_end+0xfc00b7c8>
 800bb98:	843fff84 	addi	r16,r16,-2
 800bb9c:	1c87883a 	add	r3,r3,r18
 800bba0:	003eac06 	br	800b654 <__alt_data_end+0xfc00b654>

0800bba4 <__umoddi3>:
 800bba4:	defff404 	addi	sp,sp,-48
 800bba8:	dd800815 	stw	r22,32(sp)
 800bbac:	dc400315 	stw	r17,12(sp)
 800bbb0:	dc000215 	stw	r16,8(sp)
 800bbb4:	dfc00b15 	stw	ra,44(sp)
 800bbb8:	df000a15 	stw	fp,40(sp)
 800bbbc:	ddc00915 	stw	r23,36(sp)
 800bbc0:	dd400715 	stw	r21,28(sp)
 800bbc4:	dd000615 	stw	r20,24(sp)
 800bbc8:	dcc00515 	stw	r19,20(sp)
 800bbcc:	dc800415 	stw	r18,16(sp)
 800bbd0:	2021883a 	mov	r16,r4
 800bbd4:	2823883a 	mov	r17,r5
 800bbd8:	282d883a 	mov	r22,r5
 800bbdc:	38003c1e 	bne	r7,zero,800bcd0 <__umoddi3+0x12c>
 800bbe0:	3027883a 	mov	r19,r6
 800bbe4:	2029883a 	mov	r20,r4
 800bbe8:	2980522e 	bgeu	r5,r6,800bd34 <__umoddi3+0x190>
 800bbec:	00bfffd4 	movui	r2,65535
 800bbf0:	1180a436 	bltu	r2,r6,800be84 <__umoddi3+0x2e0>
 800bbf4:	00803fc4 	movi	r2,255
 800bbf8:	11815e2e 	bgeu	r2,r6,800c174 <__umoddi3+0x5d0>
 800bbfc:	01400204 	movi	r5,8
 800bc00:	2805883a 	mov	r2,r5
 800bc04:	314ad83a 	srl	r5,r6,r5
 800bc08:	00c20074 	movhi	r3,2049
 800bc0c:	18c72604 	addi	r3,r3,7320
 800bc10:	194b883a 	add	r5,r3,r5
 800bc14:	29000003 	ldbu	r4,0(r5)
 800bc18:	2089883a 	add	r4,r4,r2
 800bc1c:	00800804 	movi	r2,32
 800bc20:	1105c83a 	sub	r2,r2,r4
 800bc24:	10010c26 	beq	r2,zero,800c058 <__umoddi3+0x4b4>
 800bc28:	88a2983a 	sll	r17,r17,r2
 800bc2c:	8108d83a 	srl	r4,r16,r4
 800bc30:	30a6983a 	sll	r19,r6,r2
 800bc34:	80a8983a 	sll	r20,r16,r2
 800bc38:	1025883a 	mov	r18,r2
 800bc3c:	892cb03a 	or	r22,r17,r4
 800bc40:	9822d43a 	srli	r17,r19,16
 800bc44:	b009883a 	mov	r4,r22
 800bc48:	9d7fffcc 	andi	r21,r19,65535
 800bc4c:	880b883a 	mov	r5,r17
 800bc50:	800c2e40 	call	800c2e4 <__umodsi3>
 800bc54:	b009883a 	mov	r4,r22
 800bc58:	880b883a 	mov	r5,r17
 800bc5c:	102f883a 	mov	r23,r2
 800bc60:	800c2dc0 	call	800c2dc <__udivsi3>
 800bc64:	1009883a 	mov	r4,r2
 800bc68:	a80b883a 	mov	r5,r21
 800bc6c:	800c2ec0 	call	800c2ec <__mulsi3>
 800bc70:	b82e943a 	slli	r23,r23,16
 800bc74:	a008d43a 	srli	r4,r20,16
 800bc78:	b906b03a 	or	r3,r23,r4
 800bc7c:	1880042e 	bgeu	r3,r2,800bc90 <__umoddi3+0xec>
 800bc80:	1cc7883a 	add	r3,r3,r19
 800bc84:	1cc00236 	bltu	r3,r19,800bc90 <__umoddi3+0xec>
 800bc88:	1880012e 	bgeu	r3,r2,800bc90 <__umoddi3+0xec>
 800bc8c:	1cc7883a 	add	r3,r3,r19
 800bc90:	18a1c83a 	sub	r16,r3,r2
 800bc94:	8009883a 	mov	r4,r16
 800bc98:	880b883a 	mov	r5,r17
 800bc9c:	800c2e40 	call	800c2e4 <__umodsi3>
 800bca0:	8009883a 	mov	r4,r16
 800bca4:	880b883a 	mov	r5,r17
 800bca8:	102d883a 	mov	r22,r2
 800bcac:	800c2dc0 	call	800c2dc <__udivsi3>
 800bcb0:	1009883a 	mov	r4,r2
 800bcb4:	a80b883a 	mov	r5,r21
 800bcb8:	b02c943a 	slli	r22,r22,16
 800bcbc:	800c2ec0 	call	800c2ec <__mulsi3>
 800bcc0:	a13fffcc 	andi	r4,r20,65535
 800bcc4:	b106b03a 	or	r3,r22,r4
 800bcc8:	1880572e 	bgeu	r3,r2,800be28 <__umoddi3+0x284>
 800bccc:	00005206 	br	800be18 <__umoddi3+0x274>
 800bcd0:	29c05936 	bltu	r5,r7,800be38 <__umoddi3+0x294>
 800bcd4:	00bfffd4 	movui	r2,65535
 800bcd8:	11c0652e 	bgeu	r2,r7,800be70 <__umoddi3+0x2cc>
 800bcdc:	00804034 	movhi	r2,256
 800bce0:	10bfffc4 	addi	r2,r2,-1
 800bce4:	11c1172e 	bgeu	r2,r7,800c144 <__umoddi3+0x5a0>
 800bce8:	01400604 	movi	r5,24
 800bcec:	282b883a 	mov	r21,r5
 800bcf0:	394ad83a 	srl	r5,r7,r5
 800bcf4:	00c20074 	movhi	r3,2049
 800bcf8:	18c72604 	addi	r3,r3,7320
 800bcfc:	194b883a 	add	r5,r3,r5
 800bd00:	28800003 	ldbu	r2,0(r5)
 800bd04:	00c00804 	movi	r3,32
 800bd08:	156b883a 	add	r21,r2,r21
 800bd0c:	1d69c83a 	sub	r20,r3,r21
 800bd10:	a000671e 	bne	r20,zero,800beb0 <__umoddi3+0x30c>
 800bd14:	3c400136 	bltu	r7,r17,800bd1c <__umoddi3+0x178>
 800bd18:	81812336 	bltu	r16,r6,800c1a8 <__umoddi3+0x604>
 800bd1c:	8185c83a 	sub	r2,r16,r6
 800bd20:	89e3c83a 	sub	r17,r17,r7
 800bd24:	8087803a 	cmpltu	r3,r16,r2
 800bd28:	88edc83a 	sub	r22,r17,r3
 800bd2c:	b007883a 	mov	r3,r22
 800bd30:	00004306 	br	800be40 <__umoddi3+0x29c>
 800bd34:	3000041e 	bne	r6,zero,800bd48 <__umoddi3+0x1a4>
 800bd38:	01000044 	movi	r4,1
 800bd3c:	000b883a 	mov	r5,zero
 800bd40:	800c2dc0 	call	800c2dc <__udivsi3>
 800bd44:	1027883a 	mov	r19,r2
 800bd48:	00bfffd4 	movui	r2,65535
 800bd4c:	14c0532e 	bgeu	r2,r19,800be9c <__umoddi3+0x2f8>
 800bd50:	00804034 	movhi	r2,256
 800bd54:	10bfffc4 	addi	r2,r2,-1
 800bd58:	14c1032e 	bgeu	r2,r19,800c168 <__umoddi3+0x5c4>
 800bd5c:	00800604 	movi	r2,24
 800bd60:	1007883a 	mov	r3,r2
 800bd64:	9884d83a 	srl	r2,r19,r2
 800bd68:	01020074 	movhi	r4,2049
 800bd6c:	21072604 	addi	r4,r4,7320
 800bd70:	2085883a 	add	r2,r4,r2
 800bd74:	11000003 	ldbu	r4,0(r2)
 800bd78:	00800804 	movi	r2,32
 800bd7c:	20c7883a 	add	r3,r4,r3
 800bd80:	10c5c83a 	sub	r2,r2,r3
 800bd84:	1000b61e 	bne	r2,zero,800c060 <__umoddi3+0x4bc>
 800bd88:	982ad43a 	srli	r21,r19,16
 800bd8c:	8ce3c83a 	sub	r17,r17,r19
 800bd90:	9dbfffcc 	andi	r22,r19,65535
 800bd94:	0025883a 	mov	r18,zero
 800bd98:	8809883a 	mov	r4,r17
 800bd9c:	a80b883a 	mov	r5,r21
 800bda0:	800c2e40 	call	800c2e4 <__umodsi3>
 800bda4:	8809883a 	mov	r4,r17
 800bda8:	a80b883a 	mov	r5,r21
 800bdac:	102f883a 	mov	r23,r2
 800bdb0:	800c2dc0 	call	800c2dc <__udivsi3>
 800bdb4:	1009883a 	mov	r4,r2
 800bdb8:	b00b883a 	mov	r5,r22
 800bdbc:	800c2ec0 	call	800c2ec <__mulsi3>
 800bdc0:	b82e943a 	slli	r23,r23,16
 800bdc4:	a008d43a 	srli	r4,r20,16
 800bdc8:	b906b03a 	or	r3,r23,r4
 800bdcc:	1880032e 	bgeu	r3,r2,800bddc <__umoddi3+0x238>
 800bdd0:	1cc7883a 	add	r3,r3,r19
 800bdd4:	1cc00136 	bltu	r3,r19,800bddc <__umoddi3+0x238>
 800bdd8:	1880f136 	bltu	r3,r2,800c1a0 <__umoddi3+0x5fc>
 800bddc:	18a1c83a 	sub	r16,r3,r2
 800bde0:	8009883a 	mov	r4,r16
 800bde4:	a80b883a 	mov	r5,r21
 800bde8:	800c2e40 	call	800c2e4 <__umodsi3>
 800bdec:	8009883a 	mov	r4,r16
 800bdf0:	a80b883a 	mov	r5,r21
 800bdf4:	1023883a 	mov	r17,r2
 800bdf8:	800c2dc0 	call	800c2dc <__udivsi3>
 800bdfc:	1009883a 	mov	r4,r2
 800be00:	b00b883a 	mov	r5,r22
 800be04:	8822943a 	slli	r17,r17,16
 800be08:	800c2ec0 	call	800c2ec <__mulsi3>
 800be0c:	a13fffcc 	andi	r4,r20,65535
 800be10:	8906b03a 	or	r3,r17,r4
 800be14:	1880042e 	bgeu	r3,r2,800be28 <__umoddi3+0x284>
 800be18:	1cc7883a 	add	r3,r3,r19
 800be1c:	1cc00236 	bltu	r3,r19,800be28 <__umoddi3+0x284>
 800be20:	1880012e 	bgeu	r3,r2,800be28 <__umoddi3+0x284>
 800be24:	1cc7883a 	add	r3,r3,r19
 800be28:	1887c83a 	sub	r3,r3,r2
 800be2c:	1c84d83a 	srl	r2,r3,r18
 800be30:	0007883a 	mov	r3,zero
 800be34:	00000206 	br	800be40 <__umoddi3+0x29c>
 800be38:	2005883a 	mov	r2,r4
 800be3c:	2807883a 	mov	r3,r5
 800be40:	dfc00b17 	ldw	ra,44(sp)
 800be44:	df000a17 	ldw	fp,40(sp)
 800be48:	ddc00917 	ldw	r23,36(sp)
 800be4c:	dd800817 	ldw	r22,32(sp)
 800be50:	dd400717 	ldw	r21,28(sp)
 800be54:	dd000617 	ldw	r20,24(sp)
 800be58:	dcc00517 	ldw	r19,20(sp)
 800be5c:	dc800417 	ldw	r18,16(sp)
 800be60:	dc400317 	ldw	r17,12(sp)
 800be64:	dc000217 	ldw	r16,8(sp)
 800be68:	dec00c04 	addi	sp,sp,48
 800be6c:	f800283a 	ret
 800be70:	00803fc4 	movi	r2,255
 800be74:	11c0b02e 	bgeu	r2,r7,800c138 <__umoddi3+0x594>
 800be78:	01400204 	movi	r5,8
 800be7c:	282b883a 	mov	r21,r5
 800be80:	003f9b06 	br	800bcf0 <__alt_data_end+0xfc00bcf0>
 800be84:	00804034 	movhi	r2,256
 800be88:	10bfffc4 	addi	r2,r2,-1
 800be8c:	1180b02e 	bgeu	r2,r6,800c150 <__umoddi3+0x5ac>
 800be90:	01400604 	movi	r5,24
 800be94:	2805883a 	mov	r2,r5
 800be98:	003f5a06 	br	800bc04 <__alt_data_end+0xfc00bc04>
 800be9c:	00803fc4 	movi	r2,255
 800bea0:	14c0ae2e 	bgeu	r2,r19,800c15c <__umoddi3+0x5b8>
 800bea4:	00800204 	movi	r2,8
 800bea8:	1007883a 	mov	r3,r2
 800beac:	003fad06 	br	800bd64 <__alt_data_end+0xfc00bd64>
 800beb0:	3d0a983a 	sll	r5,r7,r20
 800beb4:	356cd83a 	srl	r22,r6,r21
 800beb8:	8d78d83a 	srl	fp,r17,r21
 800bebc:	8d10983a 	sll	r8,r17,r20
 800bec0:	2dacb03a 	or	r22,r5,r22
 800bec4:	b02ed43a 	srli	r23,r22,16
 800bec8:	8564d83a 	srl	r18,r16,r21
 800becc:	e009883a 	mov	r4,fp
 800bed0:	b80b883a 	mov	r5,r23
 800bed4:	44a4b03a 	or	r18,r8,r18
 800bed8:	3526983a 	sll	r19,r6,r20
 800bedc:	800c2e40 	call	800c2e4 <__umodsi3>
 800bee0:	e009883a 	mov	r4,fp
 800bee4:	b80b883a 	mov	r5,r23
 800bee8:	b47fffcc 	andi	r17,r22,65535
 800beec:	d8800015 	stw	r2,0(sp)
 800bef0:	800c2dc0 	call	800c2dc <__udivsi3>
 800bef4:	1009883a 	mov	r4,r2
 800bef8:	880b883a 	mov	r5,r17
 800befc:	1039883a 	mov	fp,r2
 800bf00:	800c2ec0 	call	800c2ec <__mulsi3>
 800bf04:	d9800017 	ldw	r6,0(sp)
 800bf08:	9008d43a 	srli	r4,r18,16
 800bf0c:	8520983a 	sll	r16,r16,r20
 800bf10:	300c943a 	slli	r6,r6,16
 800bf14:	3106b03a 	or	r3,r6,r4
 800bf18:	1880042e 	bgeu	r3,r2,800bf2c <__umoddi3+0x388>
 800bf1c:	1d87883a 	add	r3,r3,r22
 800bf20:	e13fffc4 	addi	r4,fp,-1
 800bf24:	1d809a2e 	bgeu	r3,r22,800c190 <__umoddi3+0x5ec>
 800bf28:	2039883a 	mov	fp,r4
 800bf2c:	1887c83a 	sub	r3,r3,r2
 800bf30:	1809883a 	mov	r4,r3
 800bf34:	b80b883a 	mov	r5,r23
 800bf38:	d8c00115 	stw	r3,4(sp)
 800bf3c:	800c2e40 	call	800c2e4 <__umodsi3>
 800bf40:	d8c00117 	ldw	r3,4(sp)
 800bf44:	b80b883a 	mov	r5,r23
 800bf48:	d8800015 	stw	r2,0(sp)
 800bf4c:	1809883a 	mov	r4,r3
 800bf50:	800c2dc0 	call	800c2dc <__udivsi3>
 800bf54:	880b883a 	mov	r5,r17
 800bf58:	1009883a 	mov	r4,r2
 800bf5c:	102f883a 	mov	r23,r2
 800bf60:	800c2ec0 	call	800c2ec <__mulsi3>
 800bf64:	d9800017 	ldw	r6,0(sp)
 800bf68:	947fffcc 	andi	r17,r18,65535
 800bf6c:	300c943a 	slli	r6,r6,16
 800bf70:	3464b03a 	or	r18,r6,r17
 800bf74:	9080042e 	bgeu	r18,r2,800bf88 <__umoddi3+0x3e4>
 800bf78:	95a5883a 	add	r18,r18,r22
 800bf7c:	b8ffffc4 	addi	r3,r23,-1
 800bf80:	95807f2e 	bgeu	r18,r22,800c180 <__umoddi3+0x5dc>
 800bf84:	182f883a 	mov	r23,r3
 800bf88:	e038943a 	slli	fp,fp,16
 800bf8c:	980cd43a 	srli	r6,r19,16
 800bf90:	98ffffcc 	andi	r3,r19,65535
 800bf94:	bf38b03a 	or	fp,r23,fp
 800bf98:	e02ed43a 	srli	r23,fp,16
 800bf9c:	e73fffcc 	andi	fp,fp,65535
 800bfa0:	180b883a 	mov	r5,r3
 800bfa4:	e009883a 	mov	r4,fp
 800bfa8:	d9800015 	stw	r6,0(sp)
 800bfac:	d8c00115 	stw	r3,4(sp)
 800bfb0:	90a5c83a 	sub	r18,r18,r2
 800bfb4:	800c2ec0 	call	800c2ec <__mulsi3>
 800bfb8:	d8c00117 	ldw	r3,4(sp)
 800bfbc:	b809883a 	mov	r4,r23
 800bfc0:	1023883a 	mov	r17,r2
 800bfc4:	180b883a 	mov	r5,r3
 800bfc8:	800c2ec0 	call	800c2ec <__mulsi3>
 800bfcc:	d9800017 	ldw	r6,0(sp)
 800bfd0:	b809883a 	mov	r4,r23
 800bfd4:	d8800115 	stw	r2,4(sp)
 800bfd8:	300b883a 	mov	r5,r6
 800bfdc:	302f883a 	mov	r23,r6
 800bfe0:	800c2ec0 	call	800c2ec <__mulsi3>
 800bfe4:	e009883a 	mov	r4,fp
 800bfe8:	b80b883a 	mov	r5,r23
 800bfec:	d8800015 	stw	r2,0(sp)
 800bff0:	800c2ec0 	call	800c2ec <__mulsi3>
 800bff4:	d8c00117 	ldw	r3,4(sp)
 800bff8:	880cd43a 	srli	r6,r17,16
 800bffc:	d9c00017 	ldw	r7,0(sp)
 800c000:	1885883a 	add	r2,r3,r2
 800c004:	118d883a 	add	r6,r2,r6
 800c008:	30c0022e 	bgeu	r6,r3,800c014 <__umoddi3+0x470>
 800c00c:	00800074 	movhi	r2,1
 800c010:	388f883a 	add	r7,r7,r2
 800c014:	3006d43a 	srli	r3,r6,16
 800c018:	300c943a 	slli	r6,r6,16
 800c01c:	8c7fffcc 	andi	r17,r17,65535
 800c020:	38c7883a 	add	r3,r7,r3
 800c024:	3463883a 	add	r17,r6,r17
 800c028:	90c03d36 	bltu	r18,r3,800c120 <__umoddi3+0x57c>
 800c02c:	90c06026 	beq	r18,r3,800c1b0 <__umoddi3+0x60c>
 800c030:	90c9c83a 	sub	r4,r18,r3
 800c034:	880f883a 	mov	r7,r17
 800c038:	81cfc83a 	sub	r7,r16,r7
 800c03c:	81c7803a 	cmpltu	r3,r16,r7
 800c040:	20c7c83a 	sub	r3,r4,r3
 800c044:	1d44983a 	sll	r2,r3,r21
 800c048:	3d0ed83a 	srl	r7,r7,r20
 800c04c:	1d06d83a 	srl	r3,r3,r20
 800c050:	11c4b03a 	or	r2,r2,r7
 800c054:	003f7a06 	br	800be40 <__alt_data_end+0xfc00be40>
 800c058:	0025883a 	mov	r18,zero
 800c05c:	003ef806 	br	800bc40 <__alt_data_end+0xfc00bc40>
 800c060:	98a6983a 	sll	r19,r19,r2
 800c064:	88e8d83a 	srl	r20,r17,r3
 800c068:	80c6d83a 	srl	r3,r16,r3
 800c06c:	982ad43a 	srli	r21,r19,16
 800c070:	88a2983a 	sll	r17,r17,r2
 800c074:	a009883a 	mov	r4,r20
 800c078:	a80b883a 	mov	r5,r21
 800c07c:	88eeb03a 	or	r23,r17,r3
 800c080:	1025883a 	mov	r18,r2
 800c084:	800c2e40 	call	800c2e4 <__umodsi3>
 800c088:	a009883a 	mov	r4,r20
 800c08c:	a80b883a 	mov	r5,r21
 800c090:	1023883a 	mov	r17,r2
 800c094:	9dbfffcc 	andi	r22,r19,65535
 800c098:	800c2dc0 	call	800c2dc <__udivsi3>
 800c09c:	1009883a 	mov	r4,r2
 800c0a0:	b00b883a 	mov	r5,r22
 800c0a4:	800c2ec0 	call	800c2ec <__mulsi3>
 800c0a8:	8822943a 	slli	r17,r17,16
 800c0ac:	b808d43a 	srli	r4,r23,16
 800c0b0:	84a8983a 	sll	r20,r16,r18
 800c0b4:	8906b03a 	or	r3,r17,r4
 800c0b8:	1880042e 	bgeu	r3,r2,800c0cc <__umoddi3+0x528>
 800c0bc:	1cc7883a 	add	r3,r3,r19
 800c0c0:	1cc00236 	bltu	r3,r19,800c0cc <__umoddi3+0x528>
 800c0c4:	1880012e 	bgeu	r3,r2,800c0cc <__umoddi3+0x528>
 800c0c8:	1cc7883a 	add	r3,r3,r19
 800c0cc:	18a1c83a 	sub	r16,r3,r2
 800c0d0:	8009883a 	mov	r4,r16
 800c0d4:	a80b883a 	mov	r5,r21
 800c0d8:	800c2e40 	call	800c2e4 <__umodsi3>
 800c0dc:	8009883a 	mov	r4,r16
 800c0e0:	a80b883a 	mov	r5,r21
 800c0e4:	1039883a 	mov	fp,r2
 800c0e8:	800c2dc0 	call	800c2dc <__udivsi3>
 800c0ec:	1009883a 	mov	r4,r2
 800c0f0:	b00b883a 	mov	r5,r22
 800c0f4:	800c2ec0 	call	800c2ec <__mulsi3>
 800c0f8:	e006943a 	slli	r3,fp,16
 800c0fc:	b93fffcc 	andi	r4,r23,65535
 800c100:	1906b03a 	or	r3,r3,r4
 800c104:	1880042e 	bgeu	r3,r2,800c118 <__umoddi3+0x574>
 800c108:	1cc7883a 	add	r3,r3,r19
 800c10c:	1cc00236 	bltu	r3,r19,800c118 <__umoddi3+0x574>
 800c110:	1880012e 	bgeu	r3,r2,800c118 <__umoddi3+0x574>
 800c114:	1cc7883a 	add	r3,r3,r19
 800c118:	18a3c83a 	sub	r17,r3,r2
 800c11c:	003f1e06 	br	800bd98 <__alt_data_end+0xfc00bd98>
 800c120:	8ccfc83a 	sub	r7,r17,r19
 800c124:	1d89c83a 	sub	r4,r3,r22
 800c128:	89e3803a 	cmpltu	r17,r17,r7
 800c12c:	2463c83a 	sub	r17,r4,r17
 800c130:	9449c83a 	sub	r4,r18,r17
 800c134:	003fc006 	br	800c038 <__alt_data_end+0xfc00c038>
 800c138:	000b883a 	mov	r5,zero
 800c13c:	002b883a 	mov	r21,zero
 800c140:	003eeb06 	br	800bcf0 <__alt_data_end+0xfc00bcf0>
 800c144:	01400404 	movi	r5,16
 800c148:	282b883a 	mov	r21,r5
 800c14c:	003ee806 	br	800bcf0 <__alt_data_end+0xfc00bcf0>
 800c150:	01400404 	movi	r5,16
 800c154:	2805883a 	mov	r2,r5
 800c158:	003eaa06 	br	800bc04 <__alt_data_end+0xfc00bc04>
 800c15c:	0005883a 	mov	r2,zero
 800c160:	0007883a 	mov	r3,zero
 800c164:	003eff06 	br	800bd64 <__alt_data_end+0xfc00bd64>
 800c168:	00800404 	movi	r2,16
 800c16c:	1007883a 	mov	r3,r2
 800c170:	003efc06 	br	800bd64 <__alt_data_end+0xfc00bd64>
 800c174:	000b883a 	mov	r5,zero
 800c178:	0005883a 	mov	r2,zero
 800c17c:	003ea106 	br	800bc04 <__alt_data_end+0xfc00bc04>
 800c180:	90bf802e 	bgeu	r18,r2,800bf84 <__alt_data_end+0xfc00bf84>
 800c184:	bdffff84 	addi	r23,r23,-2
 800c188:	95a5883a 	add	r18,r18,r22
 800c18c:	003f7e06 	br	800bf88 <__alt_data_end+0xfc00bf88>
 800c190:	18bf652e 	bgeu	r3,r2,800bf28 <__alt_data_end+0xfc00bf28>
 800c194:	e73fff84 	addi	fp,fp,-2
 800c198:	1d87883a 	add	r3,r3,r22
 800c19c:	003f6306 	br	800bf2c <__alt_data_end+0xfc00bf2c>
 800c1a0:	1cc7883a 	add	r3,r3,r19
 800c1a4:	003f0d06 	br	800bddc <__alt_data_end+0xfc00bddc>
 800c1a8:	8005883a 	mov	r2,r16
 800c1ac:	003edf06 	br	800bd2c <__alt_data_end+0xfc00bd2c>
 800c1b0:	847fdb36 	bltu	r16,r17,800c120 <__alt_data_end+0xfc00c120>
 800c1b4:	880f883a 	mov	r7,r17
 800c1b8:	0009883a 	mov	r4,zero
 800c1bc:	003f9e06 	br	800c038 <__alt_data_end+0xfc00c038>

0800c1c0 <udivmodsi4>:
 800c1c0:	2900182e 	bgeu	r5,r4,800c224 <udivmodsi4+0x64>
 800c1c4:	28001716 	blt	r5,zero,800c224 <udivmodsi4+0x64>
 800c1c8:	00800804 	movi	r2,32
 800c1cc:	00c00044 	movi	r3,1
 800c1d0:	00000206 	br	800c1dc <udivmodsi4+0x1c>
 800c1d4:	10001126 	beq	r2,zero,800c21c <udivmodsi4+0x5c>
 800c1d8:	28000516 	blt	r5,zero,800c1f0 <udivmodsi4+0x30>
 800c1dc:	294b883a 	add	r5,r5,r5
 800c1e0:	10bfffc4 	addi	r2,r2,-1
 800c1e4:	18c7883a 	add	r3,r3,r3
 800c1e8:	293ffa36 	bltu	r5,r4,800c1d4 <__alt_data_end+0xfc00c1d4>
 800c1ec:	18000b26 	beq	r3,zero,800c21c <udivmodsi4+0x5c>
 800c1f0:	0005883a 	mov	r2,zero
 800c1f4:	21400236 	bltu	r4,r5,800c200 <udivmodsi4+0x40>
 800c1f8:	2149c83a 	sub	r4,r4,r5
 800c1fc:	10c4b03a 	or	r2,r2,r3
 800c200:	1806d07a 	srli	r3,r3,1
 800c204:	280ad07a 	srli	r5,r5,1
 800c208:	183ffa1e 	bne	r3,zero,800c1f4 <__alt_data_end+0xfc00c1f4>
 800c20c:	3000011e 	bne	r6,zero,800c214 <udivmodsi4+0x54>
 800c210:	f800283a 	ret
 800c214:	2005883a 	mov	r2,r4
 800c218:	f800283a 	ret
 800c21c:	0005883a 	mov	r2,zero
 800c220:	003ffa06 	br	800c20c <__alt_data_end+0xfc00c20c>
 800c224:	00c00044 	movi	r3,1
 800c228:	003ff106 	br	800c1f0 <__alt_data_end+0xfc00c1f0>

0800c22c <__divsi3>:
 800c22c:	defffe04 	addi	sp,sp,-8
 800c230:	dfc00115 	stw	ra,4(sp)
 800c234:	dc000015 	stw	r16,0(sp)
 800c238:	20000b16 	blt	r4,zero,800c268 <__divsi3+0x3c>
 800c23c:	0021883a 	mov	r16,zero
 800c240:	28000c16 	blt	r5,zero,800c274 <__divsi3+0x48>
 800c244:	000d883a 	mov	r6,zero
 800c248:	800c1c00 	call	800c1c0 <udivmodsi4>
 800c24c:	0407c83a 	sub	r3,zero,r16
 800c250:	1884f03a 	xor	r2,r3,r2
 800c254:	1405883a 	add	r2,r2,r16
 800c258:	dfc00117 	ldw	ra,4(sp)
 800c25c:	dc000017 	ldw	r16,0(sp)
 800c260:	dec00204 	addi	sp,sp,8
 800c264:	f800283a 	ret
 800c268:	0109c83a 	sub	r4,zero,r4
 800c26c:	04000044 	movi	r16,1
 800c270:	283ff40e 	bge	r5,zero,800c244 <__alt_data_end+0xfc00c244>
 800c274:	014bc83a 	sub	r5,zero,r5
 800c278:	8400005c 	xori	r16,r16,1
 800c27c:	003ff106 	br	800c244 <__alt_data_end+0xfc00c244>

0800c280 <__modsi3>:
 800c280:	defffd04 	addi	sp,sp,-12
 800c284:	dfc00215 	stw	ra,8(sp)
 800c288:	dc400115 	stw	r17,4(sp)
 800c28c:	dc000015 	stw	r16,0(sp)
 800c290:	20000c16 	blt	r4,zero,800c2c4 <__modsi3+0x44>
 800c294:	0023883a 	mov	r17,zero
 800c298:	0021883a 	mov	r16,zero
 800c29c:	28000d16 	blt	r5,zero,800c2d4 <__modsi3+0x54>
 800c2a0:	01800044 	movi	r6,1
 800c2a4:	800c1c00 	call	800c1c0 <udivmodsi4>
 800c2a8:	1404f03a 	xor	r2,r2,r16
 800c2ac:	8885883a 	add	r2,r17,r2
 800c2b0:	dfc00217 	ldw	ra,8(sp)
 800c2b4:	dc400117 	ldw	r17,4(sp)
 800c2b8:	dc000017 	ldw	r16,0(sp)
 800c2bc:	dec00304 	addi	sp,sp,12
 800c2c0:	f800283a 	ret
 800c2c4:	0109c83a 	sub	r4,zero,r4
 800c2c8:	04400044 	movi	r17,1
 800c2cc:	043fffc4 	movi	r16,-1
 800c2d0:	283ff30e 	bge	r5,zero,800c2a0 <__alt_data_end+0xfc00c2a0>
 800c2d4:	014bc83a 	sub	r5,zero,r5
 800c2d8:	003ff106 	br	800c2a0 <__alt_data_end+0xfc00c2a0>

0800c2dc <__udivsi3>:
 800c2dc:	000d883a 	mov	r6,zero
 800c2e0:	800c1c01 	jmpi	800c1c0 <udivmodsi4>

0800c2e4 <__umodsi3>:
 800c2e4:	01800044 	movi	r6,1
 800c2e8:	800c1c01 	jmpi	800c1c0 <udivmodsi4>

0800c2ec <__mulsi3>:
 800c2ec:	0005883a 	mov	r2,zero
 800c2f0:	20000726 	beq	r4,zero,800c310 <__mulsi3+0x24>
 800c2f4:	20c0004c 	andi	r3,r4,1
 800c2f8:	2008d07a 	srli	r4,r4,1
 800c2fc:	18000126 	beq	r3,zero,800c304 <__mulsi3+0x18>
 800c300:	1145883a 	add	r2,r2,r5
 800c304:	294b883a 	add	r5,r5,r5
 800c308:	203ffa1e 	bne	r4,zero,800c2f4 <__alt_data_end+0xfc00c2f4>
 800c30c:	f800283a 	ret
 800c310:	f800283a 	ret

0800c314 <__adddf3>:
 800c314:	02000434 	movhi	r8,16
 800c318:	423fffc4 	addi	r8,r8,-1
 800c31c:	defffb04 	addi	sp,sp,-20
 800c320:	2a12703a 	and	r9,r5,r8
 800c324:	2806d7fa 	srli	r3,r5,31
 800c328:	3a10703a 	and	r8,r7,r8
 800c32c:	3804d53a 	srli	r2,r7,20
 800c330:	3014d77a 	srli	r10,r6,29
 800c334:	dc000015 	stw	r16,0(sp)
 800c338:	481290fa 	slli	r9,r9,3
 800c33c:	2820d53a 	srli	r16,r5,20
 800c340:	401090fa 	slli	r8,r8,3
 800c344:	200ad77a 	srli	r5,r4,29
 800c348:	380ed7fa 	srli	r7,r7,31
 800c34c:	dc800215 	stw	r18,8(sp)
 800c350:	dc400115 	stw	r17,4(sp)
 800c354:	dfc00415 	stw	ra,16(sp)
 800c358:	dcc00315 	stw	r19,12(sp)
 800c35c:	1c803fcc 	andi	r18,r3,255
 800c360:	8401ffcc 	andi	r16,r16,2047
 800c364:	494ab03a 	or	r5,r9,r5
 800c368:	202290fa 	slli	r17,r4,3
 800c36c:	1081ffcc 	andi	r2,r2,2047
 800c370:	4290b03a 	or	r8,r8,r10
 800c374:	300c90fa 	slli	r6,r6,3
 800c378:	91c07026 	beq	r18,r7,800c53c <__adddf3+0x228>
 800c37c:	8087c83a 	sub	r3,r16,r2
 800c380:	00c0b30e 	bge	zero,r3,800c650 <__adddf3+0x33c>
 800c384:	10002a1e 	bne	r2,zero,800c430 <__adddf3+0x11c>
 800c388:	4184b03a 	or	r2,r8,r6
 800c38c:	1000991e 	bne	r2,zero,800c5f4 <__adddf3+0x2e0>
 800c390:	888001cc 	andi	r2,r17,7
 800c394:	10005b26 	beq	r2,zero,800c504 <__adddf3+0x1f0>
 800c398:	88c003cc 	andi	r3,r17,15
 800c39c:	00800104 	movi	r2,4
 800c3a0:	18805826 	beq	r3,r2,800c504 <__adddf3+0x1f0>
 800c3a4:	89800104 	addi	r6,r17,4
 800c3a8:	3463803a 	cmpltu	r17,r6,r17
 800c3ac:	2c4b883a 	add	r5,r5,r17
 800c3b0:	2880202c 	andhi	r2,r5,128
 800c3b4:	9007883a 	mov	r3,r18
 800c3b8:	3023883a 	mov	r17,r6
 800c3bc:	10005426 	beq	r2,zero,800c510 <__adddf3+0x1fc>
 800c3c0:	84000044 	addi	r16,r16,1
 800c3c4:	0081ffc4 	movi	r2,2047
 800c3c8:	8080c126 	beq	r16,r2,800c6d0 <__adddf3+0x3bc>
 800c3cc:	013fe034 	movhi	r4,65408
 800c3d0:	213fffc4 	addi	r4,r4,-1
 800c3d4:	290a703a 	and	r5,r5,r4
 800c3d8:	2804977a 	slli	r2,r5,29
 800c3dc:	280a927a 	slli	r5,r5,9
 800c3e0:	8822d0fa 	srli	r17,r17,3
 800c3e4:	8401ffcc 	andi	r16,r16,2047
 800c3e8:	2808d33a 	srli	r4,r5,12
 800c3ec:	1444b03a 	or	r2,r2,r17
 800c3f0:	8401ffcc 	andi	r16,r16,2047
 800c3f4:	800a953a 	slli	r5,r16,20
 800c3f8:	18c03fcc 	andi	r3,r3,255
 800c3fc:	04000434 	movhi	r16,16
 800c400:	180697fa 	slli	r3,r3,31
 800c404:	843fffc4 	addi	r16,r16,-1
 800c408:	2420703a 	and	r16,r4,r16
 800c40c:	8160b03a 	or	r16,r16,r5
 800c410:	80c6b03a 	or	r3,r16,r3
 800c414:	dfc00417 	ldw	ra,16(sp)
 800c418:	dcc00317 	ldw	r19,12(sp)
 800c41c:	dc800217 	ldw	r18,8(sp)
 800c420:	dc400117 	ldw	r17,4(sp)
 800c424:	dc000017 	ldw	r16,0(sp)
 800c428:	dec00504 	addi	sp,sp,20
 800c42c:	f800283a 	ret
 800c430:	0081ffc4 	movi	r2,2047
 800c434:	80bfd626 	beq	r16,r2,800c390 <__alt_data_end+0xfc00c390>
 800c438:	42002034 	orhi	r8,r8,128
 800c43c:	00800e04 	movi	r2,56
 800c440:	10c0a616 	blt	r2,r3,800c6dc <__adddf3+0x3c8>
 800c444:	008007c4 	movi	r2,31
 800c448:	10c0c916 	blt	r2,r3,800c770 <__adddf3+0x45c>
 800c44c:	00800804 	movi	r2,32
 800c450:	10c5c83a 	sub	r2,r2,r3
 800c454:	408e983a 	sll	r7,r8,r2
 800c458:	30c8d83a 	srl	r4,r6,r3
 800c45c:	3084983a 	sll	r2,r6,r2
 800c460:	40c6d83a 	srl	r3,r8,r3
 800c464:	390cb03a 	or	r6,r7,r4
 800c468:	1004c03a 	cmpne	r2,r2,zero
 800c46c:	308cb03a 	or	r6,r6,r2
 800c470:	898dc83a 	sub	r6,r17,r6
 800c474:	89a3803a 	cmpltu	r17,r17,r6
 800c478:	28cbc83a 	sub	r5,r5,r3
 800c47c:	2c4bc83a 	sub	r5,r5,r17
 800c480:	3023883a 	mov	r17,r6
 800c484:	2880202c 	andhi	r2,r5,128
 800c488:	10006d26 	beq	r2,zero,800c640 <__adddf3+0x32c>
 800c48c:	04c02034 	movhi	r19,128
 800c490:	9cffffc4 	addi	r19,r19,-1
 800c494:	2ce6703a 	and	r19,r5,r19
 800c498:	98007e26 	beq	r19,zero,800c694 <__adddf3+0x380>
 800c49c:	9809883a 	mov	r4,r19
 800c4a0:	800eaac0 	call	800eaac <__clzsi2>
 800c4a4:	10fffe04 	addi	r3,r2,-8
 800c4a8:	010007c4 	movi	r4,31
 800c4ac:	20c07f16 	blt	r4,r3,800c6ac <__adddf3+0x398>
 800c4b0:	01400a04 	movi	r5,40
 800c4b4:	2885c83a 	sub	r2,r5,r2
 800c4b8:	888ad83a 	srl	r5,r17,r2
 800c4bc:	98e6983a 	sll	r19,r19,r3
 800c4c0:	88e2983a 	sll	r17,r17,r3
 800c4c4:	2ce6b03a 	or	r19,r5,r19
 800c4c8:	1c007c16 	blt	r3,r16,800c6bc <__adddf3+0x3a8>
 800c4cc:	1c21c83a 	sub	r16,r3,r16
 800c4d0:	81400044 	addi	r5,r16,1
 800c4d4:	00c007c4 	movi	r3,31
 800c4d8:	19409816 	blt	r3,r5,800c73c <__adddf3+0x428>
 800c4dc:	1c21c83a 	sub	r16,r3,r16
 800c4e0:	8c08983a 	sll	r4,r17,r16
 800c4e4:	8946d83a 	srl	r3,r17,r5
 800c4e8:	9c20983a 	sll	r16,r19,r16
 800c4ec:	2008c03a 	cmpne	r4,r4,zero
 800c4f0:	994ad83a 	srl	r5,r19,r5
 800c4f4:	1c06b03a 	or	r3,r3,r16
 800c4f8:	1922b03a 	or	r17,r3,r4
 800c4fc:	0021883a 	mov	r16,zero
 800c500:	003fa306 	br	800c390 <__alt_data_end+0xfc00c390>
 800c504:	2880202c 	andhi	r2,r5,128
 800c508:	9007883a 	mov	r3,r18
 800c50c:	103fac1e 	bne	r2,zero,800c3c0 <__alt_data_end+0xfc00c3c0>
 800c510:	2804977a 	slli	r2,r5,29
 800c514:	8822d0fa 	srli	r17,r17,3
 800c518:	0101ffc4 	movi	r4,2047
 800c51c:	280ad0fa 	srli	r5,r5,3
 800c520:	1444b03a 	or	r2,r2,r17
 800c524:	81002c26 	beq	r16,r4,800c5d8 <__adddf3+0x2c4>
 800c528:	8120703a 	and	r16,r16,r4
 800c52c:	01000434 	movhi	r4,16
 800c530:	213fffc4 	addi	r4,r4,-1
 800c534:	2908703a 	and	r4,r5,r4
 800c538:	003fad06 	br	800c3f0 <__alt_data_end+0xfc00c3f0>
 800c53c:	8089c83a 	sub	r4,r16,r2
 800c540:	01006a0e 	bge	zero,r4,800c6ec <__adddf3+0x3d8>
 800c544:	10003326 	beq	r2,zero,800c614 <__adddf3+0x300>
 800c548:	0081ffc4 	movi	r2,2047
 800c54c:	80bf9026 	beq	r16,r2,800c390 <__alt_data_end+0xfc00c390>
 800c550:	42002034 	orhi	r8,r8,128
 800c554:	00800e04 	movi	r2,56
 800c558:	1100b116 	blt	r2,r4,800c820 <__adddf3+0x50c>
 800c55c:	008007c4 	movi	r2,31
 800c560:	1100e216 	blt	r2,r4,800c8ec <__adddf3+0x5d8>
 800c564:	00800804 	movi	r2,32
 800c568:	1105c83a 	sub	r2,r2,r4
 800c56c:	4092983a 	sll	r9,r8,r2
 800c570:	310ed83a 	srl	r7,r6,r4
 800c574:	3084983a 	sll	r2,r6,r2
 800c578:	4110d83a 	srl	r8,r8,r4
 800c57c:	49ccb03a 	or	r6,r9,r7
 800c580:	1004c03a 	cmpne	r2,r2,zero
 800c584:	308cb03a 	or	r6,r6,r2
 800c588:	344d883a 	add	r6,r6,r17
 800c58c:	3463803a 	cmpltu	r17,r6,r17
 800c590:	414b883a 	add	r5,r8,r5
 800c594:	2c4b883a 	add	r5,r5,r17
 800c598:	3023883a 	mov	r17,r6
 800c59c:	2880202c 	andhi	r2,r5,128
 800c5a0:	10002726 	beq	r2,zero,800c640 <__adddf3+0x32c>
 800c5a4:	84000044 	addi	r16,r16,1
 800c5a8:	0081ffc4 	movi	r2,2047
 800c5ac:	8080ae26 	beq	r16,r2,800c868 <__adddf3+0x554>
 800c5b0:	00bfe034 	movhi	r2,65408
 800c5b4:	10bfffc4 	addi	r2,r2,-1
 800c5b8:	288a703a 	and	r5,r5,r2
 800c5bc:	880cd07a 	srli	r6,r17,1
 800c5c0:	280897fa 	slli	r4,r5,31
 800c5c4:	88c0004c 	andi	r3,r17,1
 800c5c8:	30e2b03a 	or	r17,r6,r3
 800c5cc:	280ad07a 	srli	r5,r5,1
 800c5d0:	8922b03a 	or	r17,r17,r4
 800c5d4:	003f6e06 	br	800c390 <__alt_data_end+0xfc00c390>
 800c5d8:	1148b03a 	or	r4,r2,r5
 800c5dc:	20003c26 	beq	r4,zero,800c6d0 <__adddf3+0x3bc>
 800c5e0:	29000234 	orhi	r4,r5,8
 800c5e4:	01400434 	movhi	r5,16
 800c5e8:	297fffc4 	addi	r5,r5,-1
 800c5ec:	2148703a 	and	r4,r4,r5
 800c5f0:	003f7f06 	br	800c3f0 <__alt_data_end+0xfc00c3f0>
 800c5f4:	18ffffc4 	addi	r3,r3,-1
 800c5f8:	18004d1e 	bne	r3,zero,800c730 <__adddf3+0x41c>
 800c5fc:	898dc83a 	sub	r6,r17,r6
 800c600:	89a3803a 	cmpltu	r17,r17,r6
 800c604:	2a0bc83a 	sub	r5,r5,r8
 800c608:	2c4bc83a 	sub	r5,r5,r17
 800c60c:	3023883a 	mov	r17,r6
 800c610:	003f9c06 	br	800c484 <__alt_data_end+0xfc00c484>
 800c614:	4184b03a 	or	r2,r8,r6
 800c618:	103f5d26 	beq	r2,zero,800c390 <__alt_data_end+0xfc00c390>
 800c61c:	213fffc4 	addi	r4,r4,-1
 800c620:	203fd926 	beq	r4,zero,800c588 <__alt_data_end+0xfc00c588>
 800c624:	0081ffc4 	movi	r2,2047
 800c628:	80bfca1e 	bne	r16,r2,800c554 <__alt_data_end+0xfc00c554>
 800c62c:	003f5806 	br	800c390 <__alt_data_end+0xfc00c390>
 800c630:	10c8b03a 	or	r4,r2,r3
 800c634:	20008b26 	beq	r4,zero,800c864 <__adddf3+0x550>
 800c638:	100b883a 	mov	r5,r2
 800c63c:	1823883a 	mov	r17,r3
 800c640:	888001cc 	andi	r2,r17,7
 800c644:	103f541e 	bne	r2,zero,800c398 <__alt_data_end+0xfc00c398>
 800c648:	9007883a 	mov	r3,r18
 800c64c:	003fb006 	br	800c510 <__alt_data_end+0xfc00c510>
 800c650:	1800531e 	bne	r3,zero,800c7a0 <__adddf3+0x48c>
 800c654:	80800044 	addi	r2,r16,1
 800c658:	1081ffcc 	andi	r2,r2,2047
 800c65c:	00c00044 	movi	r3,1
 800c660:	1880990e 	bge	r3,r2,800c8c8 <__adddf3+0x5b4>
 800c664:	8985c83a 	sub	r2,r17,r6
 800c668:	8887803a 	cmpltu	r3,r17,r2
 800c66c:	2a27c83a 	sub	r19,r5,r8
 800c670:	98e7c83a 	sub	r19,r19,r3
 800c674:	98c0202c 	andhi	r3,r19,128
 800c678:	18006226 	beq	r3,zero,800c804 <__adddf3+0x4f0>
 800c67c:	3463c83a 	sub	r17,r6,r17
 800c680:	4151c83a 	sub	r8,r8,r5
 800c684:	344d803a 	cmpltu	r6,r6,r17
 800c688:	41a7c83a 	sub	r19,r8,r6
 800c68c:	3825883a 	mov	r18,r7
 800c690:	983f821e 	bne	r19,zero,800c49c <__alt_data_end+0xfc00c49c>
 800c694:	8809883a 	mov	r4,r17
 800c698:	800eaac0 	call	800eaac <__clzsi2>
 800c69c:	10800804 	addi	r2,r2,32
 800c6a0:	10fffe04 	addi	r3,r2,-8
 800c6a4:	010007c4 	movi	r4,31
 800c6a8:	20ff810e 	bge	r4,r3,800c4b0 <__alt_data_end+0xfc00c4b0>
 800c6ac:	14fff604 	addi	r19,r2,-40
 800c6b0:	8ce6983a 	sll	r19,r17,r19
 800c6b4:	0023883a 	mov	r17,zero
 800c6b8:	1c3f840e 	bge	r3,r16,800c4cc <__alt_data_end+0xfc00c4cc>
 800c6bc:	017fe034 	movhi	r5,65408
 800c6c0:	297fffc4 	addi	r5,r5,-1
 800c6c4:	80e1c83a 	sub	r16,r16,r3
 800c6c8:	994a703a 	and	r5,r19,r5
 800c6cc:	003f3006 	br	800c390 <__alt_data_end+0xfc00c390>
 800c6d0:	0009883a 	mov	r4,zero
 800c6d4:	0005883a 	mov	r2,zero
 800c6d8:	003f4506 	br	800c3f0 <__alt_data_end+0xfc00c3f0>
 800c6dc:	418cb03a 	or	r6,r8,r6
 800c6e0:	300cc03a 	cmpne	r6,r6,zero
 800c6e4:	0007883a 	mov	r3,zero
 800c6e8:	003f6106 	br	800c470 <__alt_data_end+0xfc00c470>
 800c6ec:	2000921e 	bne	r4,zero,800c938 <__adddf3+0x624>
 800c6f0:	80800044 	addi	r2,r16,1
 800c6f4:	11c1ffcc 	andi	r7,r2,2047
 800c6f8:	01000044 	movi	r4,1
 800c6fc:	21c0610e 	bge	r4,r7,800c884 <__adddf3+0x570>
 800c700:	0101ffc4 	movi	r4,2047
 800c704:	1100a326 	beq	r2,r4,800c994 <__adddf3+0x680>
 800c708:	344d883a 	add	r6,r6,r17
 800c70c:	3463803a 	cmpltu	r17,r6,r17
 800c710:	414b883a 	add	r5,r8,r5
 800c714:	2c4b883a 	add	r5,r5,r17
 800c718:	282297fa 	slli	r17,r5,31
 800c71c:	300cd07a 	srli	r6,r6,1
 800c720:	280ad07a 	srli	r5,r5,1
 800c724:	1021883a 	mov	r16,r2
 800c728:	89a2b03a 	or	r17,r17,r6
 800c72c:	003f1806 	br	800c390 <__alt_data_end+0xfc00c390>
 800c730:	0081ffc4 	movi	r2,2047
 800c734:	80bf411e 	bne	r16,r2,800c43c <__alt_data_end+0xfc00c43c>
 800c738:	003f1506 	br	800c390 <__alt_data_end+0xfc00c390>
 800c73c:	80bff844 	addi	r2,r16,-31
 800c740:	00c00804 	movi	r3,32
 800c744:	9884d83a 	srl	r2,r19,r2
 800c748:	28c04a26 	beq	r5,r3,800c874 <__adddf3+0x560>
 800c74c:	00c00fc4 	movi	r3,63
 800c750:	1c21c83a 	sub	r16,r3,r16
 800c754:	9c26983a 	sll	r19,r19,r16
 800c758:	9c62b03a 	or	r17,r19,r17
 800c75c:	8822c03a 	cmpne	r17,r17,zero
 800c760:	88a2b03a 	or	r17,r17,r2
 800c764:	000b883a 	mov	r5,zero
 800c768:	0021883a 	mov	r16,zero
 800c76c:	003fb406 	br	800c640 <__alt_data_end+0xfc00c640>
 800c770:	18bff804 	addi	r2,r3,-32
 800c774:	01000804 	movi	r4,32
 800c778:	4084d83a 	srl	r2,r8,r2
 800c77c:	19003f26 	beq	r3,r4,800c87c <__adddf3+0x568>
 800c780:	01001004 	movi	r4,64
 800c784:	20c7c83a 	sub	r3,r4,r3
 800c788:	40d0983a 	sll	r8,r8,r3
 800c78c:	418cb03a 	or	r6,r8,r6
 800c790:	300cc03a 	cmpne	r6,r6,zero
 800c794:	308cb03a 	or	r6,r6,r2
 800c798:	0007883a 	mov	r3,zero
 800c79c:	003f3406 	br	800c470 <__alt_data_end+0xfc00c470>
 800c7a0:	80002326 	beq	r16,zero,800c830 <__adddf3+0x51c>
 800c7a4:	0101ffc4 	movi	r4,2047
 800c7a8:	11005e26 	beq	r2,r4,800c924 <__adddf3+0x610>
 800c7ac:	00c7c83a 	sub	r3,zero,r3
 800c7b0:	29402034 	orhi	r5,r5,128
 800c7b4:	01000e04 	movi	r4,56
 800c7b8:	20c07216 	blt	r4,r3,800c984 <__adddf3+0x670>
 800c7bc:	010007c4 	movi	r4,31
 800c7c0:	20c0ce16 	blt	r4,r3,800cafc <__adddf3+0x7e8>
 800c7c4:	01000804 	movi	r4,32
 800c7c8:	20c9c83a 	sub	r4,r4,r3
 800c7cc:	2914983a 	sll	r10,r5,r4
 800c7d0:	88d2d83a 	srl	r9,r17,r3
 800c7d4:	8908983a 	sll	r4,r17,r4
 800c7d8:	28c6d83a 	srl	r3,r5,r3
 800c7dc:	5262b03a 	or	r17,r10,r9
 800c7e0:	2008c03a 	cmpne	r4,r4,zero
 800c7e4:	8922b03a 	or	r17,r17,r4
 800c7e8:	3463c83a 	sub	r17,r6,r17
 800c7ec:	40c7c83a 	sub	r3,r8,r3
 800c7f0:	344d803a 	cmpltu	r6,r6,r17
 800c7f4:	198bc83a 	sub	r5,r3,r6
 800c7f8:	1021883a 	mov	r16,r2
 800c7fc:	3825883a 	mov	r18,r7
 800c800:	003f2006 	br	800c484 <__alt_data_end+0xfc00c484>
 800c804:	9886b03a 	or	r3,r19,r2
 800c808:	1800141e 	bne	r3,zero,800c85c <__adddf3+0x548>
 800c80c:	0007883a 	mov	r3,zero
 800c810:	000b883a 	mov	r5,zero
 800c814:	0023883a 	mov	r17,zero
 800c818:	0021883a 	mov	r16,zero
 800c81c:	003f3c06 	br	800c510 <__alt_data_end+0xfc00c510>
 800c820:	418cb03a 	or	r6,r8,r6
 800c824:	300cc03a 	cmpne	r6,r6,zero
 800c828:	0011883a 	mov	r8,zero
 800c82c:	003f5606 	br	800c588 <__alt_data_end+0xfc00c588>
 800c830:	2c48b03a 	or	r4,r5,r17
 800c834:	20003b26 	beq	r4,zero,800c924 <__adddf3+0x610>
 800c838:	00c6303a 	nor	r3,zero,r3
 800c83c:	1800371e 	bne	r3,zero,800c91c <__adddf3+0x608>
 800c840:	3463c83a 	sub	r17,r6,r17
 800c844:	414bc83a 	sub	r5,r8,r5
 800c848:	344d803a 	cmpltu	r6,r6,r17
 800c84c:	298bc83a 	sub	r5,r5,r6
 800c850:	1021883a 	mov	r16,r2
 800c854:	3825883a 	mov	r18,r7
 800c858:	003f0a06 	br	800c484 <__alt_data_end+0xfc00c484>
 800c85c:	1023883a 	mov	r17,r2
 800c860:	003f0d06 	br	800c498 <__alt_data_end+0xfc00c498>
 800c864:	0007883a 	mov	r3,zero
 800c868:	000b883a 	mov	r5,zero
 800c86c:	0023883a 	mov	r17,zero
 800c870:	003f2706 	br	800c510 <__alt_data_end+0xfc00c510>
 800c874:	0027883a 	mov	r19,zero
 800c878:	003fb706 	br	800c758 <__alt_data_end+0xfc00c758>
 800c87c:	0011883a 	mov	r8,zero
 800c880:	003fc206 	br	800c78c <__alt_data_end+0xfc00c78c>
 800c884:	2c44b03a 	or	r2,r5,r17
 800c888:	8000871e 	bne	r16,zero,800caa8 <__adddf3+0x794>
 800c88c:	1000b126 	beq	r2,zero,800cb54 <__adddf3+0x840>
 800c890:	4184b03a 	or	r2,r8,r6
 800c894:	103ebe26 	beq	r2,zero,800c390 <__alt_data_end+0xfc00c390>
 800c898:	3445883a 	add	r2,r6,r17
 800c89c:	1463803a 	cmpltu	r17,r2,r17
 800c8a0:	414b883a 	add	r5,r8,r5
 800c8a4:	2c4b883a 	add	r5,r5,r17
 800c8a8:	28c0202c 	andhi	r3,r5,128
 800c8ac:	1023883a 	mov	r17,r2
 800c8b0:	183f6326 	beq	r3,zero,800c640 <__alt_data_end+0xfc00c640>
 800c8b4:	00bfe034 	movhi	r2,65408
 800c8b8:	10bfffc4 	addi	r2,r2,-1
 800c8bc:	2021883a 	mov	r16,r4
 800c8c0:	288a703a 	and	r5,r5,r2
 800c8c4:	003eb206 	br	800c390 <__alt_data_end+0xfc00c390>
 800c8c8:	2c44b03a 	or	r2,r5,r17
 800c8cc:	8000251e 	bne	r16,zero,800c964 <__adddf3+0x650>
 800c8d0:	10004b1e 	bne	r2,zero,800ca00 <__adddf3+0x6ec>
 800c8d4:	4184b03a 	or	r2,r8,r6
 800c8d8:	103fe226 	beq	r2,zero,800c864 <__alt_data_end+0xfc00c864>
 800c8dc:	400b883a 	mov	r5,r8
 800c8e0:	3023883a 	mov	r17,r6
 800c8e4:	3825883a 	mov	r18,r7
 800c8e8:	003ea906 	br	800c390 <__alt_data_end+0xfc00c390>
 800c8ec:	20bff804 	addi	r2,r4,-32
 800c8f0:	01c00804 	movi	r7,32
 800c8f4:	4084d83a 	srl	r2,r8,r2
 800c8f8:	21c07e26 	beq	r4,r7,800caf4 <__adddf3+0x7e0>
 800c8fc:	01c01004 	movi	r7,64
 800c900:	3909c83a 	sub	r4,r7,r4
 800c904:	4110983a 	sll	r8,r8,r4
 800c908:	418cb03a 	or	r6,r8,r6
 800c90c:	300cc03a 	cmpne	r6,r6,zero
 800c910:	308cb03a 	or	r6,r6,r2
 800c914:	0011883a 	mov	r8,zero
 800c918:	003f1b06 	br	800c588 <__alt_data_end+0xfc00c588>
 800c91c:	0101ffc4 	movi	r4,2047
 800c920:	113fa41e 	bne	r2,r4,800c7b4 <__alt_data_end+0xfc00c7b4>
 800c924:	400b883a 	mov	r5,r8
 800c928:	3023883a 	mov	r17,r6
 800c92c:	1021883a 	mov	r16,r2
 800c930:	3825883a 	mov	r18,r7
 800c934:	003e9606 	br	800c390 <__alt_data_end+0xfc00c390>
 800c938:	80001a1e 	bne	r16,zero,800c9a4 <__adddf3+0x690>
 800c93c:	2c4eb03a 	or	r7,r5,r17
 800c940:	38005526 	beq	r7,zero,800ca98 <__adddf3+0x784>
 800c944:	0108303a 	nor	r4,zero,r4
 800c948:	2000511e 	bne	r4,zero,800ca90 <__adddf3+0x77c>
 800c94c:	89a3883a 	add	r17,r17,r6
 800c950:	414b883a 	add	r5,r8,r5
 800c954:	898d803a 	cmpltu	r6,r17,r6
 800c958:	298b883a 	add	r5,r5,r6
 800c95c:	1021883a 	mov	r16,r2
 800c960:	003f0e06 	br	800c59c <__alt_data_end+0xfc00c59c>
 800c964:	1000341e 	bne	r2,zero,800ca38 <__adddf3+0x724>
 800c968:	4184b03a 	or	r2,r8,r6
 800c96c:	10006f26 	beq	r2,zero,800cb2c <__adddf3+0x818>
 800c970:	400b883a 	mov	r5,r8
 800c974:	3023883a 	mov	r17,r6
 800c978:	3825883a 	mov	r18,r7
 800c97c:	0401ffc4 	movi	r16,2047
 800c980:	003e8306 	br	800c390 <__alt_data_end+0xfc00c390>
 800c984:	2c62b03a 	or	r17,r5,r17
 800c988:	8822c03a 	cmpne	r17,r17,zero
 800c98c:	0007883a 	mov	r3,zero
 800c990:	003f9506 	br	800c7e8 <__alt_data_end+0xfc00c7e8>
 800c994:	1021883a 	mov	r16,r2
 800c998:	000b883a 	mov	r5,zero
 800c99c:	0023883a 	mov	r17,zero
 800c9a0:	003edb06 	br	800c510 <__alt_data_end+0xfc00c510>
 800c9a4:	01c1ffc4 	movi	r7,2047
 800c9a8:	11c03b26 	beq	r2,r7,800ca98 <__adddf3+0x784>
 800c9ac:	0109c83a 	sub	r4,zero,r4
 800c9b0:	29402034 	orhi	r5,r5,128
 800c9b4:	01c00e04 	movi	r7,56
 800c9b8:	39006216 	blt	r7,r4,800cb44 <__adddf3+0x830>
 800c9bc:	01c007c4 	movi	r7,31
 800c9c0:	39006b16 	blt	r7,r4,800cb70 <__adddf3+0x85c>
 800c9c4:	01c00804 	movi	r7,32
 800c9c8:	390fc83a 	sub	r7,r7,r4
 800c9cc:	29d4983a 	sll	r10,r5,r7
 800c9d0:	8912d83a 	srl	r9,r17,r4
 800c9d4:	89ce983a 	sll	r7,r17,r7
 800c9d8:	2908d83a 	srl	r4,r5,r4
 800c9dc:	5262b03a 	or	r17,r10,r9
 800c9e0:	380ac03a 	cmpne	r5,r7,zero
 800c9e4:	8962b03a 	or	r17,r17,r5
 800c9e8:	89a3883a 	add	r17,r17,r6
 800c9ec:	2211883a 	add	r8,r4,r8
 800c9f0:	898d803a 	cmpltu	r6,r17,r6
 800c9f4:	418b883a 	add	r5,r8,r6
 800c9f8:	1021883a 	mov	r16,r2
 800c9fc:	003ee706 	br	800c59c <__alt_data_end+0xfc00c59c>
 800ca00:	4184b03a 	or	r2,r8,r6
 800ca04:	103e6226 	beq	r2,zero,800c390 <__alt_data_end+0xfc00c390>
 800ca08:	8987c83a 	sub	r3,r17,r6
 800ca0c:	88c9803a 	cmpltu	r4,r17,r3
 800ca10:	2a05c83a 	sub	r2,r5,r8
 800ca14:	1105c83a 	sub	r2,r2,r4
 800ca18:	1100202c 	andhi	r4,r2,128
 800ca1c:	203f0426 	beq	r4,zero,800c630 <__alt_data_end+0xfc00c630>
 800ca20:	3463c83a 	sub	r17,r6,r17
 800ca24:	414bc83a 	sub	r5,r8,r5
 800ca28:	344d803a 	cmpltu	r6,r6,r17
 800ca2c:	298bc83a 	sub	r5,r5,r6
 800ca30:	3825883a 	mov	r18,r7
 800ca34:	003e5606 	br	800c390 <__alt_data_end+0xfc00c390>
 800ca38:	4184b03a 	or	r2,r8,r6
 800ca3c:	10002b26 	beq	r2,zero,800caec <__adddf3+0x7d8>
 800ca40:	2804d0fa 	srli	r2,r5,3
 800ca44:	8822d0fa 	srli	r17,r17,3
 800ca48:	280a977a 	slli	r5,r5,29
 800ca4c:	10c0022c 	andhi	r3,r2,8
 800ca50:	2c62b03a 	or	r17,r5,r17
 800ca54:	18000826 	beq	r3,zero,800ca78 <__adddf3+0x764>
 800ca58:	4008d0fa 	srli	r4,r8,3
 800ca5c:	20c0022c 	andhi	r3,r4,8
 800ca60:	1800051e 	bne	r3,zero,800ca78 <__adddf3+0x764>
 800ca64:	300cd0fa 	srli	r6,r6,3
 800ca68:	4010977a 	slli	r8,r8,29
 800ca6c:	2005883a 	mov	r2,r4
 800ca70:	3825883a 	mov	r18,r7
 800ca74:	41a2b03a 	or	r17,r8,r6
 800ca78:	880ad77a 	srli	r5,r17,29
 800ca7c:	100490fa 	slli	r2,r2,3
 800ca80:	882290fa 	slli	r17,r17,3
 800ca84:	0401ffc4 	movi	r16,2047
 800ca88:	288ab03a 	or	r5,r5,r2
 800ca8c:	003e4006 	br	800c390 <__alt_data_end+0xfc00c390>
 800ca90:	01c1ffc4 	movi	r7,2047
 800ca94:	11ffc71e 	bne	r2,r7,800c9b4 <__alt_data_end+0xfc00c9b4>
 800ca98:	400b883a 	mov	r5,r8
 800ca9c:	3023883a 	mov	r17,r6
 800caa0:	1021883a 	mov	r16,r2
 800caa4:	003e3a06 	br	800c390 <__alt_data_end+0xfc00c390>
 800caa8:	10002d26 	beq	r2,zero,800cb60 <__adddf3+0x84c>
 800caac:	4184b03a 	or	r2,r8,r6
 800cab0:	10000e26 	beq	r2,zero,800caec <__adddf3+0x7d8>
 800cab4:	2804d0fa 	srli	r2,r5,3
 800cab8:	8822d0fa 	srli	r17,r17,3
 800cabc:	280a977a 	slli	r5,r5,29
 800cac0:	10c0022c 	andhi	r3,r2,8
 800cac4:	2c62b03a 	or	r17,r5,r17
 800cac8:	183feb26 	beq	r3,zero,800ca78 <__alt_data_end+0xfc00ca78>
 800cacc:	4008d0fa 	srli	r4,r8,3
 800cad0:	20c0022c 	andhi	r3,r4,8
 800cad4:	183fe81e 	bne	r3,zero,800ca78 <__alt_data_end+0xfc00ca78>
 800cad8:	300cd0fa 	srli	r6,r6,3
 800cadc:	4010977a 	slli	r8,r8,29
 800cae0:	2005883a 	mov	r2,r4
 800cae4:	41a2b03a 	or	r17,r8,r6
 800cae8:	003fe306 	br	800ca78 <__alt_data_end+0xfc00ca78>
 800caec:	0401ffc4 	movi	r16,2047
 800caf0:	003e2706 	br	800c390 <__alt_data_end+0xfc00c390>
 800caf4:	0011883a 	mov	r8,zero
 800caf8:	003f8306 	br	800c908 <__alt_data_end+0xfc00c908>
 800cafc:	193ff804 	addi	r4,r3,-32
 800cb00:	02400804 	movi	r9,32
 800cb04:	2908d83a 	srl	r4,r5,r4
 800cb08:	1a402526 	beq	r3,r9,800cba0 <__adddf3+0x88c>
 800cb0c:	02401004 	movi	r9,64
 800cb10:	48c7c83a 	sub	r3,r9,r3
 800cb14:	28ca983a 	sll	r5,r5,r3
 800cb18:	2c62b03a 	or	r17,r5,r17
 800cb1c:	8822c03a 	cmpne	r17,r17,zero
 800cb20:	8922b03a 	or	r17,r17,r4
 800cb24:	0007883a 	mov	r3,zero
 800cb28:	003f2f06 	br	800c7e8 <__alt_data_end+0xfc00c7e8>
 800cb2c:	01402034 	movhi	r5,128
 800cb30:	0007883a 	mov	r3,zero
 800cb34:	297fffc4 	addi	r5,r5,-1
 800cb38:	047ffe04 	movi	r17,-8
 800cb3c:	0401ffc4 	movi	r16,2047
 800cb40:	003e7306 	br	800c510 <__alt_data_end+0xfc00c510>
 800cb44:	2c62b03a 	or	r17,r5,r17
 800cb48:	8822c03a 	cmpne	r17,r17,zero
 800cb4c:	0009883a 	mov	r4,zero
 800cb50:	003fa506 	br	800c9e8 <__alt_data_end+0xfc00c9e8>
 800cb54:	400b883a 	mov	r5,r8
 800cb58:	3023883a 	mov	r17,r6
 800cb5c:	003e0c06 	br	800c390 <__alt_data_end+0xfc00c390>
 800cb60:	400b883a 	mov	r5,r8
 800cb64:	3023883a 	mov	r17,r6
 800cb68:	0401ffc4 	movi	r16,2047
 800cb6c:	003e0806 	br	800c390 <__alt_data_end+0xfc00c390>
 800cb70:	21fff804 	addi	r7,r4,-32
 800cb74:	02400804 	movi	r9,32
 800cb78:	29ced83a 	srl	r7,r5,r7
 800cb7c:	22400a26 	beq	r4,r9,800cba8 <__adddf3+0x894>
 800cb80:	02401004 	movi	r9,64
 800cb84:	4909c83a 	sub	r4,r9,r4
 800cb88:	290a983a 	sll	r5,r5,r4
 800cb8c:	2c62b03a 	or	r17,r5,r17
 800cb90:	8822c03a 	cmpne	r17,r17,zero
 800cb94:	89e2b03a 	or	r17,r17,r7
 800cb98:	0009883a 	mov	r4,zero
 800cb9c:	003f9206 	br	800c9e8 <__alt_data_end+0xfc00c9e8>
 800cba0:	000b883a 	mov	r5,zero
 800cba4:	003fdc06 	br	800cb18 <__alt_data_end+0xfc00cb18>
 800cba8:	000b883a 	mov	r5,zero
 800cbac:	003ff706 	br	800cb8c <__alt_data_end+0xfc00cb8c>

0800cbb0 <__divdf3>:
 800cbb0:	defff004 	addi	sp,sp,-64
 800cbb4:	dc800815 	stw	r18,32(sp)
 800cbb8:	2824d53a 	srli	r18,r5,20
 800cbbc:	dd800c15 	stw	r22,48(sp)
 800cbc0:	282cd7fa 	srli	r22,r5,31
 800cbc4:	dc000615 	stw	r16,24(sp)
 800cbc8:	04000434 	movhi	r16,16
 800cbcc:	df000e15 	stw	fp,56(sp)
 800cbd0:	dd000a15 	stw	r20,40(sp)
 800cbd4:	dcc00915 	stw	r19,36(sp)
 800cbd8:	dc400715 	stw	r17,28(sp)
 800cbdc:	843fffc4 	addi	r16,r16,-1
 800cbe0:	dfc00f15 	stw	ra,60(sp)
 800cbe4:	ddc00d15 	stw	r23,52(sp)
 800cbe8:	dd400b15 	stw	r21,44(sp)
 800cbec:	9481ffcc 	andi	r18,r18,2047
 800cbf0:	2029883a 	mov	r20,r4
 800cbf4:	2027883a 	mov	r19,r4
 800cbf8:	2c22703a 	and	r17,r5,r16
 800cbfc:	b7003fcc 	andi	fp,r22,255
 800cc00:	90005e26 	beq	r18,zero,800cd7c <__divdf3+0x1cc>
 800cc04:	0081ffc4 	movi	r2,2047
 800cc08:	90803526 	beq	r18,r2,800cce0 <__divdf3+0x130>
 800cc0c:	8c000434 	orhi	r16,r17,16
 800cc10:	2004d77a 	srli	r2,r4,29
 800cc14:	802090fa 	slli	r16,r16,3
 800cc18:	202690fa 	slli	r19,r4,3
 800cc1c:	94bf0044 	addi	r18,r18,-1023
 800cc20:	80a2b03a 	or	r17,r16,r2
 800cc24:	0029883a 	mov	r20,zero
 800cc28:	0011883a 	mov	r8,zero
 800cc2c:	380ad53a 	srli	r5,r7,20
 800cc30:	382ed7fa 	srli	r23,r7,31
 800cc34:	04000434 	movhi	r16,16
 800cc38:	843fffc4 	addi	r16,r16,-1
 800cc3c:	2941ffcc 	andi	r5,r5,2047
 800cc40:	302b883a 	mov	r21,r6
 800cc44:	3c20703a 	and	r16,r7,r16
 800cc48:	ba403fcc 	andi	r9,r23,255
 800cc4c:	28006726 	beq	r5,zero,800cdec <__divdf3+0x23c>
 800cc50:	0081ffc4 	movi	r2,2047
 800cc54:	28805f26 	beq	r5,r2,800cdd4 <__divdf3+0x224>
 800cc58:	84000434 	orhi	r16,r16,16
 800cc5c:	3004d77a 	srli	r2,r6,29
 800cc60:	802090fa 	slli	r16,r16,3
 800cc64:	302a90fa 	slli	r21,r6,3
 800cc68:	297f0044 	addi	r5,r5,-1023
 800cc6c:	80a0b03a 	or	r16,r16,r2
 800cc70:	000f883a 	mov	r7,zero
 800cc74:	3d06b03a 	or	r3,r7,r20
 800cc78:	180690ba 	slli	r3,r3,2
 800cc7c:	00820074 	movhi	r2,2049
 800cc80:	10b32804 	addi	r2,r2,-13152
 800cc84:	1885883a 	add	r2,r3,r2
 800cc88:	10800017 	ldw	r2,0(r2)
 800cc8c:	b5c8f03a 	xor	r4,r22,r23
 800cc90:	200d883a 	mov	r6,r4
 800cc94:	25003fcc 	andi	r20,r4,255
 800cc98:	9165c83a 	sub	r18,r18,r5
 800cc9c:	1000683a 	jmp	r2
 800cca0:	0800cee8 	cmpgeui	zero,at,827
 800cca4:	0800cd18 	cmpnei	zero,at,820
 800cca8:	0800ceac 	andhi	zero,at,826
 800ccac:	0800ccfc 	xorhi	zero,at,819
 800ccb0:	0800ceac 	andhi	zero,at,826
 800ccb4:	0800ce80 	call	800ce8 <__alt_mem_onchip_memory2_0+0x800ce8>
 800ccb8:	0800ceac 	andhi	zero,at,826
 800ccbc:	0800ccfc 	xorhi	zero,at,819
 800ccc0:	0800cd18 	cmpnei	zero,at,820
 800ccc4:	0800cd18 	cmpnei	zero,at,820
 800ccc8:	0800ce80 	call	800ce8 <__alt_mem_onchip_memory2_0+0x800ce8>
 800cccc:	0800ccfc 	xorhi	zero,at,819
 800ccd0:	0800cd0c 	andi	zero,at,820
 800ccd4:	0800cd0c 	andi	zero,at,820
 800ccd8:	0800cd0c 	andi	zero,at,820
 800ccdc:	0800cebc 	xorhi	zero,at,826
 800cce0:	8904b03a 	or	r2,r17,r4
 800cce4:	1000631e 	bne	r2,zero,800ce74 <__divdf3+0x2c4>
 800cce8:	05000204 	movi	r20,8
 800ccec:	0023883a 	mov	r17,zero
 800ccf0:	0027883a 	mov	r19,zero
 800ccf4:	02000084 	movi	r8,2
 800ccf8:	003fcc06 	br	800cc2c <__alt_data_end+0xfc00cc2c>
 800ccfc:	8023883a 	mov	r17,r16
 800cd00:	a827883a 	mov	r19,r21
 800cd04:	4839883a 	mov	fp,r9
 800cd08:	3811883a 	mov	r8,r7
 800cd0c:	00800084 	movi	r2,2
 800cd10:	4081531e 	bne	r8,r2,800d260 <__divdf3+0x6b0>
 800cd14:	e029883a 	mov	r20,fp
 800cd18:	a180004c 	andi	r6,r20,1
 800cd1c:	0201ffc4 	movi	r8,2047
 800cd20:	000b883a 	mov	r5,zero
 800cd24:	0027883a 	mov	r19,zero
 800cd28:	4010953a 	slli	r8,r8,20
 800cd2c:	30c03fcc 	andi	r3,r6,255
 800cd30:	04000434 	movhi	r16,16
 800cd34:	180697fa 	slli	r3,r3,31
 800cd38:	843fffc4 	addi	r16,r16,-1
 800cd3c:	2c20703a 	and	r16,r5,r16
 800cd40:	8220b03a 	or	r16,r16,r8
 800cd44:	80c6b03a 	or	r3,r16,r3
 800cd48:	9805883a 	mov	r2,r19
 800cd4c:	dfc00f17 	ldw	ra,60(sp)
 800cd50:	df000e17 	ldw	fp,56(sp)
 800cd54:	ddc00d17 	ldw	r23,52(sp)
 800cd58:	dd800c17 	ldw	r22,48(sp)
 800cd5c:	dd400b17 	ldw	r21,44(sp)
 800cd60:	dd000a17 	ldw	r20,40(sp)
 800cd64:	dcc00917 	ldw	r19,36(sp)
 800cd68:	dc800817 	ldw	r18,32(sp)
 800cd6c:	dc400717 	ldw	r17,28(sp)
 800cd70:	dc000617 	ldw	r16,24(sp)
 800cd74:	dec01004 	addi	sp,sp,64
 800cd78:	f800283a 	ret
 800cd7c:	8904b03a 	or	r2,r17,r4
 800cd80:	10003726 	beq	r2,zero,800ce60 <__divdf3+0x2b0>
 800cd84:	88014d26 	beq	r17,zero,800d2bc <__divdf3+0x70c>
 800cd88:	8809883a 	mov	r4,r17
 800cd8c:	d9800215 	stw	r6,8(sp)
 800cd90:	d9c00515 	stw	r7,20(sp)
 800cd94:	800eaac0 	call	800eaac <__clzsi2>
 800cd98:	d9800217 	ldw	r6,8(sp)
 800cd9c:	d9c00517 	ldw	r7,20(sp)
 800cda0:	1007883a 	mov	r3,r2
 800cda4:	01000a04 	movi	r4,40
 800cda8:	1cfffe04 	addi	r19,r3,-8
 800cdac:	20c9c83a 	sub	r4,r4,r3
 800cdb0:	8cca983a 	sll	r5,r17,r19
 800cdb4:	a108d83a 	srl	r4,r20,r4
 800cdb8:	a4e6983a 	sll	r19,r20,r19
 800cdbc:	2162b03a 	or	r17,r4,r5
 800cdc0:	04bf0344 	movi	r18,-1011
 800cdc4:	90e5c83a 	sub	r18,r18,r3
 800cdc8:	0029883a 	mov	r20,zero
 800cdcc:	0011883a 	mov	r8,zero
 800cdd0:	003f9606 	br	800cc2c <__alt_data_end+0xfc00cc2c>
 800cdd4:	8184b03a 	or	r2,r16,r6
 800cdd8:	10001f1e 	bne	r2,zero,800ce58 <__divdf3+0x2a8>
 800cddc:	0021883a 	mov	r16,zero
 800cde0:	002b883a 	mov	r21,zero
 800cde4:	01c00084 	movi	r7,2
 800cde8:	003fa206 	br	800cc74 <__alt_data_end+0xfc00cc74>
 800cdec:	8184b03a 	or	r2,r16,r6
 800cdf0:	10001526 	beq	r2,zero,800ce48 <__divdf3+0x298>
 800cdf4:	80013d26 	beq	r16,zero,800d2ec <__divdf3+0x73c>
 800cdf8:	8009883a 	mov	r4,r16
 800cdfc:	d9800215 	stw	r6,8(sp)
 800ce00:	da000315 	stw	r8,12(sp)
 800ce04:	da400415 	stw	r9,16(sp)
 800ce08:	800eaac0 	call	800eaac <__clzsi2>
 800ce0c:	d9800217 	ldw	r6,8(sp)
 800ce10:	da000317 	ldw	r8,12(sp)
 800ce14:	da400417 	ldw	r9,16(sp)
 800ce18:	1007883a 	mov	r3,r2
 800ce1c:	01000a04 	movi	r4,40
 800ce20:	1d7ffe04 	addi	r21,r3,-8
 800ce24:	20c9c83a 	sub	r4,r4,r3
 800ce28:	8560983a 	sll	r16,r16,r21
 800ce2c:	3108d83a 	srl	r4,r6,r4
 800ce30:	356a983a 	sll	r21,r6,r21
 800ce34:	2420b03a 	or	r16,r4,r16
 800ce38:	017f0344 	movi	r5,-1011
 800ce3c:	28cbc83a 	sub	r5,r5,r3
 800ce40:	000f883a 	mov	r7,zero
 800ce44:	003f8b06 	br	800cc74 <__alt_data_end+0xfc00cc74>
 800ce48:	0021883a 	mov	r16,zero
 800ce4c:	002b883a 	mov	r21,zero
 800ce50:	01c00044 	movi	r7,1
 800ce54:	003f8706 	br	800cc74 <__alt_data_end+0xfc00cc74>
 800ce58:	01c000c4 	movi	r7,3
 800ce5c:	003f8506 	br	800cc74 <__alt_data_end+0xfc00cc74>
 800ce60:	05000104 	movi	r20,4
 800ce64:	0023883a 	mov	r17,zero
 800ce68:	0027883a 	mov	r19,zero
 800ce6c:	02000044 	movi	r8,1
 800ce70:	003f6e06 	br	800cc2c <__alt_data_end+0xfc00cc2c>
 800ce74:	05000304 	movi	r20,12
 800ce78:	020000c4 	movi	r8,3
 800ce7c:	003f6b06 	br	800cc2c <__alt_data_end+0xfc00cc2c>
 800ce80:	01400434 	movhi	r5,16
 800ce84:	000d883a 	mov	r6,zero
 800ce88:	297fffc4 	addi	r5,r5,-1
 800ce8c:	04ffffc4 	movi	r19,-1
 800ce90:	0201ffc4 	movi	r8,2047
 800ce94:	003fa406 	br	800cd28 <__alt_data_end+0xfc00cd28>
 800ce98:	043f0084 	movi	r16,-1022
 800ce9c:	84a1c83a 	sub	r16,r16,r18
 800cea0:	00800e04 	movi	r2,56
 800cea4:	14014d0e 	bge	r2,r16,800d3dc <__divdf3+0x82c>
 800cea8:	a180004c 	andi	r6,r20,1
 800ceac:	0011883a 	mov	r8,zero
 800ceb0:	000b883a 	mov	r5,zero
 800ceb4:	0027883a 	mov	r19,zero
 800ceb8:	003f9b06 	br	800cd28 <__alt_data_end+0xfc00cd28>
 800cebc:	8880022c 	andhi	r2,r17,8
 800cec0:	1000f026 	beq	r2,zero,800d284 <__divdf3+0x6d4>
 800cec4:	8080022c 	andhi	r2,r16,8
 800cec8:	1000ee1e 	bne	r2,zero,800d284 <__divdf3+0x6d4>
 800cecc:	00800434 	movhi	r2,16
 800ced0:	81400234 	orhi	r5,r16,8
 800ced4:	10bfffc4 	addi	r2,r2,-1
 800ced8:	b80d883a 	mov	r6,r23
 800cedc:	288a703a 	and	r5,r5,r2
 800cee0:	a827883a 	mov	r19,r21
 800cee4:	003fea06 	br	800ce90 <__alt_data_end+0xfc00ce90>
 800cee8:	84411c36 	bltu	r16,r17,800d35c <__divdf3+0x7ac>
 800ceec:	8c011a26 	beq	r17,r16,800d358 <__divdf3+0x7a8>
 800cef0:	94bfffc4 	addi	r18,r18,-1
 800cef4:	dcc00015 	stw	r19,0(sp)
 800cef8:	8811883a 	mov	r8,r17
 800cefc:	002d883a 	mov	r22,zero
 800cf00:	a80cd63a 	srli	r6,r21,24
 800cf04:	8020923a 	slli	r16,r16,8
 800cf08:	a82a923a 	slli	r21,r21,8
 800cf0c:	4009883a 	mov	r4,r8
 800cf10:	342eb03a 	or	r23,r6,r16
 800cf14:	dd400115 	stw	r21,4(sp)
 800cf18:	b82ad43a 	srli	r21,r23,16
 800cf1c:	da000315 	stw	r8,12(sp)
 800cf20:	bcffffcc 	andi	r19,r23,65535
 800cf24:	a80b883a 	mov	r5,r21
 800cf28:	800c2dc0 	call	800c2dc <__udivsi3>
 800cf2c:	1009883a 	mov	r4,r2
 800cf30:	980b883a 	mov	r5,r19
 800cf34:	1023883a 	mov	r17,r2
 800cf38:	800c2ec0 	call	800c2ec <__mulsi3>
 800cf3c:	da000317 	ldw	r8,12(sp)
 800cf40:	a80b883a 	mov	r5,r21
 800cf44:	1039883a 	mov	fp,r2
 800cf48:	4009883a 	mov	r4,r8
 800cf4c:	800c2e40 	call	800c2e4 <__umodsi3>
 800cf50:	d8c00017 	ldw	r3,0(sp)
 800cf54:	1004943a 	slli	r2,r2,16
 800cf58:	1810d43a 	srli	r8,r3,16
 800cf5c:	120eb03a 	or	r7,r2,r8
 800cf60:	3f00062e 	bgeu	r7,fp,800cf7c <__divdf3+0x3cc>
 800cf64:	3dcf883a 	add	r7,r7,r23
 800cf68:	88bfffc4 	addi	r2,r17,-1
 800cf6c:	3dc10a36 	bltu	r7,r23,800d398 <__divdf3+0x7e8>
 800cf70:	3f01092e 	bgeu	r7,fp,800d398 <__divdf3+0x7e8>
 800cf74:	8c7fff84 	addi	r17,r17,-2
 800cf78:	3dcf883a 	add	r7,r7,r23
 800cf7c:	3f39c83a 	sub	fp,r7,fp
 800cf80:	e009883a 	mov	r4,fp
 800cf84:	a80b883a 	mov	r5,r21
 800cf88:	800c2dc0 	call	800c2dc <__udivsi3>
 800cf8c:	1009883a 	mov	r4,r2
 800cf90:	980b883a 	mov	r5,r19
 800cf94:	1021883a 	mov	r16,r2
 800cf98:	800c2ec0 	call	800c2ec <__mulsi3>
 800cf9c:	e009883a 	mov	r4,fp
 800cfa0:	a80b883a 	mov	r5,r21
 800cfa4:	d8800315 	stw	r2,12(sp)
 800cfa8:	800c2e40 	call	800c2e4 <__umodsi3>
 800cfac:	d9000017 	ldw	r4,0(sp)
 800cfb0:	1004943a 	slli	r2,r2,16
 800cfb4:	da000317 	ldw	r8,12(sp)
 800cfb8:	20ffffcc 	andi	r3,r4,65535
 800cfbc:	10ceb03a 	or	r7,r2,r3
 800cfc0:	3a00062e 	bgeu	r7,r8,800cfdc <__divdf3+0x42c>
 800cfc4:	3dcf883a 	add	r7,r7,r23
 800cfc8:	80bfffc4 	addi	r2,r16,-1
 800cfcc:	3dc0f036 	bltu	r7,r23,800d390 <__divdf3+0x7e0>
 800cfd0:	3a00ef2e 	bgeu	r7,r8,800d390 <__divdf3+0x7e0>
 800cfd4:	843fff84 	addi	r16,r16,-2
 800cfd8:	3dcf883a 	add	r7,r7,r23
 800cfdc:	d8c00117 	ldw	r3,4(sp)
 800cfe0:	8822943a 	slli	r17,r17,16
 800cfe4:	3a0fc83a 	sub	r7,r7,r8
 800cfe8:	1806d43a 	srli	r3,r3,16
 800cfec:	8462b03a 	or	r17,r16,r17
 800cff0:	8affffcc 	andi	r11,r17,65535
 800cff4:	d8c00015 	stw	r3,0(sp)
 800cff8:	d8c00117 	ldw	r3,4(sp)
 800cffc:	8820d43a 	srli	r16,r17,16
 800d000:	5809883a 	mov	r4,r11
 800d004:	1f3fffcc 	andi	fp,r3,65535
 800d008:	e00b883a 	mov	r5,fp
 800d00c:	d9c00515 	stw	r7,20(sp)
 800d010:	dac00215 	stw	r11,8(sp)
 800d014:	800c2ec0 	call	800c2ec <__mulsi3>
 800d018:	8009883a 	mov	r4,r16
 800d01c:	e00b883a 	mov	r5,fp
 800d020:	d8800415 	stw	r2,16(sp)
 800d024:	800c2ec0 	call	800c2ec <__mulsi3>
 800d028:	d9400017 	ldw	r5,0(sp)
 800d02c:	8009883a 	mov	r4,r16
 800d030:	d8800315 	stw	r2,12(sp)
 800d034:	800c2ec0 	call	800c2ec <__mulsi3>
 800d038:	dac00217 	ldw	r11,8(sp)
 800d03c:	d9400017 	ldw	r5,0(sp)
 800d040:	d8800215 	stw	r2,8(sp)
 800d044:	5809883a 	mov	r4,r11
 800d048:	800c2ec0 	call	800c2ec <__mulsi3>
 800d04c:	da400417 	ldw	r9,16(sp)
 800d050:	da800317 	ldw	r10,12(sp)
 800d054:	d9c00517 	ldw	r7,20(sp)
 800d058:	480ad43a 	srli	r5,r9,16
 800d05c:	5085883a 	add	r2,r10,r2
 800d060:	db000217 	ldw	r12,8(sp)
 800d064:	1151883a 	add	r8,r2,r5
 800d068:	4280022e 	bgeu	r8,r10,800d074 <__divdf3+0x4c4>
 800d06c:	00800074 	movhi	r2,1
 800d070:	6099883a 	add	r12,r12,r2
 800d074:	400ad43a 	srli	r5,r8,16
 800d078:	4010943a 	slli	r8,r8,16
 800d07c:	4c3fffcc 	andi	r16,r9,65535
 800d080:	6149883a 	add	r4,r12,r5
 800d084:	4411883a 	add	r8,r8,r16
 800d088:	3900a736 	bltu	r7,r4,800d328 <__divdf3+0x778>
 800d08c:	3900c426 	beq	r7,r4,800d3a0 <__divdf3+0x7f0>
 800d090:	3909c83a 	sub	r4,r7,r4
 800d094:	b221c83a 	sub	r16,r22,r8
 800d098:	b42d803a 	cmpltu	r22,r22,r16
 800d09c:	25adc83a 	sub	r22,r4,r22
 800d0a0:	b5c0c626 	beq	r22,r23,800d3bc <__divdf3+0x80c>
 800d0a4:	b009883a 	mov	r4,r22
 800d0a8:	a80b883a 	mov	r5,r21
 800d0ac:	800c2dc0 	call	800c2dc <__udivsi3>
 800d0b0:	1009883a 	mov	r4,r2
 800d0b4:	980b883a 	mov	r5,r19
 800d0b8:	d8800315 	stw	r2,12(sp)
 800d0bc:	800c2ec0 	call	800c2ec <__mulsi3>
 800d0c0:	a80b883a 	mov	r5,r21
 800d0c4:	b009883a 	mov	r4,r22
 800d0c8:	d8800415 	stw	r2,16(sp)
 800d0cc:	800c2e40 	call	800c2e4 <__umodsi3>
 800d0d0:	1004943a 	slli	r2,r2,16
 800d0d4:	800ed43a 	srli	r7,r16,16
 800d0d8:	da400417 	ldw	r9,16(sp)
 800d0dc:	da000317 	ldw	r8,12(sp)
 800d0e0:	11cab03a 	or	r5,r2,r7
 800d0e4:	2a40062e 	bgeu	r5,r9,800d100 <__divdf3+0x550>
 800d0e8:	2dcb883a 	add	r5,r5,r23
 800d0ec:	40bfffc4 	addi	r2,r8,-1
 800d0f0:	2dc0b436 	bltu	r5,r23,800d3c4 <__divdf3+0x814>
 800d0f4:	2a40b32e 	bgeu	r5,r9,800d3c4 <__divdf3+0x814>
 800d0f8:	423fff84 	addi	r8,r8,-2
 800d0fc:	2dcb883a 	add	r5,r5,r23
 800d100:	2a6dc83a 	sub	r22,r5,r9
 800d104:	b009883a 	mov	r4,r22
 800d108:	a80b883a 	mov	r5,r21
 800d10c:	da000315 	stw	r8,12(sp)
 800d110:	800c2dc0 	call	800c2dc <__udivsi3>
 800d114:	980b883a 	mov	r5,r19
 800d118:	1009883a 	mov	r4,r2
 800d11c:	d8800415 	stw	r2,16(sp)
 800d120:	800c2ec0 	call	800c2ec <__mulsi3>
 800d124:	b009883a 	mov	r4,r22
 800d128:	a80b883a 	mov	r5,r21
 800d12c:	1027883a 	mov	r19,r2
 800d130:	800c2e40 	call	800c2e4 <__umodsi3>
 800d134:	1004943a 	slli	r2,r2,16
 800d138:	843fffcc 	andi	r16,r16,65535
 800d13c:	da000317 	ldw	r8,12(sp)
 800d140:	140eb03a 	or	r7,r2,r16
 800d144:	da400417 	ldw	r9,16(sp)
 800d148:	3cc0062e 	bgeu	r7,r19,800d164 <__divdf3+0x5b4>
 800d14c:	3dcf883a 	add	r7,r7,r23
 800d150:	48bfffc4 	addi	r2,r9,-1
 800d154:	3dc09d36 	bltu	r7,r23,800d3cc <__divdf3+0x81c>
 800d158:	3cc09c2e 	bgeu	r7,r19,800d3cc <__divdf3+0x81c>
 800d15c:	4a7fff84 	addi	r9,r9,-2
 800d160:	3dcf883a 	add	r7,r7,r23
 800d164:	4010943a 	slli	r8,r8,16
 800d168:	3cebc83a 	sub	r21,r7,r19
 800d16c:	e00b883a 	mov	r5,fp
 800d170:	4a26b03a 	or	r19,r9,r8
 800d174:	99ffffcc 	andi	r7,r19,65535
 800d178:	9820d43a 	srli	r16,r19,16
 800d17c:	3809883a 	mov	r4,r7
 800d180:	d9c00515 	stw	r7,20(sp)
 800d184:	800c2ec0 	call	800c2ec <__mulsi3>
 800d188:	8009883a 	mov	r4,r16
 800d18c:	e00b883a 	mov	r5,fp
 800d190:	102d883a 	mov	r22,r2
 800d194:	800c2ec0 	call	800c2ec <__mulsi3>
 800d198:	d9400017 	ldw	r5,0(sp)
 800d19c:	8009883a 	mov	r4,r16
 800d1a0:	1039883a 	mov	fp,r2
 800d1a4:	800c2ec0 	call	800c2ec <__mulsi3>
 800d1a8:	d9c00517 	ldw	r7,20(sp)
 800d1ac:	d9400017 	ldw	r5,0(sp)
 800d1b0:	1021883a 	mov	r16,r2
 800d1b4:	3809883a 	mov	r4,r7
 800d1b8:	800c2ec0 	call	800c2ec <__mulsi3>
 800d1bc:	b008d43a 	srli	r4,r22,16
 800d1c0:	e085883a 	add	r2,fp,r2
 800d1c4:	1109883a 	add	r4,r2,r4
 800d1c8:	2700022e 	bgeu	r4,fp,800d1d4 <__divdf3+0x624>
 800d1cc:	00800074 	movhi	r2,1
 800d1d0:	80a1883a 	add	r16,r16,r2
 800d1d4:	200ad43a 	srli	r5,r4,16
 800d1d8:	2008943a 	slli	r4,r4,16
 800d1dc:	b5bfffcc 	andi	r22,r22,65535
 800d1e0:	8145883a 	add	r2,r16,r5
 800d1e4:	2589883a 	add	r4,r4,r22
 800d1e8:	a8802c36 	bltu	r21,r2,800d29c <__divdf3+0x6ec>
 800d1ec:	a880a426 	beq	r21,r2,800d480 <__divdf3+0x8d0>
 800d1f0:	9cc00054 	ori	r19,r19,1
 800d1f4:	9200ffc4 	addi	r8,r18,1023
 800d1f8:	023f270e 	bge	zero,r8,800ce98 <__alt_data_end+0xfc00ce98>
 800d1fc:	988001cc 	andi	r2,r19,7
 800d200:	10000726 	beq	r2,zero,800d220 <__divdf3+0x670>
 800d204:	990003cc 	andi	r4,r19,15
 800d208:	00800104 	movi	r2,4
 800d20c:	20800426 	beq	r4,r2,800d220 <__divdf3+0x670>
 800d210:	9885883a 	add	r2,r19,r2
 800d214:	14e7803a 	cmpltu	r19,r2,r19
 800d218:	8ce3883a 	add	r17,r17,r19
 800d21c:	1027883a 	mov	r19,r2
 800d220:	8880402c 	andhi	r2,r17,256
 800d224:	10000426 	beq	r2,zero,800d238 <__divdf3+0x688>
 800d228:	00bfc034 	movhi	r2,65280
 800d22c:	10bfffc4 	addi	r2,r2,-1
 800d230:	92010004 	addi	r8,r18,1024
 800d234:	88a2703a 	and	r17,r17,r2
 800d238:	0081ff84 	movi	r2,2046
 800d23c:	123eb616 	blt	r2,r8,800cd18 <__alt_data_end+0xfc00cd18>
 800d240:	9826d0fa 	srli	r19,r19,3
 800d244:	8804977a 	slli	r2,r17,29
 800d248:	8820927a 	slli	r16,r17,9
 800d24c:	4201ffcc 	andi	r8,r8,2047
 800d250:	14e6b03a 	or	r19,r2,r19
 800d254:	800ad33a 	srli	r5,r16,12
 800d258:	a180004c 	andi	r6,r20,1
 800d25c:	003eb206 	br	800cd28 <__alt_data_end+0xfc00cd28>
 800d260:	008000c4 	movi	r2,3
 800d264:	4080ac26 	beq	r8,r2,800d518 <__divdf3+0x968>
 800d268:	00800044 	movi	r2,1
 800d26c:	4080591e 	bne	r8,r2,800d3d4 <__divdf3+0x824>
 800d270:	e00d883a 	mov	r6,fp
 800d274:	0011883a 	mov	r8,zero
 800d278:	000b883a 	mov	r5,zero
 800d27c:	0027883a 	mov	r19,zero
 800d280:	003ea906 	br	800cd28 <__alt_data_end+0xfc00cd28>
 800d284:	00800434 	movhi	r2,16
 800d288:	89400234 	orhi	r5,r17,8
 800d28c:	10bfffc4 	addi	r2,r2,-1
 800d290:	b00d883a 	mov	r6,r22
 800d294:	288a703a 	and	r5,r5,r2
 800d298:	003efd06 	br	800ce90 <__alt_data_end+0xfc00ce90>
 800d29c:	adcf883a 	add	r7,r21,r23
 800d2a0:	997fffc4 	addi	r5,r19,-1
 800d2a4:	3dc0412e 	bgeu	r7,r23,800d3ac <__divdf3+0x7fc>
 800d2a8:	2827883a 	mov	r19,r5
 800d2ac:	38bfd01e 	bne	r7,r2,800d1f0 <__alt_data_end+0xfc00d1f0>
 800d2b0:	d8c00117 	ldw	r3,4(sp)
 800d2b4:	193fce1e 	bne	r3,r4,800d1f0 <__alt_data_end+0xfc00d1f0>
 800d2b8:	003fce06 	br	800d1f4 <__alt_data_end+0xfc00d1f4>
 800d2bc:	d9800215 	stw	r6,8(sp)
 800d2c0:	d9c00515 	stw	r7,20(sp)
 800d2c4:	800eaac0 	call	800eaac <__clzsi2>
 800d2c8:	10c00804 	addi	r3,r2,32
 800d2cc:	010009c4 	movi	r4,39
 800d2d0:	d9800217 	ldw	r6,8(sp)
 800d2d4:	d9c00517 	ldw	r7,20(sp)
 800d2d8:	20feb20e 	bge	r4,r3,800cda4 <__alt_data_end+0xfc00cda4>
 800d2dc:	117ffe04 	addi	r5,r2,-8
 800d2e0:	a162983a 	sll	r17,r20,r5
 800d2e4:	0027883a 	mov	r19,zero
 800d2e8:	003eb506 	br	800cdc0 <__alt_data_end+0xfc00cdc0>
 800d2ec:	3009883a 	mov	r4,r6
 800d2f0:	d9800215 	stw	r6,8(sp)
 800d2f4:	da000315 	stw	r8,12(sp)
 800d2f8:	da400415 	stw	r9,16(sp)
 800d2fc:	800eaac0 	call	800eaac <__clzsi2>
 800d300:	10c00804 	addi	r3,r2,32
 800d304:	010009c4 	movi	r4,39
 800d308:	d9800217 	ldw	r6,8(sp)
 800d30c:	da000317 	ldw	r8,12(sp)
 800d310:	da400417 	ldw	r9,16(sp)
 800d314:	20fec10e 	bge	r4,r3,800ce1c <__alt_data_end+0xfc00ce1c>
 800d318:	10bffe04 	addi	r2,r2,-8
 800d31c:	a8a0983a 	sll	r16,r21,r2
 800d320:	002b883a 	mov	r21,zero
 800d324:	003ec406 	br	800ce38 <__alt_data_end+0xfc00ce38>
 800d328:	d8c00117 	ldw	r3,4(sp)
 800d32c:	b0ed883a 	add	r22,r22,r3
 800d330:	b0c5803a 	cmpltu	r2,r22,r3
 800d334:	15c5883a 	add	r2,r2,r23
 800d338:	11cf883a 	add	r7,r2,r7
 800d33c:	88bfffc4 	addi	r2,r17,-1
 800d340:	b9c00d2e 	bgeu	r23,r7,800d378 <__divdf3+0x7c8>
 800d344:	39003f36 	bltu	r7,r4,800d444 <__divdf3+0x894>
 800d348:	21c06a26 	beq	r4,r7,800d4f4 <__divdf3+0x944>
 800d34c:	3909c83a 	sub	r4,r7,r4
 800d350:	1023883a 	mov	r17,r2
 800d354:	003f4f06 	br	800d094 <__alt_data_end+0xfc00d094>
 800d358:	9d7ee536 	bltu	r19,r21,800cef0 <__alt_data_end+0xfc00cef0>
 800d35c:	982ed07a 	srli	r23,r19,1
 800d360:	880497fa 	slli	r2,r17,31
 800d364:	8810d07a 	srli	r8,r17,1
 800d368:	982c97fa 	slli	r22,r19,31
 800d36c:	b884b03a 	or	r2,r23,r2
 800d370:	d8800015 	stw	r2,0(sp)
 800d374:	003ee206 	br	800cf00 <__alt_data_end+0xfc00cf00>
 800d378:	3dfff41e 	bne	r7,r23,800d34c <__alt_data_end+0xfc00d34c>
 800d37c:	d8c00117 	ldw	r3,4(sp)
 800d380:	b0fff02e 	bgeu	r22,r3,800d344 <__alt_data_end+0xfc00d344>
 800d384:	b909c83a 	sub	r4,r23,r4
 800d388:	1023883a 	mov	r17,r2
 800d38c:	003f4106 	br	800d094 <__alt_data_end+0xfc00d094>
 800d390:	1021883a 	mov	r16,r2
 800d394:	003f1106 	br	800cfdc <__alt_data_end+0xfc00cfdc>
 800d398:	1023883a 	mov	r17,r2
 800d39c:	003ef706 	br	800cf7c <__alt_data_end+0xfc00cf7c>
 800d3a0:	b23fe136 	bltu	r22,r8,800d328 <__alt_data_end+0xfc00d328>
 800d3a4:	0009883a 	mov	r4,zero
 800d3a8:	003f3a06 	br	800d094 <__alt_data_end+0xfc00d094>
 800d3ac:	38802c36 	bltu	r7,r2,800d460 <__divdf3+0x8b0>
 800d3b0:	11c05326 	beq	r2,r7,800d500 <__divdf3+0x950>
 800d3b4:	2827883a 	mov	r19,r5
 800d3b8:	003f8d06 	br	800d1f0 <__alt_data_end+0xfc00d1f0>
 800d3bc:	04ffffc4 	movi	r19,-1
 800d3c0:	003f8c06 	br	800d1f4 <__alt_data_end+0xfc00d1f4>
 800d3c4:	1011883a 	mov	r8,r2
 800d3c8:	003f4d06 	br	800d100 <__alt_data_end+0xfc00d100>
 800d3cc:	1013883a 	mov	r9,r2
 800d3d0:	003f6406 	br	800d164 <__alt_data_end+0xfc00d164>
 800d3d4:	e029883a 	mov	r20,fp
 800d3d8:	003f8606 	br	800d1f4 <__alt_data_end+0xfc00d1f4>
 800d3dc:	008007c4 	movi	r2,31
 800d3e0:	14002a16 	blt	r2,r16,800d48c <__divdf3+0x8dc>
 800d3e4:	91410784 	addi	r5,r18,1054
 800d3e8:	9c0cd83a 	srl	r6,r19,r16
 800d3ec:	8948983a 	sll	r4,r17,r5
 800d3f0:	9944983a 	sll	r2,r19,r5
 800d3f4:	8c20d83a 	srl	r16,r17,r16
 800d3f8:	3108b03a 	or	r4,r6,r4
 800d3fc:	1004c03a 	cmpne	r2,r2,zero
 800d400:	2084b03a 	or	r2,r4,r2
 800d404:	110001cc 	andi	r4,r2,7
 800d408:	20000726 	beq	r4,zero,800d428 <__divdf3+0x878>
 800d40c:	114003cc 	andi	r5,r2,15
 800d410:	01000104 	movi	r4,4
 800d414:	29000426 	beq	r5,r4,800d428 <__divdf3+0x878>
 800d418:	11000104 	addi	r4,r2,4
 800d41c:	2085803a 	cmpltu	r2,r4,r2
 800d420:	80a1883a 	add	r16,r16,r2
 800d424:	2005883a 	mov	r2,r4
 800d428:	8100202c 	andhi	r4,r16,128
 800d42c:	20002d26 	beq	r4,zero,800d4e4 <__divdf3+0x934>
 800d430:	a180004c 	andi	r6,r20,1
 800d434:	02000044 	movi	r8,1
 800d438:	000b883a 	mov	r5,zero
 800d43c:	0027883a 	mov	r19,zero
 800d440:	003e3906 	br	800cd28 <__alt_data_end+0xfc00cd28>
 800d444:	d8c00117 	ldw	r3,4(sp)
 800d448:	8c7fff84 	addi	r17,r17,-2
 800d44c:	b0ed883a 	add	r22,r22,r3
 800d450:	b0c5803a 	cmpltu	r2,r22,r3
 800d454:	15c5883a 	add	r2,r2,r23
 800d458:	11cf883a 	add	r7,r2,r7
 800d45c:	003f0c06 	br	800d090 <__alt_data_end+0xfc00d090>
 800d460:	d8c00117 	ldw	r3,4(sp)
 800d464:	997fff84 	addi	r5,r19,-2
 800d468:	18d1883a 	add	r8,r3,r3
 800d46c:	40c7803a 	cmpltu	r3,r8,r3
 800d470:	1dcd883a 	add	r6,r3,r23
 800d474:	398f883a 	add	r7,r7,r6
 800d478:	da000115 	stw	r8,4(sp)
 800d47c:	003f8a06 	br	800d2a8 <__alt_data_end+0xfc00d2a8>
 800d480:	203f861e 	bne	r4,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d484:	d8000115 	stw	zero,4(sp)
 800d488:	003f8906 	br	800d2b0 <__alt_data_end+0xfc00d2b0>
 800d48c:	00bef884 	movi	r2,-1054
 800d490:	1485c83a 	sub	r2,r2,r18
 800d494:	01000804 	movi	r4,32
 800d498:	8884d83a 	srl	r2,r17,r2
 800d49c:	81001c26 	beq	r16,r4,800d510 <__divdf3+0x960>
 800d4a0:	91010f84 	addi	r4,r18,1086
 800d4a4:	8908983a 	sll	r4,r17,r4
 800d4a8:	24c8b03a 	or	r4,r4,r19
 800d4ac:	2008c03a 	cmpne	r4,r4,zero
 800d4b0:	2084b03a 	or	r2,r4,r2
 800d4b4:	140001cc 	andi	r16,r2,7
 800d4b8:	8000061e 	bne	r16,zero,800d4d4 <__divdf3+0x924>
 800d4bc:	000b883a 	mov	r5,zero
 800d4c0:	1004d0fa 	srli	r2,r2,3
 800d4c4:	a180004c 	andi	r6,r20,1
 800d4c8:	0011883a 	mov	r8,zero
 800d4cc:	1426b03a 	or	r19,r2,r16
 800d4d0:	003e1506 	br	800cd28 <__alt_data_end+0xfc00cd28>
 800d4d4:	114003cc 	andi	r5,r2,15
 800d4d8:	01000104 	movi	r4,4
 800d4dc:	0021883a 	mov	r16,zero
 800d4e0:	293fcd1e 	bne	r5,r4,800d418 <__alt_data_end+0xfc00d418>
 800d4e4:	800a927a 	slli	r5,r16,9
 800d4e8:	8020977a 	slli	r16,r16,29
 800d4ec:	280ad33a 	srli	r5,r5,12
 800d4f0:	003ff306 	br	800d4c0 <__alt_data_end+0xfc00d4c0>
 800d4f4:	b23fd336 	bltu	r22,r8,800d444 <__alt_data_end+0xfc00d444>
 800d4f8:	1023883a 	mov	r17,r2
 800d4fc:	003fa906 	br	800d3a4 <__alt_data_end+0xfc00d3a4>
 800d500:	d8c00117 	ldw	r3,4(sp)
 800d504:	193fd636 	bltu	r3,r4,800d460 <__alt_data_end+0xfc00d460>
 800d508:	2827883a 	mov	r19,r5
 800d50c:	003f6806 	br	800d2b0 <__alt_data_end+0xfc00d2b0>
 800d510:	0009883a 	mov	r4,zero
 800d514:	003fe406 	br	800d4a8 <__alt_data_end+0xfc00d4a8>
 800d518:	00800434 	movhi	r2,16
 800d51c:	89400234 	orhi	r5,r17,8
 800d520:	10bfffc4 	addi	r2,r2,-1
 800d524:	e00d883a 	mov	r6,fp
 800d528:	288a703a 	and	r5,r5,r2
 800d52c:	003e5806 	br	800ce90 <__alt_data_end+0xfc00ce90>

0800d530 <__eqdf2>:
 800d530:	2804d53a 	srli	r2,r5,20
 800d534:	3806d53a 	srli	r3,r7,20
 800d538:	02000434 	movhi	r8,16
 800d53c:	423fffc4 	addi	r8,r8,-1
 800d540:	1081ffcc 	andi	r2,r2,2047
 800d544:	0241ffc4 	movi	r9,2047
 800d548:	2a14703a 	and	r10,r5,r8
 800d54c:	18c1ffcc 	andi	r3,r3,2047
 800d550:	3a10703a 	and	r8,r7,r8
 800d554:	280ad7fa 	srli	r5,r5,31
 800d558:	380ed7fa 	srli	r7,r7,31
 800d55c:	12400f26 	beq	r2,r9,800d59c <__eqdf2+0x6c>
 800d560:	0241ffc4 	movi	r9,2047
 800d564:	1a400326 	beq	r3,r9,800d574 <__eqdf2+0x44>
 800d568:	10c00526 	beq	r2,r3,800d580 <__eqdf2+0x50>
 800d56c:	00800044 	movi	r2,1
 800d570:	f800283a 	ret
 800d574:	4192b03a 	or	r9,r8,r6
 800d578:	483ffc1e 	bne	r9,zero,800d56c <__alt_data_end+0xfc00d56c>
 800d57c:	10fffb1e 	bne	r2,r3,800d56c <__alt_data_end+0xfc00d56c>
 800d580:	523ffa1e 	bne	r10,r8,800d56c <__alt_data_end+0xfc00d56c>
 800d584:	21bff91e 	bne	r4,r6,800d56c <__alt_data_end+0xfc00d56c>
 800d588:	29c00826 	beq	r5,r7,800d5ac <__eqdf2+0x7c>
 800d58c:	103ff71e 	bne	r2,zero,800d56c <__alt_data_end+0xfc00d56c>
 800d590:	5104b03a 	or	r2,r10,r4
 800d594:	1004c03a 	cmpne	r2,r2,zero
 800d598:	f800283a 	ret
 800d59c:	5112b03a 	or	r9,r10,r4
 800d5a0:	483fef26 	beq	r9,zero,800d560 <__alt_data_end+0xfc00d560>
 800d5a4:	00800044 	movi	r2,1
 800d5a8:	f800283a 	ret
 800d5ac:	0005883a 	mov	r2,zero
 800d5b0:	f800283a 	ret

0800d5b4 <__gedf2>:
 800d5b4:	2804d53a 	srli	r2,r5,20
 800d5b8:	3806d53a 	srli	r3,r7,20
 800d5bc:	02000434 	movhi	r8,16
 800d5c0:	423fffc4 	addi	r8,r8,-1
 800d5c4:	0241ffc4 	movi	r9,2047
 800d5c8:	1081ffcc 	andi	r2,r2,2047
 800d5cc:	2a14703a 	and	r10,r5,r8
 800d5d0:	1a46703a 	and	r3,r3,r9
 800d5d4:	3a10703a 	and	r8,r7,r8
 800d5d8:	280ad7fa 	srli	r5,r5,31
 800d5dc:	380ed7fa 	srli	r7,r7,31
 800d5e0:	12400b26 	beq	r2,r9,800d610 <__gedf2+0x5c>
 800d5e4:	1a401626 	beq	r3,r9,800d640 <__gedf2+0x8c>
 800d5e8:	10000c1e 	bne	r2,zero,800d61c <__gedf2+0x68>
 800d5ec:	5112b03a 	or	r9,r10,r4
 800d5f0:	4813003a 	cmpeq	r9,r9,zero
 800d5f4:	4817883a 	mov	r11,r9
 800d5f8:	18000c1e 	bne	r3,zero,800d62c <__gedf2+0x78>
 800d5fc:	4198b03a 	or	r12,r8,r6
 800d600:	60000a1e 	bne	r12,zero,800d62c <__gedf2+0x78>
 800d604:	48001326 	beq	r9,zero,800d654 <__gedf2+0xa0>
 800d608:	0005883a 	mov	r2,zero
 800d60c:	f800283a 	ret
 800d610:	5112b03a 	or	r9,r10,r4
 800d614:	4800191e 	bne	r9,zero,800d67c <__gedf2+0xc8>
 800d618:	18800926 	beq	r3,r2,800d640 <__gedf2+0x8c>
 800d61c:	18000b1e 	bne	r3,zero,800d64c <__gedf2+0x98>
 800d620:	4192b03a 	or	r9,r8,r6
 800d624:	0017883a 	mov	r11,zero
 800d628:	48000a26 	beq	r9,zero,800d654 <__gedf2+0xa0>
 800d62c:	39c03fcc 	andi	r7,r7,255
 800d630:	58000726 	beq	r11,zero,800d650 <__gedf2+0x9c>
 800d634:	3800081e 	bne	r7,zero,800d658 <__gedf2+0xa4>
 800d638:	00bfffc4 	movi	r2,-1
 800d63c:	f800283a 	ret
 800d640:	4192b03a 	or	r9,r8,r6
 800d644:	48000d1e 	bne	r9,zero,800d67c <__gedf2+0xc8>
 800d648:	103fe826 	beq	r2,zero,800d5ec <__alt_data_end+0xfc00d5ec>
 800d64c:	39c03fcc 	andi	r7,r7,255
 800d650:	29c00326 	beq	r5,r7,800d660 <__gedf2+0xac>
 800d654:	283ff81e 	bne	r5,zero,800d638 <__alt_data_end+0xfc00d638>
 800d658:	00800044 	movi	r2,1
 800d65c:	f800283a 	ret
 800d660:	18bffc16 	blt	r3,r2,800d654 <__alt_data_end+0xfc00d654>
 800d664:	10c00316 	blt	r2,r3,800d674 <__gedf2+0xc0>
 800d668:	42bffa36 	bltu	r8,r10,800d654 <__alt_data_end+0xfc00d654>
 800d66c:	52000526 	beq	r10,r8,800d684 <__gedf2+0xd0>
 800d670:	523fe52e 	bgeu	r10,r8,800d608 <__alt_data_end+0xfc00d608>
 800d674:	283ff026 	beq	r5,zero,800d638 <__alt_data_end+0xfc00d638>
 800d678:	003ff706 	br	800d658 <__alt_data_end+0xfc00d658>
 800d67c:	00bfff84 	movi	r2,-2
 800d680:	f800283a 	ret
 800d684:	313ff336 	bltu	r6,r4,800d654 <__alt_data_end+0xfc00d654>
 800d688:	21bfdf2e 	bgeu	r4,r6,800d608 <__alt_data_end+0xfc00d608>
 800d68c:	283fea26 	beq	r5,zero,800d638 <__alt_data_end+0xfc00d638>
 800d690:	003ff106 	br	800d658 <__alt_data_end+0xfc00d658>

0800d694 <__ledf2>:
 800d694:	2804d53a 	srli	r2,r5,20
 800d698:	3810d53a 	srli	r8,r7,20
 800d69c:	00c00434 	movhi	r3,16
 800d6a0:	18ffffc4 	addi	r3,r3,-1
 800d6a4:	0241ffc4 	movi	r9,2047
 800d6a8:	1081ffcc 	andi	r2,r2,2047
 800d6ac:	28d4703a 	and	r10,r5,r3
 800d6b0:	4250703a 	and	r8,r8,r9
 800d6b4:	38c6703a 	and	r3,r7,r3
 800d6b8:	280ad7fa 	srli	r5,r5,31
 800d6bc:	380ed7fa 	srli	r7,r7,31
 800d6c0:	12400b26 	beq	r2,r9,800d6f0 <__ledf2+0x5c>
 800d6c4:	42401926 	beq	r8,r9,800d72c <__ledf2+0x98>
 800d6c8:	10000c1e 	bne	r2,zero,800d6fc <__ledf2+0x68>
 800d6cc:	5112b03a 	or	r9,r10,r4
 800d6d0:	4813003a 	cmpeq	r9,r9,zero
 800d6d4:	4817883a 	mov	r11,r9
 800d6d8:	40000f26 	beq	r8,zero,800d718 <__ledf2+0x84>
 800d6dc:	39c03fcc 	andi	r7,r7,255
 800d6e0:	58001826 	beq	r11,zero,800d744 <__ledf2+0xb0>
 800d6e4:	38000a1e 	bne	r7,zero,800d710 <__ledf2+0x7c>
 800d6e8:	00bfffc4 	movi	r2,-1
 800d6ec:	f800283a 	ret
 800d6f0:	5112b03a 	or	r9,r10,r4
 800d6f4:	48000f1e 	bne	r9,zero,800d734 <__ledf2+0xa0>
 800d6f8:	40800c26 	beq	r8,r2,800d72c <__ledf2+0x98>
 800d6fc:	4000101e 	bne	r8,zero,800d740 <__ledf2+0xac>
 800d700:	1992b03a 	or	r9,r3,r6
 800d704:	0017883a 	mov	r11,zero
 800d708:	483ff41e 	bne	r9,zero,800d6dc <__alt_data_end+0xfc00d6dc>
 800d70c:	283ff61e 	bne	r5,zero,800d6e8 <__alt_data_end+0xfc00d6e8>
 800d710:	00800044 	movi	r2,1
 800d714:	f800283a 	ret
 800d718:	1998b03a 	or	r12,r3,r6
 800d71c:	603fef1e 	bne	r12,zero,800d6dc <__alt_data_end+0xfc00d6dc>
 800d720:	483ffa26 	beq	r9,zero,800d70c <__alt_data_end+0xfc00d70c>
 800d724:	0005883a 	mov	r2,zero
 800d728:	f800283a 	ret
 800d72c:	1992b03a 	or	r9,r3,r6
 800d730:	48000226 	beq	r9,zero,800d73c <__ledf2+0xa8>
 800d734:	00800084 	movi	r2,2
 800d738:	f800283a 	ret
 800d73c:	103fe326 	beq	r2,zero,800d6cc <__alt_data_end+0xfc00d6cc>
 800d740:	39c03fcc 	andi	r7,r7,255
 800d744:	29fff11e 	bne	r5,r7,800d70c <__alt_data_end+0xfc00d70c>
 800d748:	40bff016 	blt	r8,r2,800d70c <__alt_data_end+0xfc00d70c>
 800d74c:	12000316 	blt	r2,r8,800d75c <__ledf2+0xc8>
 800d750:	1abfee36 	bltu	r3,r10,800d70c <__alt_data_end+0xfc00d70c>
 800d754:	50c00326 	beq	r10,r3,800d764 <__ledf2+0xd0>
 800d758:	50fff22e 	bgeu	r10,r3,800d724 <__alt_data_end+0xfc00d724>
 800d75c:	283fe226 	beq	r5,zero,800d6e8 <__alt_data_end+0xfc00d6e8>
 800d760:	003feb06 	br	800d710 <__alt_data_end+0xfc00d710>
 800d764:	313fe936 	bltu	r6,r4,800d70c <__alt_data_end+0xfc00d70c>
 800d768:	21bfee2e 	bgeu	r4,r6,800d724 <__alt_data_end+0xfc00d724>
 800d76c:	283fde26 	beq	r5,zero,800d6e8 <__alt_data_end+0xfc00d6e8>
 800d770:	003fe706 	br	800d710 <__alt_data_end+0xfc00d710>

0800d774 <__muldf3>:
 800d774:	deffee04 	addi	sp,sp,-72
 800d778:	dd000c15 	stw	r20,48(sp)
 800d77c:	2828d53a 	srli	r20,r5,20
 800d780:	dd400d15 	stw	r21,52(sp)
 800d784:	282ad7fa 	srli	r21,r5,31
 800d788:	dc000815 	stw	r16,32(sp)
 800d78c:	04000434 	movhi	r16,16
 800d790:	ddc00f15 	stw	r23,60(sp)
 800d794:	dcc00b15 	stw	r19,44(sp)
 800d798:	dc800a15 	stw	r18,40(sp)
 800d79c:	843fffc4 	addi	r16,r16,-1
 800d7a0:	dfc01115 	stw	ra,68(sp)
 800d7a4:	df001015 	stw	fp,64(sp)
 800d7a8:	dd800e15 	stw	r22,56(sp)
 800d7ac:	dc400915 	stw	r17,36(sp)
 800d7b0:	a501ffcc 	andi	r20,r20,2047
 800d7b4:	2025883a 	mov	r18,r4
 800d7b8:	202f883a 	mov	r23,r4
 800d7bc:	2c20703a 	and	r16,r5,r16
 800d7c0:	a827883a 	mov	r19,r21
 800d7c4:	aa403fcc 	andi	r9,r21,255
 800d7c8:	a0005926 	beq	r20,zero,800d930 <__muldf3+0x1bc>
 800d7cc:	0081ffc4 	movi	r2,2047
 800d7d0:	a0803426 	beq	r20,r2,800d8a4 <__muldf3+0x130>
 800d7d4:	84000434 	orhi	r16,r16,16
 800d7d8:	2004d77a 	srli	r2,r4,29
 800d7dc:	802090fa 	slli	r16,r16,3
 800d7e0:	202e90fa 	slli	r23,r4,3
 800d7e4:	a53f0044 	addi	r20,r20,-1023
 800d7e8:	80a0b03a 	or	r16,r16,r2
 800d7ec:	000b883a 	mov	r5,zero
 800d7f0:	0039883a 	mov	fp,zero
 800d7f4:	3806d53a 	srli	r3,r7,20
 800d7f8:	382cd7fa 	srli	r22,r7,31
 800d7fc:	00800434 	movhi	r2,16
 800d800:	10bfffc4 	addi	r2,r2,-1
 800d804:	18c1ffcc 	andi	r3,r3,2047
 800d808:	3025883a 	mov	r18,r6
 800d80c:	38a2703a 	and	r17,r7,r2
 800d810:	b2803fcc 	andi	r10,r22,255
 800d814:	18006426 	beq	r3,zero,800d9a8 <__muldf3+0x234>
 800d818:	0081ffc4 	movi	r2,2047
 800d81c:	18805c26 	beq	r3,r2,800d990 <__muldf3+0x21c>
 800d820:	8c400434 	orhi	r17,r17,16
 800d824:	3004d77a 	srli	r2,r6,29
 800d828:	882290fa 	slli	r17,r17,3
 800d82c:	302490fa 	slli	r18,r6,3
 800d830:	18ff0044 	addi	r3,r3,-1023
 800d834:	88a2b03a 	or	r17,r17,r2
 800d838:	000f883a 	mov	r7,zero
 800d83c:	394ab03a 	or	r5,r7,r5
 800d840:	280a90ba 	slli	r5,r5,2
 800d844:	00820074 	movhi	r2,2049
 800d848:	10b61904 	addi	r2,r2,-10140
 800d84c:	288b883a 	add	r5,r5,r2
 800d850:	28800017 	ldw	r2,0(r5)
 800d854:	a0c7883a 	add	r3,r20,r3
 800d858:	b54cf03a 	xor	r6,r22,r21
 800d85c:	1a000044 	addi	r8,r3,1
 800d860:	1000683a 	jmp	r2
 800d864:	0800daa8 	cmpgeui	zero,at,874
 800d868:	0800da94 	ori	zero,at,874
 800d86c:	0800da94 	ori	zero,at,874
 800d870:	0800da80 	call	800da8 <__alt_mem_onchip_memory2_0+0x800da8>
 800d874:	0800d8c0 	call	800d8c <__alt_mem_onchip_memory2_0+0x800d8c>
 800d878:	0800d8c0 	call	800d8c <__alt_mem_onchip_memory2_0+0x800d8c>
 800d87c:	0800da68 	cmpgeui	zero,at,873
 800d880:	0800da80 	call	800da8 <__alt_mem_onchip_memory2_0+0x800da8>
 800d884:	0800d8c0 	call	800d8c <__alt_mem_onchip_memory2_0+0x800d8c>
 800d888:	0800da68 	cmpgeui	zero,at,873
 800d88c:	0800d8c0 	call	800d8c <__alt_mem_onchip_memory2_0+0x800d8c>
 800d890:	0800da80 	call	800da8 <__alt_mem_onchip_memory2_0+0x800da8>
 800d894:	0800d8c4 	addi	zero,at,867
 800d898:	0800d8c4 	addi	zero,at,867
 800d89c:	0800d8c4 	addi	zero,at,867
 800d8a0:	0800dde4 	muli	zero,at,887
 800d8a4:	8104b03a 	or	r2,r16,r4
 800d8a8:	10006c1e 	bne	r2,zero,800da5c <__muldf3+0x2e8>
 800d8ac:	01400204 	movi	r5,8
 800d8b0:	0021883a 	mov	r16,zero
 800d8b4:	002f883a 	mov	r23,zero
 800d8b8:	07000084 	movi	fp,2
 800d8bc:	003fcd06 	br	800d7f4 <__alt_data_end+0xfc00d7f4>
 800d8c0:	3013883a 	mov	r9,r6
 800d8c4:	00800084 	movi	r2,2
 800d8c8:	e080501e 	bne	fp,r2,800da0c <__muldf3+0x298>
 800d8cc:	4cc0004c 	andi	r19,r9,1
 800d8d0:	0101ffc4 	movi	r4,2047
 800d8d4:	0021883a 	mov	r16,zero
 800d8d8:	002f883a 	mov	r23,zero
 800d8dc:	2008953a 	slli	r4,r4,20
 800d8e0:	98c03fcc 	andi	r3,r19,255
 800d8e4:	04400434 	movhi	r17,16
 800d8e8:	8c7fffc4 	addi	r17,r17,-1
 800d8ec:	180697fa 	slli	r3,r3,31
 800d8f0:	8460703a 	and	r16,r16,r17
 800d8f4:	8120b03a 	or	r16,r16,r4
 800d8f8:	80c6b03a 	or	r3,r16,r3
 800d8fc:	b805883a 	mov	r2,r23
 800d900:	dfc01117 	ldw	ra,68(sp)
 800d904:	df001017 	ldw	fp,64(sp)
 800d908:	ddc00f17 	ldw	r23,60(sp)
 800d90c:	dd800e17 	ldw	r22,56(sp)
 800d910:	dd400d17 	ldw	r21,52(sp)
 800d914:	dd000c17 	ldw	r20,48(sp)
 800d918:	dcc00b17 	ldw	r19,44(sp)
 800d91c:	dc800a17 	ldw	r18,40(sp)
 800d920:	dc400917 	ldw	r17,36(sp)
 800d924:	dc000817 	ldw	r16,32(sp)
 800d928:	dec01204 	addi	sp,sp,72
 800d92c:	f800283a 	ret
 800d930:	8104b03a 	or	r2,r16,r4
 800d934:	10004426 	beq	r2,zero,800da48 <__muldf3+0x2d4>
 800d938:	80014b26 	beq	r16,zero,800de68 <__muldf3+0x6f4>
 800d93c:	8009883a 	mov	r4,r16
 800d940:	d9800715 	stw	r6,28(sp)
 800d944:	d9c00215 	stw	r7,8(sp)
 800d948:	da400415 	stw	r9,16(sp)
 800d94c:	800eaac0 	call	800eaac <__clzsi2>
 800d950:	d9800717 	ldw	r6,28(sp)
 800d954:	d9c00217 	ldw	r7,8(sp)
 800d958:	da400417 	ldw	r9,16(sp)
 800d95c:	1007883a 	mov	r3,r2
 800d960:	01000a04 	movi	r4,40
 800d964:	1dfffe04 	addi	r23,r3,-8
 800d968:	20c9c83a 	sub	r4,r4,r3
 800d96c:	85e0983a 	sll	r16,r16,r23
 800d970:	9108d83a 	srl	r4,r18,r4
 800d974:	95ee983a 	sll	r23,r18,r23
 800d978:	2420b03a 	or	r16,r4,r16
 800d97c:	053f0344 	movi	r20,-1011
 800d980:	a0e9c83a 	sub	r20,r20,r3
 800d984:	000b883a 	mov	r5,zero
 800d988:	0039883a 	mov	fp,zero
 800d98c:	003f9906 	br	800d7f4 <__alt_data_end+0xfc00d7f4>
 800d990:	8984b03a 	or	r2,r17,r6
 800d994:	10002a1e 	bne	r2,zero,800da40 <__muldf3+0x2cc>
 800d998:	0023883a 	mov	r17,zero
 800d99c:	0025883a 	mov	r18,zero
 800d9a0:	01c00084 	movi	r7,2
 800d9a4:	003fa506 	br	800d83c <__alt_data_end+0xfc00d83c>
 800d9a8:	8984b03a 	or	r2,r17,r6
 800d9ac:	10002026 	beq	r2,zero,800da30 <__muldf3+0x2bc>
 800d9b0:	88011c26 	beq	r17,zero,800de24 <__muldf3+0x6b0>
 800d9b4:	8809883a 	mov	r4,r17
 800d9b8:	d9400215 	stw	r5,8(sp)
 800d9bc:	d9800715 	stw	r6,28(sp)
 800d9c0:	da400415 	stw	r9,16(sp)
 800d9c4:	da800315 	stw	r10,12(sp)
 800d9c8:	800eaac0 	call	800eaac <__clzsi2>
 800d9cc:	d9400217 	ldw	r5,8(sp)
 800d9d0:	d9800717 	ldw	r6,28(sp)
 800d9d4:	da400417 	ldw	r9,16(sp)
 800d9d8:	da800317 	ldw	r10,12(sp)
 800d9dc:	1007883a 	mov	r3,r2
 800d9e0:	01000a04 	movi	r4,40
 800d9e4:	1cbffe04 	addi	r18,r3,-8
 800d9e8:	20c9c83a 	sub	r4,r4,r3
 800d9ec:	8ca2983a 	sll	r17,r17,r18
 800d9f0:	3108d83a 	srl	r4,r6,r4
 800d9f4:	34a4983a 	sll	r18,r6,r18
 800d9f8:	2462b03a 	or	r17,r4,r17
 800d9fc:	00bf0344 	movi	r2,-1011
 800da00:	10c7c83a 	sub	r3,r2,r3
 800da04:	000f883a 	mov	r7,zero
 800da08:	003f8c06 	br	800d83c <__alt_data_end+0xfc00d83c>
 800da0c:	008000c4 	movi	r2,3
 800da10:	e0816d26 	beq	fp,r2,800dfc8 <__muldf3+0x854>
 800da14:	00800044 	movi	r2,1
 800da18:	e081321e 	bne	fp,r2,800dee4 <__muldf3+0x770>
 800da1c:	48a6703a 	and	r19,r9,r2
 800da20:	0009883a 	mov	r4,zero
 800da24:	0021883a 	mov	r16,zero
 800da28:	002f883a 	mov	r23,zero
 800da2c:	003fab06 	br	800d8dc <__alt_data_end+0xfc00d8dc>
 800da30:	0023883a 	mov	r17,zero
 800da34:	0025883a 	mov	r18,zero
 800da38:	01c00044 	movi	r7,1
 800da3c:	003f7f06 	br	800d83c <__alt_data_end+0xfc00d83c>
 800da40:	01c000c4 	movi	r7,3
 800da44:	003f7d06 	br	800d83c <__alt_data_end+0xfc00d83c>
 800da48:	01400104 	movi	r5,4
 800da4c:	0021883a 	mov	r16,zero
 800da50:	002f883a 	mov	r23,zero
 800da54:	07000044 	movi	fp,1
 800da58:	003f6606 	br	800d7f4 <__alt_data_end+0xfc00d7f4>
 800da5c:	01400304 	movi	r5,12
 800da60:	070000c4 	movi	fp,3
 800da64:	003f6306 	br	800d7f4 <__alt_data_end+0xfc00d7f4>
 800da68:	04000434 	movhi	r16,16
 800da6c:	0027883a 	mov	r19,zero
 800da70:	843fffc4 	addi	r16,r16,-1
 800da74:	05ffffc4 	movi	r23,-1
 800da78:	0101ffc4 	movi	r4,2047
 800da7c:	003f9706 	br	800d8dc <__alt_data_end+0xfc00d8dc>
 800da80:	8821883a 	mov	r16,r17
 800da84:	902f883a 	mov	r23,r18
 800da88:	5013883a 	mov	r9,r10
 800da8c:	3839883a 	mov	fp,r7
 800da90:	003f8c06 	br	800d8c4 <__alt_data_end+0xfc00d8c4>
 800da94:	8821883a 	mov	r16,r17
 800da98:	902f883a 	mov	r23,r18
 800da9c:	3013883a 	mov	r9,r6
 800daa0:	3839883a 	mov	fp,r7
 800daa4:	003f8706 	br	800d8c4 <__alt_data_end+0xfc00d8c4>
 800daa8:	b82ad43a 	srli	r21,r23,16
 800daac:	9038d43a 	srli	fp,r18,16
 800dab0:	bdffffcc 	andi	r23,r23,65535
 800dab4:	94bfffcc 	andi	r18,r18,65535
 800dab8:	9009883a 	mov	r4,r18
 800dabc:	b80b883a 	mov	r5,r23
 800dac0:	d8c00515 	stw	r3,20(sp)
 800dac4:	d9800715 	stw	r6,28(sp)
 800dac8:	da000615 	stw	r8,24(sp)
 800dacc:	800c2ec0 	call	800c2ec <__mulsi3>
 800dad0:	9009883a 	mov	r4,r18
 800dad4:	a80b883a 	mov	r5,r21
 800dad8:	1029883a 	mov	r20,r2
 800dadc:	800c2ec0 	call	800c2ec <__mulsi3>
 800dae0:	e009883a 	mov	r4,fp
 800dae4:	a80b883a 	mov	r5,r21
 800dae8:	102d883a 	mov	r22,r2
 800daec:	800c2ec0 	call	800c2ec <__mulsi3>
 800daf0:	e009883a 	mov	r4,fp
 800daf4:	b80b883a 	mov	r5,r23
 800daf8:	1027883a 	mov	r19,r2
 800dafc:	800c2ec0 	call	800c2ec <__mulsi3>
 800db00:	a008d43a 	srli	r4,r20,16
 800db04:	b085883a 	add	r2,r22,r2
 800db08:	d8c00517 	ldw	r3,20(sp)
 800db0c:	110f883a 	add	r7,r2,r4
 800db10:	d9800717 	ldw	r6,28(sp)
 800db14:	da000617 	ldw	r8,24(sp)
 800db18:	3d80022e 	bgeu	r7,r22,800db24 <__muldf3+0x3b0>
 800db1c:	00800074 	movhi	r2,1
 800db20:	98a7883a 	add	r19,r19,r2
 800db24:	3804943a 	slli	r2,r7,16
 800db28:	380ed43a 	srli	r7,r7,16
 800db2c:	882cd43a 	srli	r22,r17,16
 800db30:	a53fffcc 	andi	r20,r20,65535
 800db34:	8c7fffcc 	andi	r17,r17,65535
 800db38:	1529883a 	add	r20,r2,r20
 800db3c:	8809883a 	mov	r4,r17
 800db40:	b80b883a 	mov	r5,r23
 800db44:	d8c00515 	stw	r3,20(sp)
 800db48:	d9800715 	stw	r6,28(sp)
 800db4c:	da000615 	stw	r8,24(sp)
 800db50:	d9c00015 	stw	r7,0(sp)
 800db54:	dd000115 	stw	r20,4(sp)
 800db58:	800c2ec0 	call	800c2ec <__mulsi3>
 800db5c:	a80b883a 	mov	r5,r21
 800db60:	8809883a 	mov	r4,r17
 800db64:	d8800415 	stw	r2,16(sp)
 800db68:	800c2ec0 	call	800c2ec <__mulsi3>
 800db6c:	a80b883a 	mov	r5,r21
 800db70:	b009883a 	mov	r4,r22
 800db74:	1029883a 	mov	r20,r2
 800db78:	800c2ec0 	call	800c2ec <__mulsi3>
 800db7c:	b009883a 	mov	r4,r22
 800db80:	b80b883a 	mov	r5,r23
 800db84:	102b883a 	mov	r21,r2
 800db88:	800c2ec0 	call	800c2ec <__mulsi3>
 800db8c:	da400417 	ldw	r9,16(sp)
 800db90:	a085883a 	add	r2,r20,r2
 800db94:	d8c00517 	ldw	r3,20(sp)
 800db98:	4808d43a 	srli	r4,r9,16
 800db9c:	d9800717 	ldw	r6,28(sp)
 800dba0:	da000617 	ldw	r8,24(sp)
 800dba4:	1109883a 	add	r4,r2,r4
 800dba8:	2500022e 	bgeu	r4,r20,800dbb4 <__muldf3+0x440>
 800dbac:	00800074 	movhi	r2,1
 800dbb0:	a8ab883a 	add	r21,r21,r2
 800dbb4:	200e943a 	slli	r7,r4,16
 800dbb8:	2004d43a 	srli	r2,r4,16
 800dbbc:	802ed43a 	srli	r23,r16,16
 800dbc0:	843fffcc 	andi	r16,r16,65535
 800dbc4:	4d3fffcc 	andi	r20,r9,65535
 800dbc8:	9009883a 	mov	r4,r18
 800dbcc:	800b883a 	mov	r5,r16
 800dbd0:	3d29883a 	add	r20,r7,r20
 800dbd4:	d8c00515 	stw	r3,20(sp)
 800dbd8:	d9800715 	stw	r6,28(sp)
 800dbdc:	da000615 	stw	r8,24(sp)
 800dbe0:	a8ab883a 	add	r21,r21,r2
 800dbe4:	800c2ec0 	call	800c2ec <__mulsi3>
 800dbe8:	9009883a 	mov	r4,r18
 800dbec:	b80b883a 	mov	r5,r23
 800dbf0:	d8800315 	stw	r2,12(sp)
 800dbf4:	800c2ec0 	call	800c2ec <__mulsi3>
 800dbf8:	e009883a 	mov	r4,fp
 800dbfc:	b80b883a 	mov	r5,r23
 800dc00:	1025883a 	mov	r18,r2
 800dc04:	800c2ec0 	call	800c2ec <__mulsi3>
 800dc08:	e009883a 	mov	r4,fp
 800dc0c:	800b883a 	mov	r5,r16
 800dc10:	d8800215 	stw	r2,8(sp)
 800dc14:	800c2ec0 	call	800c2ec <__mulsi3>
 800dc18:	da800317 	ldw	r10,12(sp)
 800dc1c:	d9400017 	ldw	r5,0(sp)
 800dc20:	9085883a 	add	r2,r18,r2
 800dc24:	5008d43a 	srli	r4,r10,16
 800dc28:	a153883a 	add	r9,r20,r5
 800dc2c:	d8c00517 	ldw	r3,20(sp)
 800dc30:	1109883a 	add	r4,r2,r4
 800dc34:	d9800717 	ldw	r6,28(sp)
 800dc38:	da000617 	ldw	r8,24(sp)
 800dc3c:	dac00217 	ldw	r11,8(sp)
 800dc40:	2480022e 	bgeu	r4,r18,800dc4c <__muldf3+0x4d8>
 800dc44:	00800074 	movhi	r2,1
 800dc48:	5897883a 	add	r11,r11,r2
 800dc4c:	200e943a 	slli	r7,r4,16
 800dc50:	2038d43a 	srli	fp,r4,16
 800dc54:	52bfffcc 	andi	r10,r10,65535
 800dc58:	3a8f883a 	add	r7,r7,r10
 800dc5c:	8809883a 	mov	r4,r17
 800dc60:	800b883a 	mov	r5,r16
 800dc64:	d8c00515 	stw	r3,20(sp)
 800dc68:	d9800715 	stw	r6,28(sp)
 800dc6c:	d9c00215 	stw	r7,8(sp)
 800dc70:	da000615 	stw	r8,24(sp)
 800dc74:	da400415 	stw	r9,16(sp)
 800dc78:	5f39883a 	add	fp,r11,fp
 800dc7c:	800c2ec0 	call	800c2ec <__mulsi3>
 800dc80:	8809883a 	mov	r4,r17
 800dc84:	b80b883a 	mov	r5,r23
 800dc88:	1025883a 	mov	r18,r2
 800dc8c:	800c2ec0 	call	800c2ec <__mulsi3>
 800dc90:	b009883a 	mov	r4,r22
 800dc94:	b80b883a 	mov	r5,r23
 800dc98:	d8800315 	stw	r2,12(sp)
 800dc9c:	800c2ec0 	call	800c2ec <__mulsi3>
 800dca0:	b009883a 	mov	r4,r22
 800dca4:	800b883a 	mov	r5,r16
 800dca8:	1023883a 	mov	r17,r2
 800dcac:	800c2ec0 	call	800c2ec <__mulsi3>
 800dcb0:	da800317 	ldw	r10,12(sp)
 800dcb4:	9008d43a 	srli	r4,r18,16
 800dcb8:	d8c00517 	ldw	r3,20(sp)
 800dcbc:	5085883a 	add	r2,r10,r2
 800dcc0:	1109883a 	add	r4,r2,r4
 800dcc4:	d9800717 	ldw	r6,28(sp)
 800dcc8:	d9c00217 	ldw	r7,8(sp)
 800dccc:	da000617 	ldw	r8,24(sp)
 800dcd0:	da400417 	ldw	r9,16(sp)
 800dcd4:	2280022e 	bgeu	r4,r10,800dce0 <__muldf3+0x56c>
 800dcd8:	00800074 	movhi	r2,1
 800dcdc:	88a3883a 	add	r17,r17,r2
 800dce0:	2004943a 	slli	r2,r4,16
 800dce4:	94bfffcc 	andi	r18,r18,65535
 800dce8:	4ce7883a 	add	r19,r9,r19
 800dcec:	14a5883a 	add	r18,r2,r18
 800dcf0:	9d29803a 	cmpltu	r20,r19,r20
 800dcf4:	9565883a 	add	r18,r18,r21
 800dcf8:	9505883a 	add	r2,r18,r20
 800dcfc:	99e7883a 	add	r19,r19,r7
 800dd00:	99cf803a 	cmpltu	r7,r19,r7
 800dd04:	e08b883a 	add	r5,fp,r2
 800dd08:	2008d43a 	srli	r4,r4,16
 800dd0c:	29ef883a 	add	r23,r5,r7
 800dd10:	1529803a 	cmpltu	r20,r2,r20
 800dd14:	956b803a 	cmpltu	r21,r18,r21
 800dd18:	b9cf803a 	cmpltu	r7,r23,r7
 800dd1c:	a564b03a 	or	r18,r20,r21
 800dd20:	2f39803a 	cmpltu	fp,r5,fp
 800dd24:	9125883a 	add	r18,r18,r4
 800dd28:	3f38b03a 	or	fp,r7,fp
 800dd2c:	9725883a 	add	r18,r18,fp
 800dd30:	9804927a 	slli	r2,r19,9
 800dd34:	9463883a 	add	r17,r18,r17
 800dd38:	d9000117 	ldw	r4,4(sp)
 800dd3c:	b820d5fa 	srli	r16,r23,23
 800dd40:	8822927a 	slli	r17,r17,9
 800dd44:	9826d5fa 	srli	r19,r19,23
 800dd48:	1104b03a 	or	r2,r2,r4
 800dd4c:	b82e927a 	slli	r23,r23,9
 800dd50:	1004c03a 	cmpne	r2,r2,zero
 800dd54:	8c20b03a 	or	r16,r17,r16
 800dd58:	14e6b03a 	or	r19,r2,r19
 800dd5c:	8080402c 	andhi	r2,r16,256
 800dd60:	9deeb03a 	or	r23,r19,r23
 800dd64:	10000726 	beq	r2,zero,800dd84 <__muldf3+0x610>
 800dd68:	b804d07a 	srli	r2,r23,1
 800dd6c:	800697fa 	slli	r3,r16,31
 800dd70:	bdc0004c 	andi	r23,r23,1
 800dd74:	8020d07a 	srli	r16,r16,1
 800dd78:	b8aeb03a 	or	r23,r23,r2
 800dd7c:	b8eeb03a 	or	r23,r23,r3
 800dd80:	4007883a 	mov	r3,r8
 800dd84:	1900ffc4 	addi	r4,r3,1023
 800dd88:	01004d0e 	bge	zero,r4,800dec0 <__muldf3+0x74c>
 800dd8c:	b88001cc 	andi	r2,r23,7
 800dd90:	10000726 	beq	r2,zero,800ddb0 <__muldf3+0x63c>
 800dd94:	b94003cc 	andi	r5,r23,15
 800dd98:	00800104 	movi	r2,4
 800dd9c:	28800426 	beq	r5,r2,800ddb0 <__muldf3+0x63c>
 800dda0:	b885883a 	add	r2,r23,r2
 800dda4:	15ef803a 	cmpltu	r23,r2,r23
 800dda8:	85e1883a 	add	r16,r16,r23
 800ddac:	102f883a 	mov	r23,r2
 800ddb0:	8080402c 	andhi	r2,r16,256
 800ddb4:	10000426 	beq	r2,zero,800ddc8 <__muldf3+0x654>
 800ddb8:	00bfc034 	movhi	r2,65280
 800ddbc:	10bfffc4 	addi	r2,r2,-1
 800ddc0:	19010004 	addi	r4,r3,1024
 800ddc4:	80a0703a 	and	r16,r16,r2
 800ddc8:	0081ff84 	movi	r2,2046
 800ddcc:	1100340e 	bge	r2,r4,800dea0 <__muldf3+0x72c>
 800ddd0:	34c0004c 	andi	r19,r6,1
 800ddd4:	0101ffc4 	movi	r4,2047
 800ddd8:	0021883a 	mov	r16,zero
 800dddc:	002f883a 	mov	r23,zero
 800dde0:	003ebe06 	br	800d8dc <__alt_data_end+0xfc00d8dc>
 800dde4:	8080022c 	andhi	r2,r16,8
 800dde8:	10000926 	beq	r2,zero,800de10 <__muldf3+0x69c>
 800ddec:	8880022c 	andhi	r2,r17,8
 800ddf0:	1000071e 	bne	r2,zero,800de10 <__muldf3+0x69c>
 800ddf4:	00800434 	movhi	r2,16
 800ddf8:	8c000234 	orhi	r16,r17,8
 800ddfc:	10bfffc4 	addi	r2,r2,-1
 800de00:	b027883a 	mov	r19,r22
 800de04:	80a0703a 	and	r16,r16,r2
 800de08:	902f883a 	mov	r23,r18
 800de0c:	003f1a06 	br	800da78 <__alt_data_end+0xfc00da78>
 800de10:	00800434 	movhi	r2,16
 800de14:	84000234 	orhi	r16,r16,8
 800de18:	10bfffc4 	addi	r2,r2,-1
 800de1c:	80a0703a 	and	r16,r16,r2
 800de20:	003f1506 	br	800da78 <__alt_data_end+0xfc00da78>
 800de24:	3009883a 	mov	r4,r6
 800de28:	d9400215 	stw	r5,8(sp)
 800de2c:	d9800715 	stw	r6,28(sp)
 800de30:	da400415 	stw	r9,16(sp)
 800de34:	da800315 	stw	r10,12(sp)
 800de38:	800eaac0 	call	800eaac <__clzsi2>
 800de3c:	10c00804 	addi	r3,r2,32
 800de40:	010009c4 	movi	r4,39
 800de44:	d9400217 	ldw	r5,8(sp)
 800de48:	d9800717 	ldw	r6,28(sp)
 800de4c:	da400417 	ldw	r9,16(sp)
 800de50:	da800317 	ldw	r10,12(sp)
 800de54:	20fee20e 	bge	r4,r3,800d9e0 <__alt_data_end+0xfc00d9e0>
 800de58:	147ffe04 	addi	r17,r2,-8
 800de5c:	9462983a 	sll	r17,r18,r17
 800de60:	0025883a 	mov	r18,zero
 800de64:	003ee506 	br	800d9fc <__alt_data_end+0xfc00d9fc>
 800de68:	d9800715 	stw	r6,28(sp)
 800de6c:	d9c00215 	stw	r7,8(sp)
 800de70:	da400415 	stw	r9,16(sp)
 800de74:	800eaac0 	call	800eaac <__clzsi2>
 800de78:	10c00804 	addi	r3,r2,32
 800de7c:	010009c4 	movi	r4,39
 800de80:	d9800717 	ldw	r6,28(sp)
 800de84:	d9c00217 	ldw	r7,8(sp)
 800de88:	da400417 	ldw	r9,16(sp)
 800de8c:	20feb40e 	bge	r4,r3,800d960 <__alt_data_end+0xfc00d960>
 800de90:	143ffe04 	addi	r16,r2,-8
 800de94:	9420983a 	sll	r16,r18,r16
 800de98:	002f883a 	mov	r23,zero
 800de9c:	003eb706 	br	800d97c <__alt_data_end+0xfc00d97c>
 800dea0:	8004977a 	slli	r2,r16,29
 800dea4:	b82ed0fa 	srli	r23,r23,3
 800dea8:	8020927a 	slli	r16,r16,9
 800deac:	2101ffcc 	andi	r4,r4,2047
 800deb0:	15eeb03a 	or	r23,r2,r23
 800deb4:	8020d33a 	srli	r16,r16,12
 800deb8:	34c0004c 	andi	r19,r6,1
 800debc:	003e8706 	br	800d8dc <__alt_data_end+0xfc00d8dc>
 800dec0:	00bf0084 	movi	r2,-1022
 800dec4:	10c5c83a 	sub	r2,r2,r3
 800dec8:	01000e04 	movi	r4,56
 800decc:	2080080e 	bge	r4,r2,800def0 <__muldf3+0x77c>
 800ded0:	34c0004c 	andi	r19,r6,1
 800ded4:	0009883a 	mov	r4,zero
 800ded8:	0021883a 	mov	r16,zero
 800dedc:	002f883a 	mov	r23,zero
 800dee0:	003e7e06 	br	800d8dc <__alt_data_end+0xfc00d8dc>
 800dee4:	4007883a 	mov	r3,r8
 800dee8:	480d883a 	mov	r6,r9
 800deec:	003fa506 	br	800dd84 <__alt_data_end+0xfc00dd84>
 800def0:	010007c4 	movi	r4,31
 800def4:	20801816 	blt	r4,r2,800df58 <__muldf3+0x7e4>
 800def8:	18c10784 	addi	r3,r3,1054
 800defc:	80c8983a 	sll	r4,r16,r3
 800df00:	b88ad83a 	srl	r5,r23,r2
 800df04:	b8c6983a 	sll	r3,r23,r3
 800df08:	80a0d83a 	srl	r16,r16,r2
 800df0c:	2908b03a 	or	r4,r5,r4
 800df10:	1804c03a 	cmpne	r2,r3,zero
 800df14:	2088b03a 	or	r4,r4,r2
 800df18:	208001cc 	andi	r2,r4,7
 800df1c:	10000726 	beq	r2,zero,800df3c <__muldf3+0x7c8>
 800df20:	20c003cc 	andi	r3,r4,15
 800df24:	00800104 	movi	r2,4
 800df28:	18800426 	beq	r3,r2,800df3c <__muldf3+0x7c8>
 800df2c:	20c00104 	addi	r3,r4,4
 800df30:	1905803a 	cmpltu	r2,r3,r4
 800df34:	80a1883a 	add	r16,r16,r2
 800df38:	1809883a 	mov	r4,r3
 800df3c:	8080202c 	andhi	r2,r16,128
 800df40:	10001b26 	beq	r2,zero,800dfb0 <__muldf3+0x83c>
 800df44:	34c0004c 	andi	r19,r6,1
 800df48:	01000044 	movi	r4,1
 800df4c:	0021883a 	mov	r16,zero
 800df50:	002f883a 	mov	r23,zero
 800df54:	003e6106 	br	800d8dc <__alt_data_end+0xfc00d8dc>
 800df58:	013ef884 	movi	r4,-1054
 800df5c:	20c9c83a 	sub	r4,r4,r3
 800df60:	01400804 	movi	r5,32
 800df64:	8108d83a 	srl	r4,r16,r4
 800df68:	11401526 	beq	r2,r5,800dfc0 <__muldf3+0x84c>
 800df6c:	18c10f84 	addi	r3,r3,1086
 800df70:	80e0983a 	sll	r16,r16,r3
 800df74:	85eeb03a 	or	r23,r16,r23
 800df78:	b804c03a 	cmpne	r2,r23,zero
 800df7c:	1108b03a 	or	r4,r2,r4
 800df80:	20c001cc 	andi	r3,r4,7
 800df84:	1800061e 	bne	r3,zero,800dfa0 <__muldf3+0x82c>
 800df88:	0021883a 	mov	r16,zero
 800df8c:	202ed0fa 	srli	r23,r4,3
 800df90:	34c0004c 	andi	r19,r6,1
 800df94:	0009883a 	mov	r4,zero
 800df98:	b8eeb03a 	or	r23,r23,r3
 800df9c:	003e4f06 	br	800d8dc <__alt_data_end+0xfc00d8dc>
 800dfa0:	20c003cc 	andi	r3,r4,15
 800dfa4:	00800104 	movi	r2,4
 800dfa8:	0021883a 	mov	r16,zero
 800dfac:	18bfdf1e 	bne	r3,r2,800df2c <__alt_data_end+0xfc00df2c>
 800dfb0:	8004927a 	slli	r2,r16,9
 800dfb4:	8006977a 	slli	r3,r16,29
 800dfb8:	1020d33a 	srli	r16,r2,12
 800dfbc:	003ff306 	br	800df8c <__alt_data_end+0xfc00df8c>
 800dfc0:	0021883a 	mov	r16,zero
 800dfc4:	003feb06 	br	800df74 <__alt_data_end+0xfc00df74>
 800dfc8:	00800434 	movhi	r2,16
 800dfcc:	84000234 	orhi	r16,r16,8
 800dfd0:	10bfffc4 	addi	r2,r2,-1
 800dfd4:	4cc0004c 	andi	r19,r9,1
 800dfd8:	80a0703a 	and	r16,r16,r2
 800dfdc:	003ea606 	br	800da78 <__alt_data_end+0xfc00da78>

0800dfe0 <__subdf3>:
 800dfe0:	00c00434 	movhi	r3,16
 800dfe4:	18ffffc4 	addi	r3,r3,-1
 800dfe8:	defffb04 	addi	sp,sp,-20
 800dfec:	28d2703a 	and	r9,r5,r3
 800dff0:	3814d53a 	srli	r10,r7,20
 800dff4:	38c6703a 	and	r3,r7,r3
 800dff8:	3004d77a 	srli	r2,r6,29
 800dffc:	dc800215 	stw	r18,8(sp)
 800e000:	dc000015 	stw	r16,0(sp)
 800e004:	2824d7fa 	srli	r18,r5,31
 800e008:	2820d53a 	srli	r16,r5,20
 800e00c:	481290fa 	slli	r9,r9,3
 800e010:	200ad77a 	srli	r5,r4,29
 800e014:	180690fa 	slli	r3,r3,3
 800e018:	dc400115 	stw	r17,4(sp)
 800e01c:	dfc00415 	stw	ra,16(sp)
 800e020:	202290fa 	slli	r17,r4,3
 800e024:	dcc00315 	stw	r19,12(sp)
 800e028:	5281ffcc 	andi	r10,r10,2047
 800e02c:	0101ffc4 	movi	r4,2047
 800e030:	9011883a 	mov	r8,r18
 800e034:	8401ffcc 	andi	r16,r16,2047
 800e038:	94803fcc 	andi	r18,r18,255
 800e03c:	494ab03a 	or	r5,r9,r5
 800e040:	380ed7fa 	srli	r7,r7,31
 800e044:	1886b03a 	or	r3,r3,r2
 800e048:	300c90fa 	slli	r6,r6,3
 800e04c:	51009026 	beq	r10,r4,800e290 <__subdf3+0x2b0>
 800e050:	39c0005c 	xori	r7,r7,1
 800e054:	8285c83a 	sub	r2,r16,r10
 800e058:	91c06f26 	beq	r18,r7,800e218 <__subdf3+0x238>
 800e05c:	0080b10e 	bge	zero,r2,800e324 <__subdf3+0x344>
 800e060:	50002a1e 	bne	r10,zero,800e10c <__subdf3+0x12c>
 800e064:	1988b03a 	or	r4,r3,r6
 800e068:	2000941e 	bne	r4,zero,800e2bc <__subdf3+0x2dc>
 800e06c:	888001cc 	andi	r2,r17,7
 800e070:	10005b26 	beq	r2,zero,800e1e0 <__subdf3+0x200>
 800e074:	88c003cc 	andi	r3,r17,15
 800e078:	00800104 	movi	r2,4
 800e07c:	18805826 	beq	r3,r2,800e1e0 <__subdf3+0x200>
 800e080:	88c00104 	addi	r3,r17,4
 800e084:	1c63803a 	cmpltu	r17,r3,r17
 800e088:	2c4b883a 	add	r5,r5,r17
 800e08c:	2880202c 	andhi	r2,r5,128
 800e090:	9200004c 	andi	r8,r18,1
 800e094:	1823883a 	mov	r17,r3
 800e098:	10005426 	beq	r2,zero,800e1ec <__subdf3+0x20c>
 800e09c:	84000044 	addi	r16,r16,1
 800e0a0:	0081ffc4 	movi	r2,2047
 800e0a4:	8080bf26 	beq	r16,r2,800e3a4 <__subdf3+0x3c4>
 800e0a8:	013fe034 	movhi	r4,65408
 800e0ac:	213fffc4 	addi	r4,r4,-1
 800e0b0:	290a703a 	and	r5,r5,r4
 800e0b4:	2804977a 	slli	r2,r5,29
 800e0b8:	280a927a 	slli	r5,r5,9
 800e0bc:	8822d0fa 	srli	r17,r17,3
 800e0c0:	8401ffcc 	andi	r16,r16,2047
 800e0c4:	2808d33a 	srli	r4,r5,12
 800e0c8:	1444b03a 	or	r2,r2,r17
 800e0cc:	8401ffcc 	andi	r16,r16,2047
 800e0d0:	800a953a 	slli	r5,r16,20
 800e0d4:	40c03fcc 	andi	r3,r8,255
 800e0d8:	04000434 	movhi	r16,16
 800e0dc:	180697fa 	slli	r3,r3,31
 800e0e0:	843fffc4 	addi	r16,r16,-1
 800e0e4:	2420703a 	and	r16,r4,r16
 800e0e8:	8160b03a 	or	r16,r16,r5
 800e0ec:	80c6b03a 	or	r3,r16,r3
 800e0f0:	dfc00417 	ldw	ra,16(sp)
 800e0f4:	dcc00317 	ldw	r19,12(sp)
 800e0f8:	dc800217 	ldw	r18,8(sp)
 800e0fc:	dc400117 	ldw	r17,4(sp)
 800e100:	dc000017 	ldw	r16,0(sp)
 800e104:	dec00504 	addi	sp,sp,20
 800e108:	f800283a 	ret
 800e10c:	0101ffc4 	movi	r4,2047
 800e110:	813fd626 	beq	r16,r4,800e06c <__alt_data_end+0xfc00e06c>
 800e114:	18c02034 	orhi	r3,r3,128
 800e118:	01000e04 	movi	r4,56
 800e11c:	2080a416 	blt	r4,r2,800e3b0 <__subdf3+0x3d0>
 800e120:	010007c4 	movi	r4,31
 800e124:	2080c716 	blt	r4,r2,800e444 <__subdf3+0x464>
 800e128:	01000804 	movi	r4,32
 800e12c:	2089c83a 	sub	r4,r4,r2
 800e130:	1910983a 	sll	r8,r3,r4
 800e134:	308ed83a 	srl	r7,r6,r2
 800e138:	3108983a 	sll	r4,r6,r4
 800e13c:	1884d83a 	srl	r2,r3,r2
 800e140:	41ccb03a 	or	r6,r8,r7
 800e144:	2008c03a 	cmpne	r4,r4,zero
 800e148:	310cb03a 	or	r6,r6,r4
 800e14c:	898dc83a 	sub	r6,r17,r6
 800e150:	89a3803a 	cmpltu	r17,r17,r6
 800e154:	288bc83a 	sub	r5,r5,r2
 800e158:	2c4bc83a 	sub	r5,r5,r17
 800e15c:	3023883a 	mov	r17,r6
 800e160:	2880202c 	andhi	r2,r5,128
 800e164:	10006b26 	beq	r2,zero,800e314 <__subdf3+0x334>
 800e168:	04c02034 	movhi	r19,128
 800e16c:	9cffffc4 	addi	r19,r19,-1
 800e170:	2ce6703a 	and	r19,r5,r19
 800e174:	98007c26 	beq	r19,zero,800e368 <__subdf3+0x388>
 800e178:	9809883a 	mov	r4,r19
 800e17c:	800eaac0 	call	800eaac <__clzsi2>
 800e180:	10fffe04 	addi	r3,r2,-8
 800e184:	010007c4 	movi	r4,31
 800e188:	20c07d16 	blt	r4,r3,800e380 <__subdf3+0x3a0>
 800e18c:	01400a04 	movi	r5,40
 800e190:	2885c83a 	sub	r2,r5,r2
 800e194:	888ad83a 	srl	r5,r17,r2
 800e198:	98e6983a 	sll	r19,r19,r3
 800e19c:	88e2983a 	sll	r17,r17,r3
 800e1a0:	2ce6b03a 	or	r19,r5,r19
 800e1a4:	1c007a16 	blt	r3,r16,800e390 <__subdf3+0x3b0>
 800e1a8:	1c21c83a 	sub	r16,r3,r16
 800e1ac:	81400044 	addi	r5,r16,1
 800e1b0:	00c007c4 	movi	r3,31
 800e1b4:	19409616 	blt	r3,r5,800e410 <__subdf3+0x430>
 800e1b8:	1c21c83a 	sub	r16,r3,r16
 800e1bc:	8c08983a 	sll	r4,r17,r16
 800e1c0:	8946d83a 	srl	r3,r17,r5
 800e1c4:	9c20983a 	sll	r16,r19,r16
 800e1c8:	2008c03a 	cmpne	r4,r4,zero
 800e1cc:	994ad83a 	srl	r5,r19,r5
 800e1d0:	1c06b03a 	or	r3,r3,r16
 800e1d4:	1922b03a 	or	r17,r3,r4
 800e1d8:	0021883a 	mov	r16,zero
 800e1dc:	003fa306 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e1e0:	2880202c 	andhi	r2,r5,128
 800e1e4:	9200004c 	andi	r8,r18,1
 800e1e8:	103fac1e 	bne	r2,zero,800e09c <__alt_data_end+0xfc00e09c>
 800e1ec:	2804977a 	slli	r2,r5,29
 800e1f0:	8822d0fa 	srli	r17,r17,3
 800e1f4:	00c1ffc4 	movi	r3,2047
 800e1f8:	280ad0fa 	srli	r5,r5,3
 800e1fc:	1444b03a 	or	r2,r2,r17
 800e200:	80c02726 	beq	r16,r3,800e2a0 <__subdf3+0x2c0>
 800e204:	01000434 	movhi	r4,16
 800e208:	213fffc4 	addi	r4,r4,-1
 800e20c:	80e0703a 	and	r16,r16,r3
 800e210:	2908703a 	and	r4,r5,r4
 800e214:	003fad06 	br	800e0cc <__alt_data_end+0xfc00e0cc>
 800e218:	0080690e 	bge	zero,r2,800e3c0 <__subdf3+0x3e0>
 800e21c:	50002f26 	beq	r10,zero,800e2dc <__subdf3+0x2fc>
 800e220:	0101ffc4 	movi	r4,2047
 800e224:	813f9126 	beq	r16,r4,800e06c <__alt_data_end+0xfc00e06c>
 800e228:	18c02034 	orhi	r3,r3,128
 800e22c:	01000e04 	movi	r4,56
 800e230:	2080b00e 	bge	r4,r2,800e4f4 <__subdf3+0x514>
 800e234:	198cb03a 	or	r6,r3,r6
 800e238:	300ec03a 	cmpne	r7,r6,zero
 800e23c:	0005883a 	mov	r2,zero
 800e240:	3c4f883a 	add	r7,r7,r17
 800e244:	3c63803a 	cmpltu	r17,r7,r17
 800e248:	114b883a 	add	r5,r2,r5
 800e24c:	2c4b883a 	add	r5,r5,r17
 800e250:	3823883a 	mov	r17,r7
 800e254:	2880202c 	andhi	r2,r5,128
 800e258:	10002e26 	beq	r2,zero,800e314 <__subdf3+0x334>
 800e25c:	84000044 	addi	r16,r16,1
 800e260:	0081ffc4 	movi	r2,2047
 800e264:	8080de26 	beq	r16,r2,800e5e0 <__subdf3+0x600>
 800e268:	00bfe034 	movhi	r2,65408
 800e26c:	10bfffc4 	addi	r2,r2,-1
 800e270:	288a703a 	and	r5,r5,r2
 800e274:	880cd07a 	srli	r6,r17,1
 800e278:	280897fa 	slli	r4,r5,31
 800e27c:	88c0004c 	andi	r3,r17,1
 800e280:	30e2b03a 	or	r17,r6,r3
 800e284:	280ad07a 	srli	r5,r5,1
 800e288:	8922b03a 	or	r17,r17,r4
 800e28c:	003f7706 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e290:	1984b03a 	or	r2,r3,r6
 800e294:	103f6e26 	beq	r2,zero,800e050 <__alt_data_end+0xfc00e050>
 800e298:	39c03fcc 	andi	r7,r7,255
 800e29c:	003f6d06 	br	800e054 <__alt_data_end+0xfc00e054>
 800e2a0:	1146b03a 	or	r3,r2,r5
 800e2a4:	18003f26 	beq	r3,zero,800e3a4 <__subdf3+0x3c4>
 800e2a8:	00c00434 	movhi	r3,16
 800e2ac:	29000234 	orhi	r4,r5,8
 800e2b0:	18ffffc4 	addi	r3,r3,-1
 800e2b4:	20c8703a 	and	r4,r4,r3
 800e2b8:	003f8406 	br	800e0cc <__alt_data_end+0xfc00e0cc>
 800e2bc:	10bfffc4 	addi	r2,r2,-1
 800e2c0:	1000501e 	bne	r2,zero,800e404 <__subdf3+0x424>
 800e2c4:	898fc83a 	sub	r7,r17,r6
 800e2c8:	89e3803a 	cmpltu	r17,r17,r7
 800e2cc:	28cbc83a 	sub	r5,r5,r3
 800e2d0:	2c4bc83a 	sub	r5,r5,r17
 800e2d4:	3823883a 	mov	r17,r7
 800e2d8:	003fa106 	br	800e160 <__alt_data_end+0xfc00e160>
 800e2dc:	1988b03a 	or	r4,r3,r6
 800e2e0:	203f6226 	beq	r4,zero,800e06c <__alt_data_end+0xfc00e06c>
 800e2e4:	10bfffc4 	addi	r2,r2,-1
 800e2e8:	10009b1e 	bne	r2,zero,800e558 <__subdf3+0x578>
 800e2ec:	344d883a 	add	r6,r6,r17
 800e2f0:	3463803a 	cmpltu	r17,r6,r17
 800e2f4:	194b883a 	add	r5,r3,r5
 800e2f8:	2c4b883a 	add	r5,r5,r17
 800e2fc:	3023883a 	mov	r17,r6
 800e300:	003fd406 	br	800e254 <__alt_data_end+0xfc00e254>
 800e304:	1106b03a 	or	r3,r2,r4
 800e308:	1800b426 	beq	r3,zero,800e5dc <__subdf3+0x5fc>
 800e30c:	100b883a 	mov	r5,r2
 800e310:	2023883a 	mov	r17,r4
 800e314:	888001cc 	andi	r2,r17,7
 800e318:	103f561e 	bne	r2,zero,800e074 <__alt_data_end+0xfc00e074>
 800e31c:	9200004c 	andi	r8,r18,1
 800e320:	003fb206 	br	800e1ec <__alt_data_end+0xfc00e1ec>
 800e324:	1000531e 	bne	r2,zero,800e474 <__subdf3+0x494>
 800e328:	80800044 	addi	r2,r16,1
 800e32c:	1081ffcc 	andi	r2,r2,2047
 800e330:	01000044 	movi	r4,1
 800e334:	2080a00e 	bge	r4,r2,800e5b8 <__subdf3+0x5d8>
 800e338:	8985c83a 	sub	r2,r17,r6
 800e33c:	8889803a 	cmpltu	r4,r17,r2
 800e340:	28e7c83a 	sub	r19,r5,r3
 800e344:	9927c83a 	sub	r19,r19,r4
 800e348:	9900202c 	andhi	r4,r19,128
 800e34c:	20006226 	beq	r4,zero,800e4d8 <__subdf3+0x4f8>
 800e350:	3463c83a 	sub	r17,r6,r17
 800e354:	194bc83a 	sub	r5,r3,r5
 800e358:	344d803a 	cmpltu	r6,r6,r17
 800e35c:	29a7c83a 	sub	r19,r5,r6
 800e360:	3825883a 	mov	r18,r7
 800e364:	983f841e 	bne	r19,zero,800e178 <__alt_data_end+0xfc00e178>
 800e368:	8809883a 	mov	r4,r17
 800e36c:	800eaac0 	call	800eaac <__clzsi2>
 800e370:	10800804 	addi	r2,r2,32
 800e374:	10fffe04 	addi	r3,r2,-8
 800e378:	010007c4 	movi	r4,31
 800e37c:	20ff830e 	bge	r4,r3,800e18c <__alt_data_end+0xfc00e18c>
 800e380:	14fff604 	addi	r19,r2,-40
 800e384:	8ce6983a 	sll	r19,r17,r19
 800e388:	0023883a 	mov	r17,zero
 800e38c:	1c3f860e 	bge	r3,r16,800e1a8 <__alt_data_end+0xfc00e1a8>
 800e390:	017fe034 	movhi	r5,65408
 800e394:	297fffc4 	addi	r5,r5,-1
 800e398:	80e1c83a 	sub	r16,r16,r3
 800e39c:	994a703a 	and	r5,r19,r5
 800e3a0:	003f3206 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e3a4:	0009883a 	mov	r4,zero
 800e3a8:	0005883a 	mov	r2,zero
 800e3ac:	003f4706 	br	800e0cc <__alt_data_end+0xfc00e0cc>
 800e3b0:	198cb03a 	or	r6,r3,r6
 800e3b4:	300cc03a 	cmpne	r6,r6,zero
 800e3b8:	0005883a 	mov	r2,zero
 800e3bc:	003f6306 	br	800e14c <__alt_data_end+0xfc00e14c>
 800e3c0:	10009d1e 	bne	r2,zero,800e638 <__subdf3+0x658>
 800e3c4:	81c00044 	addi	r7,r16,1
 800e3c8:	3881ffcc 	andi	r2,r7,2047
 800e3cc:	02400044 	movi	r9,1
 800e3d0:	4880680e 	bge	r9,r2,800e574 <__subdf3+0x594>
 800e3d4:	0081ffc4 	movi	r2,2047
 800e3d8:	3880ae26 	beq	r7,r2,800e694 <__subdf3+0x6b4>
 800e3dc:	344d883a 	add	r6,r6,r17
 800e3e0:	3463803a 	cmpltu	r17,r6,r17
 800e3e4:	194b883a 	add	r5,r3,r5
 800e3e8:	2c4b883a 	add	r5,r5,r17
 800e3ec:	282297fa 	slli	r17,r5,31
 800e3f0:	300cd07a 	srli	r6,r6,1
 800e3f4:	280ad07a 	srli	r5,r5,1
 800e3f8:	3821883a 	mov	r16,r7
 800e3fc:	89a2b03a 	or	r17,r17,r6
 800e400:	003f1a06 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e404:	0101ffc4 	movi	r4,2047
 800e408:	813f431e 	bne	r16,r4,800e118 <__alt_data_end+0xfc00e118>
 800e40c:	003f1706 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e410:	80bff844 	addi	r2,r16,-31
 800e414:	00c00804 	movi	r3,32
 800e418:	9884d83a 	srl	r2,r19,r2
 800e41c:	28c05126 	beq	r5,r3,800e564 <__subdf3+0x584>
 800e420:	00c00fc4 	movi	r3,63
 800e424:	1c21c83a 	sub	r16,r3,r16
 800e428:	9c26983a 	sll	r19,r19,r16
 800e42c:	9c62b03a 	or	r17,r19,r17
 800e430:	8822c03a 	cmpne	r17,r17,zero
 800e434:	88a2b03a 	or	r17,r17,r2
 800e438:	000b883a 	mov	r5,zero
 800e43c:	0021883a 	mov	r16,zero
 800e440:	003fb406 	br	800e314 <__alt_data_end+0xfc00e314>
 800e444:	113ff804 	addi	r4,r2,-32
 800e448:	01c00804 	movi	r7,32
 800e44c:	1908d83a 	srl	r4,r3,r4
 800e450:	11c04626 	beq	r2,r7,800e56c <__subdf3+0x58c>
 800e454:	01c01004 	movi	r7,64
 800e458:	3885c83a 	sub	r2,r7,r2
 800e45c:	1884983a 	sll	r2,r3,r2
 800e460:	118cb03a 	or	r6,r2,r6
 800e464:	300cc03a 	cmpne	r6,r6,zero
 800e468:	310cb03a 	or	r6,r6,r4
 800e46c:	0005883a 	mov	r2,zero
 800e470:	003f3606 	br	800e14c <__alt_data_end+0xfc00e14c>
 800e474:	80002b26 	beq	r16,zero,800e524 <__subdf3+0x544>
 800e478:	0101ffc4 	movi	r4,2047
 800e47c:	51006926 	beq	r10,r4,800e624 <__subdf3+0x644>
 800e480:	0085c83a 	sub	r2,zero,r2
 800e484:	29402034 	orhi	r5,r5,128
 800e488:	01000e04 	movi	r4,56
 800e48c:	20807d16 	blt	r4,r2,800e684 <__subdf3+0x6a4>
 800e490:	010007c4 	movi	r4,31
 800e494:	2080d916 	blt	r4,r2,800e7fc <__subdf3+0x81c>
 800e498:	01000804 	movi	r4,32
 800e49c:	2089c83a 	sub	r4,r4,r2
 800e4a0:	2912983a 	sll	r9,r5,r4
 800e4a4:	8890d83a 	srl	r8,r17,r2
 800e4a8:	8908983a 	sll	r4,r17,r4
 800e4ac:	2884d83a 	srl	r2,r5,r2
 800e4b0:	4a22b03a 	or	r17,r9,r8
 800e4b4:	2008c03a 	cmpne	r4,r4,zero
 800e4b8:	8922b03a 	or	r17,r17,r4
 800e4bc:	3463c83a 	sub	r17,r6,r17
 800e4c0:	1885c83a 	sub	r2,r3,r2
 800e4c4:	344d803a 	cmpltu	r6,r6,r17
 800e4c8:	118bc83a 	sub	r5,r2,r6
 800e4cc:	5021883a 	mov	r16,r10
 800e4d0:	3825883a 	mov	r18,r7
 800e4d4:	003f2206 	br	800e160 <__alt_data_end+0xfc00e160>
 800e4d8:	9886b03a 	or	r3,r19,r2
 800e4dc:	18001c1e 	bne	r3,zero,800e550 <__subdf3+0x570>
 800e4e0:	0011883a 	mov	r8,zero
 800e4e4:	000b883a 	mov	r5,zero
 800e4e8:	0023883a 	mov	r17,zero
 800e4ec:	0021883a 	mov	r16,zero
 800e4f0:	003f3e06 	br	800e1ec <__alt_data_end+0xfc00e1ec>
 800e4f4:	010007c4 	movi	r4,31
 800e4f8:	20803c16 	blt	r4,r2,800e5ec <__subdf3+0x60c>
 800e4fc:	01000804 	movi	r4,32
 800e500:	2089c83a 	sub	r4,r4,r2
 800e504:	1912983a 	sll	r9,r3,r4
 800e508:	308ed83a 	srl	r7,r6,r2
 800e50c:	3108983a 	sll	r4,r6,r4
 800e510:	1884d83a 	srl	r2,r3,r2
 800e514:	49ceb03a 	or	r7,r9,r7
 800e518:	2008c03a 	cmpne	r4,r4,zero
 800e51c:	390eb03a 	or	r7,r7,r4
 800e520:	003f4706 	br	800e240 <__alt_data_end+0xfc00e240>
 800e524:	2c48b03a 	or	r4,r5,r17
 800e528:	20003e26 	beq	r4,zero,800e624 <__subdf3+0x644>
 800e52c:	0084303a 	nor	r2,zero,r2
 800e530:	10003a1e 	bne	r2,zero,800e61c <__subdf3+0x63c>
 800e534:	3463c83a 	sub	r17,r6,r17
 800e538:	194bc83a 	sub	r5,r3,r5
 800e53c:	344d803a 	cmpltu	r6,r6,r17
 800e540:	298bc83a 	sub	r5,r5,r6
 800e544:	5021883a 	mov	r16,r10
 800e548:	3825883a 	mov	r18,r7
 800e54c:	003f0406 	br	800e160 <__alt_data_end+0xfc00e160>
 800e550:	1023883a 	mov	r17,r2
 800e554:	003f0706 	br	800e174 <__alt_data_end+0xfc00e174>
 800e558:	0101ffc4 	movi	r4,2047
 800e55c:	813f331e 	bne	r16,r4,800e22c <__alt_data_end+0xfc00e22c>
 800e560:	003ec206 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e564:	0027883a 	mov	r19,zero
 800e568:	003fb006 	br	800e42c <__alt_data_end+0xfc00e42c>
 800e56c:	0005883a 	mov	r2,zero
 800e570:	003fbb06 	br	800e460 <__alt_data_end+0xfc00e460>
 800e574:	2c44b03a 	or	r2,r5,r17
 800e578:	80008b1e 	bne	r16,zero,800e7a8 <__subdf3+0x7c8>
 800e57c:	1000b526 	beq	r2,zero,800e854 <__subdf3+0x874>
 800e580:	1984b03a 	or	r2,r3,r6
 800e584:	103eb926 	beq	r2,zero,800e06c <__alt_data_end+0xfc00e06c>
 800e588:	3449883a 	add	r4,r6,r17
 800e58c:	2463803a 	cmpltu	r17,r4,r17
 800e590:	194b883a 	add	r5,r3,r5
 800e594:	2c4b883a 	add	r5,r5,r17
 800e598:	2880202c 	andhi	r2,r5,128
 800e59c:	2023883a 	mov	r17,r4
 800e5a0:	103f5c26 	beq	r2,zero,800e314 <__alt_data_end+0xfc00e314>
 800e5a4:	00bfe034 	movhi	r2,65408
 800e5a8:	10bfffc4 	addi	r2,r2,-1
 800e5ac:	4821883a 	mov	r16,r9
 800e5b0:	288a703a 	and	r5,r5,r2
 800e5b4:	003ead06 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e5b8:	2c44b03a 	or	r2,r5,r17
 800e5bc:	8000291e 	bne	r16,zero,800e664 <__subdf3+0x684>
 800e5c0:	10004f1e 	bne	r2,zero,800e700 <__subdf3+0x720>
 800e5c4:	1984b03a 	or	r2,r3,r6
 800e5c8:	10000426 	beq	r2,zero,800e5dc <__subdf3+0x5fc>
 800e5cc:	180b883a 	mov	r5,r3
 800e5d0:	3023883a 	mov	r17,r6
 800e5d4:	3825883a 	mov	r18,r7
 800e5d8:	003ea406 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e5dc:	0011883a 	mov	r8,zero
 800e5e0:	000b883a 	mov	r5,zero
 800e5e4:	0023883a 	mov	r17,zero
 800e5e8:	003f0006 	br	800e1ec <__alt_data_end+0xfc00e1ec>
 800e5ec:	11fff804 	addi	r7,r2,-32
 800e5f0:	19c8d83a 	srl	r4,r3,r7
 800e5f4:	01c00804 	movi	r7,32
 800e5f8:	11c07e26 	beq	r2,r7,800e7f4 <__subdf3+0x814>
 800e5fc:	01c01004 	movi	r7,64
 800e600:	3885c83a 	sub	r2,r7,r2
 800e604:	1884983a 	sll	r2,r3,r2
 800e608:	118cb03a 	or	r6,r2,r6
 800e60c:	300ec03a 	cmpne	r7,r6,zero
 800e610:	390eb03a 	or	r7,r7,r4
 800e614:	0005883a 	mov	r2,zero
 800e618:	003f0906 	br	800e240 <__alt_data_end+0xfc00e240>
 800e61c:	0101ffc4 	movi	r4,2047
 800e620:	513f991e 	bne	r10,r4,800e488 <__alt_data_end+0xfc00e488>
 800e624:	180b883a 	mov	r5,r3
 800e628:	3023883a 	mov	r17,r6
 800e62c:	5021883a 	mov	r16,r10
 800e630:	3825883a 	mov	r18,r7
 800e634:	003e8d06 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e638:	80001a1e 	bne	r16,zero,800e6a4 <__subdf3+0x6c4>
 800e63c:	2c48b03a 	or	r4,r5,r17
 800e640:	20005526 	beq	r4,zero,800e798 <__subdf3+0x7b8>
 800e644:	0084303a 	nor	r2,zero,r2
 800e648:	1000511e 	bne	r2,zero,800e790 <__subdf3+0x7b0>
 800e64c:	89a3883a 	add	r17,r17,r6
 800e650:	194b883a 	add	r5,r3,r5
 800e654:	898d803a 	cmpltu	r6,r17,r6
 800e658:	298b883a 	add	r5,r5,r6
 800e65c:	5021883a 	mov	r16,r10
 800e660:	003efc06 	br	800e254 <__alt_data_end+0xfc00e254>
 800e664:	1000341e 	bne	r2,zero,800e738 <__subdf3+0x758>
 800e668:	1984b03a 	or	r2,r3,r6
 800e66c:	10006f26 	beq	r2,zero,800e82c <__subdf3+0x84c>
 800e670:	180b883a 	mov	r5,r3
 800e674:	3023883a 	mov	r17,r6
 800e678:	3825883a 	mov	r18,r7
 800e67c:	0401ffc4 	movi	r16,2047
 800e680:	003e7a06 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e684:	2c62b03a 	or	r17,r5,r17
 800e688:	8822c03a 	cmpne	r17,r17,zero
 800e68c:	0005883a 	mov	r2,zero
 800e690:	003f8a06 	br	800e4bc <__alt_data_end+0xfc00e4bc>
 800e694:	3821883a 	mov	r16,r7
 800e698:	000b883a 	mov	r5,zero
 800e69c:	0023883a 	mov	r17,zero
 800e6a0:	003ed206 	br	800e1ec <__alt_data_end+0xfc00e1ec>
 800e6a4:	0101ffc4 	movi	r4,2047
 800e6a8:	51003b26 	beq	r10,r4,800e798 <__subdf3+0x7b8>
 800e6ac:	0085c83a 	sub	r2,zero,r2
 800e6b0:	29402034 	orhi	r5,r5,128
 800e6b4:	01000e04 	movi	r4,56
 800e6b8:	20806216 	blt	r4,r2,800e844 <__subdf3+0x864>
 800e6bc:	010007c4 	movi	r4,31
 800e6c0:	20806b16 	blt	r4,r2,800e870 <__subdf3+0x890>
 800e6c4:	01000804 	movi	r4,32
 800e6c8:	2089c83a 	sub	r4,r4,r2
 800e6cc:	2912983a 	sll	r9,r5,r4
 800e6d0:	888ed83a 	srl	r7,r17,r2
 800e6d4:	8908983a 	sll	r4,r17,r4
 800e6d8:	2884d83a 	srl	r2,r5,r2
 800e6dc:	49e2b03a 	or	r17,r9,r7
 800e6e0:	2008c03a 	cmpne	r4,r4,zero
 800e6e4:	8922b03a 	or	r17,r17,r4
 800e6e8:	89a3883a 	add	r17,r17,r6
 800e6ec:	10c5883a 	add	r2,r2,r3
 800e6f0:	898d803a 	cmpltu	r6,r17,r6
 800e6f4:	118b883a 	add	r5,r2,r6
 800e6f8:	5021883a 	mov	r16,r10
 800e6fc:	003ed506 	br	800e254 <__alt_data_end+0xfc00e254>
 800e700:	1984b03a 	or	r2,r3,r6
 800e704:	103e5926 	beq	r2,zero,800e06c <__alt_data_end+0xfc00e06c>
 800e708:	8989c83a 	sub	r4,r17,r6
 800e70c:	8911803a 	cmpltu	r8,r17,r4
 800e710:	28c5c83a 	sub	r2,r5,r3
 800e714:	1205c83a 	sub	r2,r2,r8
 800e718:	1200202c 	andhi	r8,r2,128
 800e71c:	403ef926 	beq	r8,zero,800e304 <__alt_data_end+0xfc00e304>
 800e720:	3463c83a 	sub	r17,r6,r17
 800e724:	194bc83a 	sub	r5,r3,r5
 800e728:	344d803a 	cmpltu	r6,r6,r17
 800e72c:	298bc83a 	sub	r5,r5,r6
 800e730:	3825883a 	mov	r18,r7
 800e734:	003e4d06 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e738:	1984b03a 	or	r2,r3,r6
 800e73c:	10002b26 	beq	r2,zero,800e7ec <__subdf3+0x80c>
 800e740:	2808d0fa 	srli	r4,r5,3
 800e744:	8822d0fa 	srli	r17,r17,3
 800e748:	280a977a 	slli	r5,r5,29
 800e74c:	2080022c 	andhi	r2,r4,8
 800e750:	2c62b03a 	or	r17,r5,r17
 800e754:	10000826 	beq	r2,zero,800e778 <__subdf3+0x798>
 800e758:	1810d0fa 	srli	r8,r3,3
 800e75c:	4080022c 	andhi	r2,r8,8
 800e760:	1000051e 	bne	r2,zero,800e778 <__subdf3+0x798>
 800e764:	300cd0fa 	srli	r6,r6,3
 800e768:	1804977a 	slli	r2,r3,29
 800e76c:	4009883a 	mov	r4,r8
 800e770:	3825883a 	mov	r18,r7
 800e774:	11a2b03a 	or	r17,r2,r6
 800e778:	880ad77a 	srli	r5,r17,29
 800e77c:	200890fa 	slli	r4,r4,3
 800e780:	882290fa 	slli	r17,r17,3
 800e784:	0401ffc4 	movi	r16,2047
 800e788:	290ab03a 	or	r5,r5,r4
 800e78c:	003e3706 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e790:	0101ffc4 	movi	r4,2047
 800e794:	513fc71e 	bne	r10,r4,800e6b4 <__alt_data_end+0xfc00e6b4>
 800e798:	180b883a 	mov	r5,r3
 800e79c:	3023883a 	mov	r17,r6
 800e7a0:	5021883a 	mov	r16,r10
 800e7a4:	003e3106 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e7a8:	10002d26 	beq	r2,zero,800e860 <__subdf3+0x880>
 800e7ac:	1984b03a 	or	r2,r3,r6
 800e7b0:	10000e26 	beq	r2,zero,800e7ec <__subdf3+0x80c>
 800e7b4:	2808d0fa 	srli	r4,r5,3
 800e7b8:	8822d0fa 	srli	r17,r17,3
 800e7bc:	280a977a 	slli	r5,r5,29
 800e7c0:	2080022c 	andhi	r2,r4,8
 800e7c4:	2c62b03a 	or	r17,r5,r17
 800e7c8:	103feb26 	beq	r2,zero,800e778 <__alt_data_end+0xfc00e778>
 800e7cc:	180ed0fa 	srli	r7,r3,3
 800e7d0:	3880022c 	andhi	r2,r7,8
 800e7d4:	103fe81e 	bne	r2,zero,800e778 <__alt_data_end+0xfc00e778>
 800e7d8:	300cd0fa 	srli	r6,r6,3
 800e7dc:	1804977a 	slli	r2,r3,29
 800e7e0:	3809883a 	mov	r4,r7
 800e7e4:	11a2b03a 	or	r17,r2,r6
 800e7e8:	003fe306 	br	800e778 <__alt_data_end+0xfc00e778>
 800e7ec:	0401ffc4 	movi	r16,2047
 800e7f0:	003e1e06 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e7f4:	0005883a 	mov	r2,zero
 800e7f8:	003f8306 	br	800e608 <__alt_data_end+0xfc00e608>
 800e7fc:	113ff804 	addi	r4,r2,-32
 800e800:	02000804 	movi	r8,32
 800e804:	2908d83a 	srl	r4,r5,r4
 800e808:	12002526 	beq	r2,r8,800e8a0 <__subdf3+0x8c0>
 800e80c:	02001004 	movi	r8,64
 800e810:	4085c83a 	sub	r2,r8,r2
 800e814:	288a983a 	sll	r5,r5,r2
 800e818:	2c62b03a 	or	r17,r5,r17
 800e81c:	8822c03a 	cmpne	r17,r17,zero
 800e820:	8922b03a 	or	r17,r17,r4
 800e824:	0005883a 	mov	r2,zero
 800e828:	003f2406 	br	800e4bc <__alt_data_end+0xfc00e4bc>
 800e82c:	01402034 	movhi	r5,128
 800e830:	0011883a 	mov	r8,zero
 800e834:	297fffc4 	addi	r5,r5,-1
 800e838:	047ffe04 	movi	r17,-8
 800e83c:	0401ffc4 	movi	r16,2047
 800e840:	003e6a06 	br	800e1ec <__alt_data_end+0xfc00e1ec>
 800e844:	2c62b03a 	or	r17,r5,r17
 800e848:	8822c03a 	cmpne	r17,r17,zero
 800e84c:	0005883a 	mov	r2,zero
 800e850:	003fa506 	br	800e6e8 <__alt_data_end+0xfc00e6e8>
 800e854:	180b883a 	mov	r5,r3
 800e858:	3023883a 	mov	r17,r6
 800e85c:	003e0306 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e860:	180b883a 	mov	r5,r3
 800e864:	3023883a 	mov	r17,r6
 800e868:	0401ffc4 	movi	r16,2047
 800e86c:	003dff06 	br	800e06c <__alt_data_end+0xfc00e06c>
 800e870:	113ff804 	addi	r4,r2,-32
 800e874:	01c00804 	movi	r7,32
 800e878:	2908d83a 	srl	r4,r5,r4
 800e87c:	11c00a26 	beq	r2,r7,800e8a8 <__subdf3+0x8c8>
 800e880:	01c01004 	movi	r7,64
 800e884:	3885c83a 	sub	r2,r7,r2
 800e888:	288a983a 	sll	r5,r5,r2
 800e88c:	2c62b03a 	or	r17,r5,r17
 800e890:	8822c03a 	cmpne	r17,r17,zero
 800e894:	8922b03a 	or	r17,r17,r4
 800e898:	0005883a 	mov	r2,zero
 800e89c:	003f9206 	br	800e6e8 <__alt_data_end+0xfc00e6e8>
 800e8a0:	000b883a 	mov	r5,zero
 800e8a4:	003fdc06 	br	800e818 <__alt_data_end+0xfc00e818>
 800e8a8:	000b883a 	mov	r5,zero
 800e8ac:	003ff706 	br	800e88c <__alt_data_end+0xfc00e88c>

0800e8b0 <__fixdfsi>:
 800e8b0:	2806d53a 	srli	r3,r5,20
 800e8b4:	00800434 	movhi	r2,16
 800e8b8:	10bfffc4 	addi	r2,r2,-1
 800e8bc:	18c1ffcc 	andi	r3,r3,2047
 800e8c0:	0180ff84 	movi	r6,1022
 800e8c4:	2884703a 	and	r2,r5,r2
 800e8c8:	280ad7fa 	srli	r5,r5,31
 800e8cc:	30c0130e 	bge	r6,r3,800e91c <__fixdfsi+0x6c>
 800e8d0:	01810744 	movi	r6,1053
 800e8d4:	30c00d16 	blt	r6,r3,800e90c <__fixdfsi+0x5c>
 800e8d8:	01810cc4 	movi	r6,1075
 800e8dc:	30cdc83a 	sub	r6,r6,r3
 800e8e0:	01c007c4 	movi	r7,31
 800e8e4:	10800434 	orhi	r2,r2,16
 800e8e8:	39800e0e 	bge	r7,r6,800e924 <__fixdfsi+0x74>
 800e8ec:	010104c4 	movi	r4,1043
 800e8f0:	20c7c83a 	sub	r3,r4,r3
 800e8f4:	10c6d83a 	srl	r3,r2,r3
 800e8f8:	29403fcc 	andi	r5,r5,255
 800e8fc:	0145c83a 	sub	r2,zero,r5
 800e900:	1884f03a 	xor	r2,r3,r2
 800e904:	1145883a 	add	r2,r2,r5
 800e908:	f800283a 	ret
 800e90c:	00a00034 	movhi	r2,32768
 800e910:	10bfffc4 	addi	r2,r2,-1
 800e914:	2885883a 	add	r2,r5,r2
 800e918:	f800283a 	ret
 800e91c:	0005883a 	mov	r2,zero
 800e920:	f800283a 	ret
 800e924:	18fefb44 	addi	r3,r3,-1043
 800e928:	2188d83a 	srl	r4,r4,r6
 800e92c:	10c6983a 	sll	r3,r2,r3
 800e930:	20c6b03a 	or	r3,r4,r3
 800e934:	003ff006 	br	800e8f8 <__alt_data_end+0xfc00e8f8>

0800e938 <__floatsidf>:
 800e938:	defffd04 	addi	sp,sp,-12
 800e93c:	dc400115 	stw	r17,4(sp)
 800e940:	dfc00215 	stw	ra,8(sp)
 800e944:	dc000015 	stw	r16,0(sp)
 800e948:	2023883a 	mov	r17,r4
 800e94c:	20001426 	beq	r4,zero,800e9a0 <__floatsidf+0x68>
 800e950:	2020d7fa 	srli	r16,r4,31
 800e954:	80000126 	beq	r16,zero,800e95c <__floatsidf+0x24>
 800e958:	0123c83a 	sub	r17,zero,r4
 800e95c:	8809883a 	mov	r4,r17
 800e960:	800eaac0 	call	800eaac <__clzsi2>
 800e964:	01410784 	movi	r5,1054
 800e968:	00c00284 	movi	r3,10
 800e96c:	288bc83a 	sub	r5,r5,r2
 800e970:	18801c16 	blt	r3,r2,800e9e4 <__floatsidf+0xac>
 800e974:	00c002c4 	movi	r3,11
 800e978:	1887c83a 	sub	r3,r3,r2
 800e97c:	88c8d83a 	srl	r4,r17,r3
 800e980:	00c00434 	movhi	r3,16
 800e984:	18ffffc4 	addi	r3,r3,-1
 800e988:	10800544 	addi	r2,r2,21
 800e98c:	20c8703a 	and	r4,r4,r3
 800e990:	8884983a 	sll	r2,r17,r2
 800e994:	28c1ffcc 	andi	r3,r5,2047
 800e998:	800d883a 	mov	r6,r16
 800e99c:	00000406 	br	800e9b0 <__floatsidf+0x78>
 800e9a0:	000d883a 	mov	r6,zero
 800e9a4:	0007883a 	mov	r3,zero
 800e9a8:	0009883a 	mov	r4,zero
 800e9ac:	0005883a 	mov	r2,zero
 800e9b0:	180a953a 	slli	r5,r3,20
 800e9b4:	31803fcc 	andi	r6,r6,255
 800e9b8:	00c00434 	movhi	r3,16
 800e9bc:	300c97fa 	slli	r6,r6,31
 800e9c0:	18ffffc4 	addi	r3,r3,-1
 800e9c4:	20c6703a 	and	r3,r4,r3
 800e9c8:	1946b03a 	or	r3,r3,r5
 800e9cc:	1986b03a 	or	r3,r3,r6
 800e9d0:	dfc00217 	ldw	ra,8(sp)
 800e9d4:	dc400117 	ldw	r17,4(sp)
 800e9d8:	dc000017 	ldw	r16,0(sp)
 800e9dc:	dec00304 	addi	sp,sp,12
 800e9e0:	f800283a 	ret
 800e9e4:	10fffd44 	addi	r3,r2,-11
 800e9e8:	88c8983a 	sll	r4,r17,r3
 800e9ec:	00800434 	movhi	r2,16
 800e9f0:	10bfffc4 	addi	r2,r2,-1
 800e9f4:	2088703a 	and	r4,r4,r2
 800e9f8:	28c1ffcc 	andi	r3,r5,2047
 800e9fc:	800d883a 	mov	r6,r16
 800ea00:	0005883a 	mov	r2,zero
 800ea04:	003fea06 	br	800e9b0 <__alt_data_end+0xfc00e9b0>

0800ea08 <__floatunsidf>:
 800ea08:	defffe04 	addi	sp,sp,-8
 800ea0c:	dc000015 	stw	r16,0(sp)
 800ea10:	dfc00115 	stw	ra,4(sp)
 800ea14:	2021883a 	mov	r16,r4
 800ea18:	20001026 	beq	r4,zero,800ea5c <__floatunsidf+0x54>
 800ea1c:	800eaac0 	call	800eaac <__clzsi2>
 800ea20:	01410784 	movi	r5,1054
 800ea24:	100d883a 	mov	r6,r2
 800ea28:	288bc83a 	sub	r5,r5,r2
 800ea2c:	00800284 	movi	r2,10
 800ea30:	11801616 	blt	r2,r6,800ea8c <__floatunsidf+0x84>
 800ea34:	008002c4 	movi	r2,11
 800ea38:	1185c83a 	sub	r2,r2,r6
 800ea3c:	8084d83a 	srl	r2,r16,r2
 800ea40:	00c00434 	movhi	r3,16
 800ea44:	31c00544 	addi	r7,r6,21
 800ea48:	18ffffc4 	addi	r3,r3,-1
 800ea4c:	81e0983a 	sll	r16,r16,r7
 800ea50:	10cc703a 	and	r6,r2,r3
 800ea54:	2941ffcc 	andi	r5,r5,2047
 800ea58:	00000206 	br	800ea64 <__floatunsidf+0x5c>
 800ea5c:	000b883a 	mov	r5,zero
 800ea60:	000d883a 	mov	r6,zero
 800ea64:	280a953a 	slli	r5,r5,20
 800ea68:	00c00434 	movhi	r3,16
 800ea6c:	18ffffc4 	addi	r3,r3,-1
 800ea70:	30c6703a 	and	r3,r6,r3
 800ea74:	8005883a 	mov	r2,r16
 800ea78:	1946b03a 	or	r3,r3,r5
 800ea7c:	dfc00117 	ldw	ra,4(sp)
 800ea80:	dc000017 	ldw	r16,0(sp)
 800ea84:	dec00204 	addi	sp,sp,8
 800ea88:	f800283a 	ret
 800ea8c:	31bffd44 	addi	r6,r6,-11
 800ea90:	818c983a 	sll	r6,r16,r6
 800ea94:	00800434 	movhi	r2,16
 800ea98:	10bfffc4 	addi	r2,r2,-1
 800ea9c:	2941ffcc 	andi	r5,r5,2047
 800eaa0:	0021883a 	mov	r16,zero
 800eaa4:	308c703a 	and	r6,r6,r2
 800eaa8:	003fee06 	br	800ea64 <__alt_data_end+0xfc00ea64>

0800eaac <__clzsi2>:
 800eaac:	00bfffd4 	movui	r2,65535
 800eab0:	11000b36 	bltu	r2,r4,800eae0 <__clzsi2+0x34>
 800eab4:	00803fc4 	movi	r2,255
 800eab8:	1100122e 	bgeu	r2,r4,800eb04 <__clzsi2+0x58>
 800eabc:	00c00204 	movi	r3,8
 800eac0:	01400604 	movi	r5,24
 800eac4:	20c8d83a 	srl	r4,r4,r3
 800eac8:	00820074 	movhi	r2,2049
 800eacc:	10872604 	addi	r2,r2,7320
 800ead0:	1109883a 	add	r4,r2,r4
 800ead4:	20800003 	ldbu	r2,0(r4)
 800ead8:	2885c83a 	sub	r2,r5,r2
 800eadc:	f800283a 	ret
 800eae0:	00804034 	movhi	r2,256
 800eae4:	10bfffc4 	addi	r2,r2,-1
 800eae8:	11000336 	bltu	r2,r4,800eaf8 <__clzsi2+0x4c>
 800eaec:	00c00404 	movi	r3,16
 800eaf0:	180b883a 	mov	r5,r3
 800eaf4:	003ff306 	br	800eac4 <__alt_data_end+0xfc00eac4>
 800eaf8:	00c00604 	movi	r3,24
 800eafc:	01400204 	movi	r5,8
 800eb00:	003ff006 	br	800eac4 <__alt_data_end+0xfc00eac4>
 800eb04:	0007883a 	mov	r3,zero
 800eb08:	01400804 	movi	r5,32
 800eb0c:	003fed06 	br	800eac4 <__alt_data_end+0xfc00eac4>

0800eb10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eb10:	defffe04 	addi	sp,sp,-8
 800eb14:	dfc00115 	stw	ra,4(sp)
 800eb18:	df000015 	stw	fp,0(sp)
 800eb1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eb20:	00820074 	movhi	r2,2049
 800eb24:	108e2904 	addi	r2,r2,14500
 800eb28:	10800017 	ldw	r2,0(r2)
 800eb2c:	10000526 	beq	r2,zero,800eb44 <alt_get_errno+0x34>
 800eb30:	00820074 	movhi	r2,2049
 800eb34:	108e2904 	addi	r2,r2,14500
 800eb38:	10800017 	ldw	r2,0(r2)
 800eb3c:	103ee83a 	callr	r2
 800eb40:	00000206 	br	800eb4c <alt_get_errno+0x3c>
 800eb44:	00820074 	movhi	r2,2049
 800eb48:	1094f004 	addi	r2,r2,21440
}
 800eb4c:	e037883a 	mov	sp,fp
 800eb50:	dfc00117 	ldw	ra,4(sp)
 800eb54:	df000017 	ldw	fp,0(sp)
 800eb58:	dec00204 	addi	sp,sp,8
 800eb5c:	f800283a 	ret

0800eb60 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800eb60:	defffb04 	addi	sp,sp,-20
 800eb64:	dfc00415 	stw	ra,16(sp)
 800eb68:	df000315 	stw	fp,12(sp)
 800eb6c:	df000304 	addi	fp,sp,12
 800eb70:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800eb74:	e0bfff17 	ldw	r2,-4(fp)
 800eb78:	10000816 	blt	r2,zero,800eb9c <close+0x3c>
 800eb7c:	e13fff17 	ldw	r4,-4(fp)
 800eb80:	01400304 	movi	r5,12
 800eb84:	800c2ec0 	call	800c2ec <__mulsi3>
 800eb88:	1007883a 	mov	r3,r2
 800eb8c:	00820074 	movhi	r2,2049
 800eb90:	1089a604 	addi	r2,r2,9880
 800eb94:	1885883a 	add	r2,r3,r2
 800eb98:	00000106 	br	800eba0 <close+0x40>
 800eb9c:	0005883a 	mov	r2,zero
 800eba0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800eba4:	e0bffd17 	ldw	r2,-12(fp)
 800eba8:	10001926 	beq	r2,zero,800ec10 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800ebac:	e0bffd17 	ldw	r2,-12(fp)
 800ebb0:	10800017 	ldw	r2,0(r2)
 800ebb4:	10800417 	ldw	r2,16(r2)
 800ebb8:	10000626 	beq	r2,zero,800ebd4 <close+0x74>
 800ebbc:	e0bffd17 	ldw	r2,-12(fp)
 800ebc0:	10800017 	ldw	r2,0(r2)
 800ebc4:	10800417 	ldw	r2,16(r2)
 800ebc8:	e13ffd17 	ldw	r4,-12(fp)
 800ebcc:	103ee83a 	callr	r2
 800ebd0:	00000106 	br	800ebd8 <close+0x78>
 800ebd4:	0005883a 	mov	r2,zero
 800ebd8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800ebdc:	e13fff17 	ldw	r4,-4(fp)
 800ebe0:	800f2840 	call	800f284 <alt_release_fd>
    if (rval < 0)
 800ebe4:	e0bffe17 	ldw	r2,-8(fp)
 800ebe8:	1000070e 	bge	r2,zero,800ec08 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800ebec:	800eb100 	call	800eb10 <alt_get_errno>
 800ebf0:	1007883a 	mov	r3,r2
 800ebf4:	e0bffe17 	ldw	r2,-8(fp)
 800ebf8:	0085c83a 	sub	r2,zero,r2
 800ebfc:	18800015 	stw	r2,0(r3)
      return -1;
 800ec00:	00bfffc4 	movi	r2,-1
 800ec04:	00000706 	br	800ec24 <close+0xc4>
    }
    return 0;
 800ec08:	0005883a 	mov	r2,zero
 800ec0c:	00000506 	br	800ec24 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ec10:	800eb100 	call	800eb10 <alt_get_errno>
 800ec14:	1007883a 	mov	r3,r2
 800ec18:	00801444 	movi	r2,81
 800ec1c:	18800015 	stw	r2,0(r3)
    return -1;
 800ec20:	00bfffc4 	movi	r2,-1
  }
}
 800ec24:	e037883a 	mov	sp,fp
 800ec28:	dfc00117 	ldw	ra,4(sp)
 800ec2c:	df000017 	ldw	fp,0(sp)
 800ec30:	dec00204 	addi	sp,sp,8
 800ec34:	f800283a 	ret

0800ec38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800ec38:	defffc04 	addi	sp,sp,-16
 800ec3c:	df000315 	stw	fp,12(sp)
 800ec40:	df000304 	addi	fp,sp,12
 800ec44:	e13ffd15 	stw	r4,-12(fp)
 800ec48:	e17ffe15 	stw	r5,-8(fp)
 800ec4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800ec50:	e0bfff17 	ldw	r2,-4(fp)
}
 800ec54:	e037883a 	mov	sp,fp
 800ec58:	df000017 	ldw	fp,0(sp)
 800ec5c:	dec00104 	addi	sp,sp,4
 800ec60:	f800283a 	ret

0800ec64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ec64:	defffe04 	addi	sp,sp,-8
 800ec68:	dfc00115 	stw	ra,4(sp)
 800ec6c:	df000015 	stw	fp,0(sp)
 800ec70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ec74:	00820074 	movhi	r2,2049
 800ec78:	108e2904 	addi	r2,r2,14500
 800ec7c:	10800017 	ldw	r2,0(r2)
 800ec80:	10000526 	beq	r2,zero,800ec98 <alt_get_errno+0x34>
 800ec84:	00820074 	movhi	r2,2049
 800ec88:	108e2904 	addi	r2,r2,14500
 800ec8c:	10800017 	ldw	r2,0(r2)
 800ec90:	103ee83a 	callr	r2
 800ec94:	00000206 	br	800eca0 <alt_get_errno+0x3c>
 800ec98:	00820074 	movhi	r2,2049
 800ec9c:	1094f004 	addi	r2,r2,21440
}
 800eca0:	e037883a 	mov	sp,fp
 800eca4:	dfc00117 	ldw	ra,4(sp)
 800eca8:	df000017 	ldw	fp,0(sp)
 800ecac:	dec00204 	addi	sp,sp,8
 800ecb0:	f800283a 	ret

0800ecb4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800ecb4:	defffb04 	addi	sp,sp,-20
 800ecb8:	dfc00415 	stw	ra,16(sp)
 800ecbc:	df000315 	stw	fp,12(sp)
 800ecc0:	df000304 	addi	fp,sp,12
 800ecc4:	e13ffe15 	stw	r4,-8(fp)
 800ecc8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800eccc:	e0bffe17 	ldw	r2,-8(fp)
 800ecd0:	10000816 	blt	r2,zero,800ecf4 <fstat+0x40>
 800ecd4:	e13ffe17 	ldw	r4,-8(fp)
 800ecd8:	01400304 	movi	r5,12
 800ecdc:	800c2ec0 	call	800c2ec <__mulsi3>
 800ece0:	1007883a 	mov	r3,r2
 800ece4:	00820074 	movhi	r2,2049
 800ece8:	1089a604 	addi	r2,r2,9880
 800ecec:	1885883a 	add	r2,r3,r2
 800ecf0:	00000106 	br	800ecf8 <fstat+0x44>
 800ecf4:	0005883a 	mov	r2,zero
 800ecf8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800ecfc:	e0bffd17 	ldw	r2,-12(fp)
 800ed00:	10001026 	beq	r2,zero,800ed44 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800ed04:	e0bffd17 	ldw	r2,-12(fp)
 800ed08:	10800017 	ldw	r2,0(r2)
 800ed0c:	10800817 	ldw	r2,32(r2)
 800ed10:	10000726 	beq	r2,zero,800ed30 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800ed14:	e0bffd17 	ldw	r2,-12(fp)
 800ed18:	10800017 	ldw	r2,0(r2)
 800ed1c:	10800817 	ldw	r2,32(r2)
 800ed20:	e13ffd17 	ldw	r4,-12(fp)
 800ed24:	e17fff17 	ldw	r5,-4(fp)
 800ed28:	103ee83a 	callr	r2
 800ed2c:	00000a06 	br	800ed58 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800ed30:	e0bfff17 	ldw	r2,-4(fp)
 800ed34:	00c80004 	movi	r3,8192
 800ed38:	10c00115 	stw	r3,4(r2)
      return 0;
 800ed3c:	0005883a 	mov	r2,zero
 800ed40:	00000506 	br	800ed58 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ed44:	800ec640 	call	800ec64 <alt_get_errno>
 800ed48:	1007883a 	mov	r3,r2
 800ed4c:	00801444 	movi	r2,81
 800ed50:	18800015 	stw	r2,0(r3)
    return -1;
 800ed54:	00bfffc4 	movi	r2,-1
  }
}
 800ed58:	e037883a 	mov	sp,fp
 800ed5c:	dfc00117 	ldw	ra,4(sp)
 800ed60:	df000017 	ldw	fp,0(sp)
 800ed64:	dec00204 	addi	sp,sp,8
 800ed68:	f800283a 	ret

0800ed6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ed6c:	defffe04 	addi	sp,sp,-8
 800ed70:	dfc00115 	stw	ra,4(sp)
 800ed74:	df000015 	stw	fp,0(sp)
 800ed78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ed7c:	00820074 	movhi	r2,2049
 800ed80:	108e2904 	addi	r2,r2,14500
 800ed84:	10800017 	ldw	r2,0(r2)
 800ed88:	10000526 	beq	r2,zero,800eda0 <alt_get_errno+0x34>
 800ed8c:	00820074 	movhi	r2,2049
 800ed90:	108e2904 	addi	r2,r2,14500
 800ed94:	10800017 	ldw	r2,0(r2)
 800ed98:	103ee83a 	callr	r2
 800ed9c:	00000206 	br	800eda8 <alt_get_errno+0x3c>
 800eda0:	00820074 	movhi	r2,2049
 800eda4:	1094f004 	addi	r2,r2,21440
}
 800eda8:	e037883a 	mov	sp,fp
 800edac:	dfc00117 	ldw	ra,4(sp)
 800edb0:	df000017 	ldw	fp,0(sp)
 800edb4:	dec00204 	addi	sp,sp,8
 800edb8:	f800283a 	ret

0800edbc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800edbc:	deffed04 	addi	sp,sp,-76
 800edc0:	dfc01215 	stw	ra,72(sp)
 800edc4:	df001115 	stw	fp,68(sp)
 800edc8:	df001104 	addi	fp,sp,68
 800edcc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800edd0:	e0bfff17 	ldw	r2,-4(fp)
 800edd4:	10000816 	blt	r2,zero,800edf8 <isatty+0x3c>
 800edd8:	e13fff17 	ldw	r4,-4(fp)
 800eddc:	01400304 	movi	r5,12
 800ede0:	800c2ec0 	call	800c2ec <__mulsi3>
 800ede4:	1007883a 	mov	r3,r2
 800ede8:	00820074 	movhi	r2,2049
 800edec:	1089a604 	addi	r2,r2,9880
 800edf0:	1885883a 	add	r2,r3,r2
 800edf4:	00000106 	br	800edfc <isatty+0x40>
 800edf8:	0005883a 	mov	r2,zero
 800edfc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800ee00:	e0bfef17 	ldw	r2,-68(fp)
 800ee04:	10000e26 	beq	r2,zero,800ee40 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800ee08:	e0bfef17 	ldw	r2,-68(fp)
 800ee0c:	10800017 	ldw	r2,0(r2)
 800ee10:	10800817 	ldw	r2,32(r2)
 800ee14:	1000021e 	bne	r2,zero,800ee20 <isatty+0x64>
    {
      return 1;
 800ee18:	00800044 	movi	r2,1
 800ee1c:	00000d06 	br	800ee54 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ee20:	e0bff004 	addi	r2,fp,-64
 800ee24:	e13fff17 	ldw	r4,-4(fp)
 800ee28:	100b883a 	mov	r5,r2
 800ee2c:	800ecb40 	call	800ecb4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ee30:	e0bff117 	ldw	r2,-60(fp)
 800ee34:	10880020 	cmpeqi	r2,r2,8192
 800ee38:	10803fcc 	andi	r2,r2,255
 800ee3c:	00000506 	br	800ee54 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ee40:	800ed6c0 	call	800ed6c <alt_get_errno>
 800ee44:	1007883a 	mov	r3,r2
 800ee48:	00801444 	movi	r2,81
 800ee4c:	18800015 	stw	r2,0(r3)
    return 0;
 800ee50:	0005883a 	mov	r2,zero
  }
}
 800ee54:	e037883a 	mov	sp,fp
 800ee58:	dfc00117 	ldw	ra,4(sp)
 800ee5c:	df000017 	ldw	fp,0(sp)
 800ee60:	dec00204 	addi	sp,sp,8
 800ee64:	f800283a 	ret

0800ee68 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800ee68:	defffc04 	addi	sp,sp,-16
 800ee6c:	df000315 	stw	fp,12(sp)
 800ee70:	df000304 	addi	fp,sp,12
 800ee74:	e13ffd15 	stw	r4,-12(fp)
 800ee78:	e17ffe15 	stw	r5,-8(fp)
 800ee7c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800ee80:	e0fffe17 	ldw	r3,-8(fp)
 800ee84:	e0bffd17 	ldw	r2,-12(fp)
 800ee88:	18800c26 	beq	r3,r2,800eebc <alt_load_section+0x54>
  {
    while( to != end )
 800ee8c:	00000806 	br	800eeb0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800ee90:	e0bffe17 	ldw	r2,-8(fp)
 800ee94:	10c00104 	addi	r3,r2,4
 800ee98:	e0fffe15 	stw	r3,-8(fp)
 800ee9c:	e0fffd17 	ldw	r3,-12(fp)
 800eea0:	19000104 	addi	r4,r3,4
 800eea4:	e13ffd15 	stw	r4,-12(fp)
 800eea8:	18c00017 	ldw	r3,0(r3)
 800eeac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800eeb0:	e0fffe17 	ldw	r3,-8(fp)
 800eeb4:	e0bfff17 	ldw	r2,-4(fp)
 800eeb8:	18bff51e 	bne	r3,r2,800ee90 <__alt_data_end+0xfc00ee90>
    {
      *to++ = *from++;
    }
  }
}
 800eebc:	e037883a 	mov	sp,fp
 800eec0:	df000017 	ldw	fp,0(sp)
 800eec4:	dec00104 	addi	sp,sp,4
 800eec8:	f800283a 	ret

0800eecc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800eecc:	defffe04 	addi	sp,sp,-8
 800eed0:	dfc00115 	stw	ra,4(sp)
 800eed4:	df000015 	stw	fp,0(sp)
 800eed8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800eedc:	01020074 	movhi	r4,2049
 800eee0:	210e2e04 	addi	r4,r4,14520
 800eee4:	01420074 	movhi	r5,2049
 800eee8:	29477304 	addi	r5,r5,7628
 800eeec:	01820074 	movhi	r6,2049
 800eef0:	318e2e04 	addi	r6,r6,14520
 800eef4:	800ee680 	call	800ee68 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800eef8:	01020034 	movhi	r4,2048
 800eefc:	21000804 	addi	r4,r4,32
 800ef00:	01420034 	movhi	r5,2048
 800ef04:	29400804 	addi	r5,r5,32
 800ef08:	01820034 	movhi	r6,2048
 800ef0c:	31806f04 	addi	r6,r6,444
 800ef10:	800ee680 	call	800ee68 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800ef14:	01020074 	movhi	r4,2049
 800ef18:	2104d504 	addi	r4,r4,4948
 800ef1c:	01420074 	movhi	r5,2049
 800ef20:	2944d504 	addi	r5,r5,4948
 800ef24:	01820074 	movhi	r6,2049
 800ef28:	31877304 	addi	r6,r6,7628
 800ef2c:	800ee680 	call	800ee68 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800ef30:	80102cc0 	call	80102cc <alt_dcache_flush_all>
  alt_icache_flush_all();
 800ef34:	80104940 	call	8010494 <alt_icache_flush_all>
}
 800ef38:	e037883a 	mov	sp,fp
 800ef3c:	dfc00117 	ldw	ra,4(sp)
 800ef40:	df000017 	ldw	fp,0(sp)
 800ef44:	dec00204 	addi	sp,sp,8
 800ef48:	f800283a 	ret

0800ef4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ef4c:	defffe04 	addi	sp,sp,-8
 800ef50:	dfc00115 	stw	ra,4(sp)
 800ef54:	df000015 	stw	fp,0(sp)
 800ef58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ef5c:	00820074 	movhi	r2,2049
 800ef60:	108e2904 	addi	r2,r2,14500
 800ef64:	10800017 	ldw	r2,0(r2)
 800ef68:	10000526 	beq	r2,zero,800ef80 <alt_get_errno+0x34>
 800ef6c:	00820074 	movhi	r2,2049
 800ef70:	108e2904 	addi	r2,r2,14500
 800ef74:	10800017 	ldw	r2,0(r2)
 800ef78:	103ee83a 	callr	r2
 800ef7c:	00000206 	br	800ef88 <alt_get_errno+0x3c>
 800ef80:	00820074 	movhi	r2,2049
 800ef84:	1094f004 	addi	r2,r2,21440
}
 800ef88:	e037883a 	mov	sp,fp
 800ef8c:	dfc00117 	ldw	ra,4(sp)
 800ef90:	df000017 	ldw	fp,0(sp)
 800ef94:	dec00204 	addi	sp,sp,8
 800ef98:	f800283a 	ret

0800ef9c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800ef9c:	defff904 	addi	sp,sp,-28
 800efa0:	dfc00615 	stw	ra,24(sp)
 800efa4:	df000515 	stw	fp,20(sp)
 800efa8:	df000504 	addi	fp,sp,20
 800efac:	e13ffd15 	stw	r4,-12(fp)
 800efb0:	e17ffe15 	stw	r5,-8(fp)
 800efb4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800efb8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800efbc:	e0bffd17 	ldw	r2,-12(fp)
 800efc0:	10000816 	blt	r2,zero,800efe4 <lseek+0x48>
 800efc4:	e13ffd17 	ldw	r4,-12(fp)
 800efc8:	01400304 	movi	r5,12
 800efcc:	800c2ec0 	call	800c2ec <__mulsi3>
 800efd0:	1007883a 	mov	r3,r2
 800efd4:	00820074 	movhi	r2,2049
 800efd8:	1089a604 	addi	r2,r2,9880
 800efdc:	1885883a 	add	r2,r3,r2
 800efe0:	00000106 	br	800efe8 <lseek+0x4c>
 800efe4:	0005883a 	mov	r2,zero
 800efe8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800efec:	e0bffc17 	ldw	r2,-16(fp)
 800eff0:	10001026 	beq	r2,zero,800f034 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800eff4:	e0bffc17 	ldw	r2,-16(fp)
 800eff8:	10800017 	ldw	r2,0(r2)
 800effc:	10800717 	ldw	r2,28(r2)
 800f000:	10000926 	beq	r2,zero,800f028 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800f004:	e0bffc17 	ldw	r2,-16(fp)
 800f008:	10800017 	ldw	r2,0(r2)
 800f00c:	10800717 	ldw	r2,28(r2)
 800f010:	e13ffc17 	ldw	r4,-16(fp)
 800f014:	e17ffe17 	ldw	r5,-8(fp)
 800f018:	e1bfff17 	ldw	r6,-4(fp)
 800f01c:	103ee83a 	callr	r2
 800f020:	e0bffb15 	stw	r2,-20(fp)
 800f024:	00000506 	br	800f03c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800f028:	00bfde84 	movi	r2,-134
 800f02c:	e0bffb15 	stw	r2,-20(fp)
 800f030:	00000206 	br	800f03c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800f034:	00bfebc4 	movi	r2,-81
 800f038:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800f03c:	e0bffb17 	ldw	r2,-20(fp)
 800f040:	1000070e 	bge	r2,zero,800f060 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800f044:	800ef4c0 	call	800ef4c <alt_get_errno>
 800f048:	1007883a 	mov	r3,r2
 800f04c:	e0bffb17 	ldw	r2,-20(fp)
 800f050:	0085c83a 	sub	r2,zero,r2
 800f054:	18800015 	stw	r2,0(r3)
    rc = -1;
 800f058:	00bfffc4 	movi	r2,-1
 800f05c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800f060:	e0bffb17 	ldw	r2,-20(fp)
}
 800f064:	e037883a 	mov	sp,fp
 800f068:	dfc00117 	ldw	ra,4(sp)
 800f06c:	df000017 	ldw	fp,0(sp)
 800f070:	dec00204 	addi	sp,sp,8
 800f074:	f800283a 	ret

0800f078 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800f078:	defffd04 	addi	sp,sp,-12
 800f07c:	dfc00215 	stw	ra,8(sp)
 800f080:	df000115 	stw	fp,4(sp)
 800f084:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800f088:	0009883a 	mov	r4,zero
 800f08c:	800f56c0 	call	800f56c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800f090:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800f094:	800f5a00 	call	800f5a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800f098:	01020074 	movhi	r4,2049
 800f09c:	21076904 	addi	r4,r4,7588
 800f0a0:	01420074 	movhi	r5,2049
 800f0a4:	29476904 	addi	r5,r5,7588
 800f0a8:	01820074 	movhi	r6,2049
 800f0ac:	31876904 	addi	r6,r6,7588
 800f0b0:	80108600 	call	8010860 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800f0b4:	80103dc0 	call	80103dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800f0b8:	01020074 	movhi	r4,2049
 800f0bc:	21010e04 	addi	r4,r4,1080
 800f0c0:	8010fb00 	call	8010fb0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800f0c4:	d126d317 	ldw	r4,-25780(gp)
 800f0c8:	d0e6d417 	ldw	r3,-25776(gp)
 800f0cc:	d0a6d517 	ldw	r2,-25772(gp)
 800f0d0:	180b883a 	mov	r5,r3
 800f0d4:	100d883a 	mov	r6,r2
 800f0d8:	800031c0 	call	800031c <main>
 800f0dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800f0e0:	01000044 	movi	r4,1
 800f0e4:	800eb600 	call	800eb60 <close>
  exit (result);
 800f0e8:	e13fff17 	ldw	r4,-4(fp)
 800f0ec:	8010fc40 	call	8010fc4 <exit>

0800f0f0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800f0f0:	defffe04 	addi	sp,sp,-8
 800f0f4:	df000115 	stw	fp,4(sp)
 800f0f8:	df000104 	addi	fp,sp,4
 800f0fc:	e13fff15 	stw	r4,-4(fp)
}
 800f100:	e037883a 	mov	sp,fp
 800f104:	df000017 	ldw	fp,0(sp)
 800f108:	dec00104 	addi	sp,sp,4
 800f10c:	f800283a 	ret

0800f110 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800f110:	defffe04 	addi	sp,sp,-8
 800f114:	df000115 	stw	fp,4(sp)
 800f118:	df000104 	addi	fp,sp,4
 800f11c:	e13fff15 	stw	r4,-4(fp)
}
 800f120:	e037883a 	mov	sp,fp
 800f124:	df000017 	ldw	fp,0(sp)
 800f128:	dec00104 	addi	sp,sp,4
 800f12c:	f800283a 	ret

0800f130 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f130:	defffe04 	addi	sp,sp,-8
 800f134:	dfc00115 	stw	ra,4(sp)
 800f138:	df000015 	stw	fp,0(sp)
 800f13c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f140:	00820074 	movhi	r2,2049
 800f144:	108e2904 	addi	r2,r2,14500
 800f148:	10800017 	ldw	r2,0(r2)
 800f14c:	10000526 	beq	r2,zero,800f164 <alt_get_errno+0x34>
 800f150:	00820074 	movhi	r2,2049
 800f154:	108e2904 	addi	r2,r2,14500
 800f158:	10800017 	ldw	r2,0(r2)
 800f15c:	103ee83a 	callr	r2
 800f160:	00000206 	br	800f16c <alt_get_errno+0x3c>
 800f164:	00820074 	movhi	r2,2049
 800f168:	1094f004 	addi	r2,r2,21440
}
 800f16c:	e037883a 	mov	sp,fp
 800f170:	dfc00117 	ldw	ra,4(sp)
 800f174:	df000017 	ldw	fp,0(sp)
 800f178:	dec00204 	addi	sp,sp,8
 800f17c:	f800283a 	ret

0800f180 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800f180:	defff904 	addi	sp,sp,-28
 800f184:	dfc00615 	stw	ra,24(sp)
 800f188:	df000515 	stw	fp,20(sp)
 800f18c:	df000504 	addi	fp,sp,20
 800f190:	e13ffd15 	stw	r4,-12(fp)
 800f194:	e17ffe15 	stw	r5,-8(fp)
 800f198:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f19c:	e0bffd17 	ldw	r2,-12(fp)
 800f1a0:	10000816 	blt	r2,zero,800f1c4 <read+0x44>
 800f1a4:	e13ffd17 	ldw	r4,-12(fp)
 800f1a8:	01400304 	movi	r5,12
 800f1ac:	800c2ec0 	call	800c2ec <__mulsi3>
 800f1b0:	1007883a 	mov	r3,r2
 800f1b4:	00820074 	movhi	r2,2049
 800f1b8:	1089a604 	addi	r2,r2,9880
 800f1bc:	1885883a 	add	r2,r3,r2
 800f1c0:	00000106 	br	800f1c8 <read+0x48>
 800f1c4:	0005883a 	mov	r2,zero
 800f1c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f1cc:	e0bffb17 	ldw	r2,-20(fp)
 800f1d0:	10002226 	beq	r2,zero,800f25c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f1d4:	e0bffb17 	ldw	r2,-20(fp)
 800f1d8:	10800217 	ldw	r2,8(r2)
 800f1dc:	108000cc 	andi	r2,r2,3
 800f1e0:	10800060 	cmpeqi	r2,r2,1
 800f1e4:	1000181e 	bne	r2,zero,800f248 <read+0xc8>
        (fd->dev->read))
 800f1e8:	e0bffb17 	ldw	r2,-20(fp)
 800f1ec:	10800017 	ldw	r2,0(r2)
 800f1f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f1f4:	10001426 	beq	r2,zero,800f248 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800f1f8:	e0bffb17 	ldw	r2,-20(fp)
 800f1fc:	10800017 	ldw	r2,0(r2)
 800f200:	10800517 	ldw	r2,20(r2)
 800f204:	e0ffff17 	ldw	r3,-4(fp)
 800f208:	e13ffb17 	ldw	r4,-20(fp)
 800f20c:	e17ffe17 	ldw	r5,-8(fp)
 800f210:	180d883a 	mov	r6,r3
 800f214:	103ee83a 	callr	r2
 800f218:	e0bffc15 	stw	r2,-16(fp)
 800f21c:	e0bffc17 	ldw	r2,-16(fp)
 800f220:	1000070e 	bge	r2,zero,800f240 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800f224:	800f1300 	call	800f130 <alt_get_errno>
 800f228:	1007883a 	mov	r3,r2
 800f22c:	e0bffc17 	ldw	r2,-16(fp)
 800f230:	0085c83a 	sub	r2,zero,r2
 800f234:	18800015 	stw	r2,0(r3)
          return -1;
 800f238:	00bfffc4 	movi	r2,-1
 800f23c:	00000c06 	br	800f270 <read+0xf0>
        }
        return rval;
 800f240:	e0bffc17 	ldw	r2,-16(fp)
 800f244:	00000a06 	br	800f270 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800f248:	800f1300 	call	800f130 <alt_get_errno>
 800f24c:	1007883a 	mov	r3,r2
 800f250:	00800344 	movi	r2,13
 800f254:	18800015 	stw	r2,0(r3)
 800f258:	00000406 	br	800f26c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800f25c:	800f1300 	call	800f130 <alt_get_errno>
 800f260:	1007883a 	mov	r3,r2
 800f264:	00801444 	movi	r2,81
 800f268:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f26c:	00bfffc4 	movi	r2,-1
}
 800f270:	e037883a 	mov	sp,fp
 800f274:	dfc00117 	ldw	ra,4(sp)
 800f278:	df000017 	ldw	fp,0(sp)
 800f27c:	dec00204 	addi	sp,sp,8
 800f280:	f800283a 	ret

0800f284 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800f284:	defffc04 	addi	sp,sp,-16
 800f288:	dfc00315 	stw	ra,12(sp)
 800f28c:	df000215 	stw	fp,8(sp)
 800f290:	dc000115 	stw	r16,4(sp)
 800f294:	df000204 	addi	fp,sp,8
 800f298:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800f29c:	e0bffe17 	ldw	r2,-8(fp)
 800f2a0:	108000d0 	cmplti	r2,r2,3
 800f2a4:	1000111e 	bne	r2,zero,800f2ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800f2a8:	04020074 	movhi	r16,2049
 800f2ac:	8409a604 	addi	r16,r16,9880
 800f2b0:	e0bffe17 	ldw	r2,-8(fp)
 800f2b4:	1009883a 	mov	r4,r2
 800f2b8:	01400304 	movi	r5,12
 800f2bc:	800c2ec0 	call	800c2ec <__mulsi3>
 800f2c0:	8085883a 	add	r2,r16,r2
 800f2c4:	10800204 	addi	r2,r2,8
 800f2c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800f2cc:	04020074 	movhi	r16,2049
 800f2d0:	8409a604 	addi	r16,r16,9880
 800f2d4:	e0bffe17 	ldw	r2,-8(fp)
 800f2d8:	1009883a 	mov	r4,r2
 800f2dc:	01400304 	movi	r5,12
 800f2e0:	800c2ec0 	call	800c2ec <__mulsi3>
 800f2e4:	8085883a 	add	r2,r16,r2
 800f2e8:	10000015 	stw	zero,0(r2)
  }
}
 800f2ec:	e6ffff04 	addi	sp,fp,-4
 800f2f0:	dfc00217 	ldw	ra,8(sp)
 800f2f4:	df000117 	ldw	fp,4(sp)
 800f2f8:	dc000017 	ldw	r16,0(sp)
 800f2fc:	dec00304 	addi	sp,sp,12
 800f300:	f800283a 	ret

0800f304 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800f304:	defff904 	addi	sp,sp,-28
 800f308:	df000615 	stw	fp,24(sp)
 800f30c:	df000604 	addi	fp,sp,24
 800f310:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f314:	0005303a 	rdctl	r2,status
 800f318:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f31c:	e0fffc17 	ldw	r3,-16(fp)
 800f320:	00bfff84 	movi	r2,-2
 800f324:	1884703a 	and	r2,r3,r2
 800f328:	1001703a 	wrctl	status,r2
  
  return context;
 800f32c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800f330:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800f334:	d0a00c17 	ldw	r2,-32720(gp)
 800f338:	10c000c4 	addi	r3,r2,3
 800f33c:	00bfff04 	movi	r2,-4
 800f340:	1884703a 	and	r2,r3,r2
 800f344:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800f348:	d0e00c17 	ldw	r3,-32720(gp)
 800f34c:	e0bfff17 	ldw	r2,-4(fp)
 800f350:	1887883a 	add	r3,r3,r2
 800f354:	00830034 	movhi	r2,3072
 800f358:	10800004 	addi	r2,r2,0
 800f35c:	10c0062e 	bgeu	r2,r3,800f378 <sbrk+0x74>
 800f360:	e0bffa17 	ldw	r2,-24(fp)
 800f364:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f368:	e0bffd17 	ldw	r2,-12(fp)
 800f36c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800f370:	00bfffc4 	movi	r2,-1
 800f374:	00000b06 	br	800f3a4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800f378:	d0a00c17 	ldw	r2,-32720(gp)
 800f37c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800f380:	d0e00c17 	ldw	r3,-32720(gp)
 800f384:	e0bfff17 	ldw	r2,-4(fp)
 800f388:	1885883a 	add	r2,r3,r2
 800f38c:	d0a00c15 	stw	r2,-32720(gp)
 800f390:	e0bffa17 	ldw	r2,-24(fp)
 800f394:	e0bffe15 	stw	r2,-8(fp)
 800f398:	e0bffe17 	ldw	r2,-8(fp)
 800f39c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800f3a0:	e0bffb17 	ldw	r2,-20(fp)
} 
 800f3a4:	e037883a 	mov	sp,fp
 800f3a8:	df000017 	ldw	fp,0(sp)
 800f3ac:	dec00104 	addi	sp,sp,4
 800f3b0:	f800283a 	ret

0800f3b4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800f3b4:	defffd04 	addi	sp,sp,-12
 800f3b8:	dfc00215 	stw	ra,8(sp)
 800f3bc:	df000115 	stw	fp,4(sp)
 800f3c0:	df000104 	addi	fp,sp,4
 800f3c4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800f3c8:	e13fff17 	ldw	r4,-4(fp)
 800f3cc:	80101740 	call	8010174 <alt_busy_sleep>
}
 800f3d0:	e037883a 	mov	sp,fp
 800f3d4:	dfc00117 	ldw	ra,4(sp)
 800f3d8:	df000017 	ldw	fp,0(sp)
 800f3dc:	dec00204 	addi	sp,sp,8
 800f3e0:	f800283a 	ret

0800f3e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f3e4:	defffe04 	addi	sp,sp,-8
 800f3e8:	dfc00115 	stw	ra,4(sp)
 800f3ec:	df000015 	stw	fp,0(sp)
 800f3f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f3f4:	00820074 	movhi	r2,2049
 800f3f8:	108e2904 	addi	r2,r2,14500
 800f3fc:	10800017 	ldw	r2,0(r2)
 800f400:	10000526 	beq	r2,zero,800f418 <alt_get_errno+0x34>
 800f404:	00820074 	movhi	r2,2049
 800f408:	108e2904 	addi	r2,r2,14500
 800f40c:	10800017 	ldw	r2,0(r2)
 800f410:	103ee83a 	callr	r2
 800f414:	00000206 	br	800f420 <alt_get_errno+0x3c>
 800f418:	00820074 	movhi	r2,2049
 800f41c:	1094f004 	addi	r2,r2,21440
}
 800f420:	e037883a 	mov	sp,fp
 800f424:	dfc00117 	ldw	ra,4(sp)
 800f428:	df000017 	ldw	fp,0(sp)
 800f42c:	dec00204 	addi	sp,sp,8
 800f430:	f800283a 	ret

0800f434 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800f434:	defff904 	addi	sp,sp,-28
 800f438:	dfc00615 	stw	ra,24(sp)
 800f43c:	df000515 	stw	fp,20(sp)
 800f440:	df000504 	addi	fp,sp,20
 800f444:	e13ffd15 	stw	r4,-12(fp)
 800f448:	e17ffe15 	stw	r5,-8(fp)
 800f44c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f450:	e0bffd17 	ldw	r2,-12(fp)
 800f454:	10000816 	blt	r2,zero,800f478 <write+0x44>
 800f458:	e13ffd17 	ldw	r4,-12(fp)
 800f45c:	01400304 	movi	r5,12
 800f460:	800c2ec0 	call	800c2ec <__mulsi3>
 800f464:	1007883a 	mov	r3,r2
 800f468:	00820074 	movhi	r2,2049
 800f46c:	1089a604 	addi	r2,r2,9880
 800f470:	1885883a 	add	r2,r3,r2
 800f474:	00000106 	br	800f47c <write+0x48>
 800f478:	0005883a 	mov	r2,zero
 800f47c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f480:	e0bffb17 	ldw	r2,-20(fp)
 800f484:	10002126 	beq	r2,zero,800f50c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800f488:	e0bffb17 	ldw	r2,-20(fp)
 800f48c:	10800217 	ldw	r2,8(r2)
 800f490:	108000cc 	andi	r2,r2,3
 800f494:	10001826 	beq	r2,zero,800f4f8 <write+0xc4>
 800f498:	e0bffb17 	ldw	r2,-20(fp)
 800f49c:	10800017 	ldw	r2,0(r2)
 800f4a0:	10800617 	ldw	r2,24(r2)
 800f4a4:	10001426 	beq	r2,zero,800f4f8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800f4a8:	e0bffb17 	ldw	r2,-20(fp)
 800f4ac:	10800017 	ldw	r2,0(r2)
 800f4b0:	10800617 	ldw	r2,24(r2)
 800f4b4:	e0ffff17 	ldw	r3,-4(fp)
 800f4b8:	e13ffb17 	ldw	r4,-20(fp)
 800f4bc:	e17ffe17 	ldw	r5,-8(fp)
 800f4c0:	180d883a 	mov	r6,r3
 800f4c4:	103ee83a 	callr	r2
 800f4c8:	e0bffc15 	stw	r2,-16(fp)
 800f4cc:	e0bffc17 	ldw	r2,-16(fp)
 800f4d0:	1000070e 	bge	r2,zero,800f4f0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800f4d4:	800f3e40 	call	800f3e4 <alt_get_errno>
 800f4d8:	1007883a 	mov	r3,r2
 800f4dc:	e0bffc17 	ldw	r2,-16(fp)
 800f4e0:	0085c83a 	sub	r2,zero,r2
 800f4e4:	18800015 	stw	r2,0(r3)
        return -1;
 800f4e8:	00bfffc4 	movi	r2,-1
 800f4ec:	00000c06 	br	800f520 <write+0xec>
      }
      return rval;
 800f4f0:	e0bffc17 	ldw	r2,-16(fp)
 800f4f4:	00000a06 	br	800f520 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800f4f8:	800f3e40 	call	800f3e4 <alt_get_errno>
 800f4fc:	1007883a 	mov	r3,r2
 800f500:	00800344 	movi	r2,13
 800f504:	18800015 	stw	r2,0(r3)
 800f508:	00000406 	br	800f51c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800f50c:	800f3e40 	call	800f3e4 <alt_get_errno>
 800f510:	1007883a 	mov	r3,r2
 800f514:	00801444 	movi	r2,81
 800f518:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f51c:	00bfffc4 	movi	r2,-1
}
 800f520:	e037883a 	mov	sp,fp
 800f524:	dfc00117 	ldw	ra,4(sp)
 800f528:	df000017 	ldw	fp,0(sp)
 800f52c:	dec00204 	addi	sp,sp,8
 800f530:	f800283a 	ret

0800f534 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f534:	defffd04 	addi	sp,sp,-12
 800f538:	dfc00215 	stw	ra,8(sp)
 800f53c:	df000115 	stw	fp,4(sp)
 800f540:	df000104 	addi	fp,sp,4
 800f544:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f548:	e13fff17 	ldw	r4,-4(fp)
 800f54c:	01420074 	movhi	r5,2049
 800f550:	294e2604 	addi	r5,r5,14488
 800f554:	80103380 	call	8010338 <alt_dev_llist_insert>
}
 800f558:	e037883a 	mov	sp,fp
 800f55c:	dfc00117 	ldw	ra,4(sp)
 800f560:	df000017 	ldw	fp,0(sp)
 800f564:	dec00204 	addi	sp,sp,8
 800f568:	f800283a 	ret

0800f56c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800f56c:	defffd04 	addi	sp,sp,-12
 800f570:	dfc00215 	stw	ra,8(sp)
 800f574:	df000115 	stw	fp,4(sp)
 800f578:	df000104 	addi	fp,sp,4
 800f57c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800f580:	8010d180 	call	8010d18 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800f584:	00800044 	movi	r2,1
 800f588:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800f58c:	e037883a 	mov	sp,fp
 800f590:	dfc00117 	ldw	ra,4(sp)
 800f594:	df000017 	ldw	fp,0(sp)
 800f598:	dec00204 	addi	sp,sp,8
 800f59c:	f800283a 	ret

0800f5a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800f5a0:	defffe04 	addi	sp,sp,-8
 800f5a4:	dfc00115 	stw	ra,4(sp)
 800f5a8:	df000015 	stw	fp,0(sp)
 800f5ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800f5b0:	01020074 	movhi	r4,2049
 800f5b4:	210a1004 	addi	r4,r4,10304
 800f5b8:	000b883a 	mov	r5,zero
 800f5bc:	000d883a 	mov	r6,zero
 800f5c0:	800f74c0 	call	800f74c <altera_avalon_jtag_uart_init>
 800f5c4:	01020074 	movhi	r4,2049
 800f5c8:	210a0604 	addi	r4,r4,10264
 800f5cc:	800f5340 	call	800f534 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800f5d0:	0001883a 	nop
}
 800f5d4:	e037883a 	mov	sp,fp
 800f5d8:	dfc00117 	ldw	ra,4(sp)
 800f5dc:	df000017 	ldw	fp,0(sp)
 800f5e0:	dec00204 	addi	sp,sp,8
 800f5e4:	f800283a 	ret

0800f5e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f5e8:	defffa04 	addi	sp,sp,-24
 800f5ec:	dfc00515 	stw	ra,20(sp)
 800f5f0:	df000415 	stw	fp,16(sp)
 800f5f4:	df000404 	addi	fp,sp,16
 800f5f8:	e13ffd15 	stw	r4,-12(fp)
 800f5fc:	e17ffe15 	stw	r5,-8(fp)
 800f600:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f604:	e0bffd17 	ldw	r2,-12(fp)
 800f608:	10800017 	ldw	r2,0(r2)
 800f60c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f610:	e0bffc17 	ldw	r2,-16(fp)
 800f614:	10c00a04 	addi	r3,r2,40
 800f618:	e0bffd17 	ldw	r2,-12(fp)
 800f61c:	10800217 	ldw	r2,8(r2)
 800f620:	1809883a 	mov	r4,r3
 800f624:	e17ffe17 	ldw	r5,-8(fp)
 800f628:	e1bfff17 	ldw	r6,-4(fp)
 800f62c:	100f883a 	mov	r7,r2
 800f630:	800fc100 	call	800fc10 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f634:	e037883a 	mov	sp,fp
 800f638:	dfc00117 	ldw	ra,4(sp)
 800f63c:	df000017 	ldw	fp,0(sp)
 800f640:	dec00204 	addi	sp,sp,8
 800f644:	f800283a 	ret

0800f648 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f648:	defffa04 	addi	sp,sp,-24
 800f64c:	dfc00515 	stw	ra,20(sp)
 800f650:	df000415 	stw	fp,16(sp)
 800f654:	df000404 	addi	fp,sp,16
 800f658:	e13ffd15 	stw	r4,-12(fp)
 800f65c:	e17ffe15 	stw	r5,-8(fp)
 800f660:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f664:	e0bffd17 	ldw	r2,-12(fp)
 800f668:	10800017 	ldw	r2,0(r2)
 800f66c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f670:	e0bffc17 	ldw	r2,-16(fp)
 800f674:	10c00a04 	addi	r3,r2,40
 800f678:	e0bffd17 	ldw	r2,-12(fp)
 800f67c:	10800217 	ldw	r2,8(r2)
 800f680:	1809883a 	mov	r4,r3
 800f684:	e17ffe17 	ldw	r5,-8(fp)
 800f688:	e1bfff17 	ldw	r6,-4(fp)
 800f68c:	100f883a 	mov	r7,r2
 800f690:	800fe1c0 	call	800fe1c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f694:	e037883a 	mov	sp,fp
 800f698:	dfc00117 	ldw	ra,4(sp)
 800f69c:	df000017 	ldw	fp,0(sp)
 800f6a0:	dec00204 	addi	sp,sp,8
 800f6a4:	f800283a 	ret

0800f6a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f6a8:	defffc04 	addi	sp,sp,-16
 800f6ac:	dfc00315 	stw	ra,12(sp)
 800f6b0:	df000215 	stw	fp,8(sp)
 800f6b4:	df000204 	addi	fp,sp,8
 800f6b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f6bc:	e0bfff17 	ldw	r2,-4(fp)
 800f6c0:	10800017 	ldw	r2,0(r2)
 800f6c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f6c8:	e0bffe17 	ldw	r2,-8(fp)
 800f6cc:	10c00a04 	addi	r3,r2,40
 800f6d0:	e0bfff17 	ldw	r2,-4(fp)
 800f6d4:	10800217 	ldw	r2,8(r2)
 800f6d8:	1809883a 	mov	r4,r3
 800f6dc:	100b883a 	mov	r5,r2
 800f6e0:	800fabc0 	call	800fabc <altera_avalon_jtag_uart_close>
}
 800f6e4:	e037883a 	mov	sp,fp
 800f6e8:	dfc00117 	ldw	ra,4(sp)
 800f6ec:	df000017 	ldw	fp,0(sp)
 800f6f0:	dec00204 	addi	sp,sp,8
 800f6f4:	f800283a 	ret

0800f6f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f6f8:	defffa04 	addi	sp,sp,-24
 800f6fc:	dfc00515 	stw	ra,20(sp)
 800f700:	df000415 	stw	fp,16(sp)
 800f704:	df000404 	addi	fp,sp,16
 800f708:	e13ffd15 	stw	r4,-12(fp)
 800f70c:	e17ffe15 	stw	r5,-8(fp)
 800f710:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f714:	e0bffd17 	ldw	r2,-12(fp)
 800f718:	10800017 	ldw	r2,0(r2)
 800f71c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f720:	e0bffc17 	ldw	r2,-16(fp)
 800f724:	10800a04 	addi	r2,r2,40
 800f728:	1009883a 	mov	r4,r2
 800f72c:	e17ffe17 	ldw	r5,-8(fp)
 800f730:	e1bfff17 	ldw	r6,-4(fp)
 800f734:	800fb240 	call	800fb24 <altera_avalon_jtag_uart_ioctl>
}
 800f738:	e037883a 	mov	sp,fp
 800f73c:	dfc00117 	ldw	ra,4(sp)
 800f740:	df000017 	ldw	fp,0(sp)
 800f744:	dec00204 	addi	sp,sp,8
 800f748:	f800283a 	ret

0800f74c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f74c:	defffa04 	addi	sp,sp,-24
 800f750:	dfc00515 	stw	ra,20(sp)
 800f754:	df000415 	stw	fp,16(sp)
 800f758:	df000404 	addi	fp,sp,16
 800f75c:	e13ffd15 	stw	r4,-12(fp)
 800f760:	e17ffe15 	stw	r5,-8(fp)
 800f764:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f768:	e0bffd17 	ldw	r2,-12(fp)
 800f76c:	00c00044 	movi	r3,1
 800f770:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f774:	e0bffd17 	ldw	r2,-12(fp)
 800f778:	10800017 	ldw	r2,0(r2)
 800f77c:	10800104 	addi	r2,r2,4
 800f780:	1007883a 	mov	r3,r2
 800f784:	e0bffd17 	ldw	r2,-12(fp)
 800f788:	10800817 	ldw	r2,32(r2)
 800f78c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800f790:	e0fffe17 	ldw	r3,-8(fp)
 800f794:	e0bfff17 	ldw	r2,-4(fp)
 800f798:	d8000015 	stw	zero,0(sp)
 800f79c:	1809883a 	mov	r4,r3
 800f7a0:	100b883a 	mov	r5,r2
 800f7a4:	01820074 	movhi	r6,2049
 800f7a8:	31be0404 	addi	r6,r6,-2032
 800f7ac:	e1fffd17 	ldw	r7,-12(fp)
 800f7b0:	80104b00 	call	80104b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f7b4:	e0bffd17 	ldw	r2,-12(fp)
 800f7b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f7bc:	e0bffd17 	ldw	r2,-12(fp)
 800f7c0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f7c4:	00820074 	movhi	r2,2049
 800f7c8:	1094f504 	addi	r2,r2,21460
 800f7cc:	10800017 	ldw	r2,0(r2)
 800f7d0:	1809883a 	mov	r4,r3
 800f7d4:	100b883a 	mov	r5,r2
 800f7d8:	01820074 	movhi	r6,2049
 800f7dc:	31be8504 	addi	r6,r6,-1516
 800f7e0:	e1fffd17 	ldw	r7,-12(fp)
 800f7e4:	80100340 	call	8010034 <alt_alarm_start>
 800f7e8:	1000040e 	bge	r2,zero,800f7fc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800f7ec:	e0fffd17 	ldw	r3,-12(fp)
 800f7f0:	00a00034 	movhi	r2,32768
 800f7f4:	10bfffc4 	addi	r2,r2,-1
 800f7f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800f7fc:	e037883a 	mov	sp,fp
 800f800:	dfc00117 	ldw	ra,4(sp)
 800f804:	df000017 	ldw	fp,0(sp)
 800f808:	dec00204 	addi	sp,sp,8
 800f80c:	f800283a 	ret

0800f810 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800f810:	defff804 	addi	sp,sp,-32
 800f814:	df000715 	stw	fp,28(sp)
 800f818:	df000704 	addi	fp,sp,28
 800f81c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800f820:	e0bfff17 	ldw	r2,-4(fp)
 800f824:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800f828:	e0bffb17 	ldw	r2,-20(fp)
 800f82c:	10800017 	ldw	r2,0(r2)
 800f830:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f834:	e0bffc17 	ldw	r2,-16(fp)
 800f838:	10800104 	addi	r2,r2,4
 800f83c:	10800037 	ldwio	r2,0(r2)
 800f840:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800f844:	e0bffd17 	ldw	r2,-12(fp)
 800f848:	1080c00c 	andi	r2,r2,768
 800f84c:	1000011e 	bne	r2,zero,800f854 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800f850:	00006c06 	br	800fa04 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800f854:	e0bffd17 	ldw	r2,-12(fp)
 800f858:	1080400c 	andi	r2,r2,256
 800f85c:	10003426 	beq	r2,zero,800f930 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800f860:	00800074 	movhi	r2,1
 800f864:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f868:	e0bffb17 	ldw	r2,-20(fp)
 800f86c:	10800a17 	ldw	r2,40(r2)
 800f870:	10800044 	addi	r2,r2,1
 800f874:	1081ffcc 	andi	r2,r2,2047
 800f878:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800f87c:	e0bffb17 	ldw	r2,-20(fp)
 800f880:	10c00b17 	ldw	r3,44(r2)
 800f884:	e0bffe17 	ldw	r2,-8(fp)
 800f888:	1880011e 	bne	r3,r2,800f890 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800f88c:	00001606 	br	800f8e8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800f890:	e0bffc17 	ldw	r2,-16(fp)
 800f894:	10800037 	ldwio	r2,0(r2)
 800f898:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800f89c:	e0bff917 	ldw	r2,-28(fp)
 800f8a0:	10a0000c 	andi	r2,r2,32768
 800f8a4:	1000011e 	bne	r2,zero,800f8ac <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800f8a8:	00000f06 	br	800f8e8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800f8ac:	e0bffb17 	ldw	r2,-20(fp)
 800f8b0:	10800a17 	ldw	r2,40(r2)
 800f8b4:	e0fff917 	ldw	r3,-28(fp)
 800f8b8:	1809883a 	mov	r4,r3
 800f8bc:	e0fffb17 	ldw	r3,-20(fp)
 800f8c0:	1885883a 	add	r2,r3,r2
 800f8c4:	10800e04 	addi	r2,r2,56
 800f8c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f8cc:	e0bffb17 	ldw	r2,-20(fp)
 800f8d0:	10800a17 	ldw	r2,40(r2)
 800f8d4:	10800044 	addi	r2,r2,1
 800f8d8:	10c1ffcc 	andi	r3,r2,2047
 800f8dc:	e0bffb17 	ldw	r2,-20(fp)
 800f8e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800f8e4:	003fe006 	br	800f868 <__alt_data_end+0xfc00f868>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800f8e8:	e0bff917 	ldw	r2,-28(fp)
 800f8ec:	10bfffec 	andhi	r2,r2,65535
 800f8f0:	10000f26 	beq	r2,zero,800f930 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f8f4:	e0bffb17 	ldw	r2,-20(fp)
 800f8f8:	10c00817 	ldw	r3,32(r2)
 800f8fc:	00bfff84 	movi	r2,-2
 800f900:	1886703a 	and	r3,r3,r2
 800f904:	e0bffb17 	ldw	r2,-20(fp)
 800f908:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800f90c:	e0bffc17 	ldw	r2,-16(fp)
 800f910:	10800104 	addi	r2,r2,4
 800f914:	1007883a 	mov	r3,r2
 800f918:	e0bffb17 	ldw	r2,-20(fp)
 800f91c:	10800817 	ldw	r2,32(r2)
 800f920:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f924:	e0bffc17 	ldw	r2,-16(fp)
 800f928:	10800104 	addi	r2,r2,4
 800f92c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800f930:	e0bffd17 	ldw	r2,-12(fp)
 800f934:	1080800c 	andi	r2,r2,512
 800f938:	10003126 	beq	r2,zero,800fa00 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800f93c:	e0bffd17 	ldw	r2,-12(fp)
 800f940:	1004d43a 	srli	r2,r2,16
 800f944:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f948:	00001406 	br	800f99c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f94c:	e0bffc17 	ldw	r2,-16(fp)
 800f950:	e0fffb17 	ldw	r3,-20(fp)
 800f954:	18c00d17 	ldw	r3,52(r3)
 800f958:	e13ffb17 	ldw	r4,-20(fp)
 800f95c:	20c7883a 	add	r3,r4,r3
 800f960:	18c20e04 	addi	r3,r3,2104
 800f964:	18c00003 	ldbu	r3,0(r3)
 800f968:	18c03fcc 	andi	r3,r3,255
 800f96c:	18c0201c 	xori	r3,r3,128
 800f970:	18ffe004 	addi	r3,r3,-128
 800f974:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f978:	e0bffb17 	ldw	r2,-20(fp)
 800f97c:	10800d17 	ldw	r2,52(r2)
 800f980:	10800044 	addi	r2,r2,1
 800f984:	10c1ffcc 	andi	r3,r2,2047
 800f988:	e0bffb17 	ldw	r2,-20(fp)
 800f98c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f990:	e0bffa17 	ldw	r2,-24(fp)
 800f994:	10bfffc4 	addi	r2,r2,-1
 800f998:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f99c:	e0bffa17 	ldw	r2,-24(fp)
 800f9a0:	10000526 	beq	r2,zero,800f9b8 <altera_avalon_jtag_uart_irq+0x1a8>
 800f9a4:	e0bffb17 	ldw	r2,-20(fp)
 800f9a8:	10c00d17 	ldw	r3,52(r2)
 800f9ac:	e0bffb17 	ldw	r2,-20(fp)
 800f9b0:	10800c17 	ldw	r2,48(r2)
 800f9b4:	18bfe51e 	bne	r3,r2,800f94c <__alt_data_end+0xfc00f94c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800f9b8:	e0bffa17 	ldw	r2,-24(fp)
 800f9bc:	10001026 	beq	r2,zero,800fa00 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f9c0:	e0bffb17 	ldw	r2,-20(fp)
 800f9c4:	10c00817 	ldw	r3,32(r2)
 800f9c8:	00bfff44 	movi	r2,-3
 800f9cc:	1886703a 	and	r3,r3,r2
 800f9d0:	e0bffb17 	ldw	r2,-20(fp)
 800f9d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f9d8:	e0bffb17 	ldw	r2,-20(fp)
 800f9dc:	10800017 	ldw	r2,0(r2)
 800f9e0:	10800104 	addi	r2,r2,4
 800f9e4:	1007883a 	mov	r3,r2
 800f9e8:	e0bffb17 	ldw	r2,-20(fp)
 800f9ec:	10800817 	ldw	r2,32(r2)
 800f9f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f9f4:	e0bffc17 	ldw	r2,-16(fp)
 800f9f8:	10800104 	addi	r2,r2,4
 800f9fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800fa00:	003f8c06 	br	800f834 <__alt_data_end+0xfc00f834>
}
 800fa04:	e037883a 	mov	sp,fp
 800fa08:	df000017 	ldw	fp,0(sp)
 800fa0c:	dec00104 	addi	sp,sp,4
 800fa10:	f800283a 	ret

0800fa14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800fa14:	defff804 	addi	sp,sp,-32
 800fa18:	df000715 	stw	fp,28(sp)
 800fa1c:	df000704 	addi	fp,sp,28
 800fa20:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800fa24:	e0bffb17 	ldw	r2,-20(fp)
 800fa28:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800fa2c:	e0bff917 	ldw	r2,-28(fp)
 800fa30:	10800017 	ldw	r2,0(r2)
 800fa34:	10800104 	addi	r2,r2,4
 800fa38:	10800037 	ldwio	r2,0(r2)
 800fa3c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800fa40:	e0bffa17 	ldw	r2,-24(fp)
 800fa44:	1081000c 	andi	r2,r2,1024
 800fa48:	10000b26 	beq	r2,zero,800fa78 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800fa4c:	e0bff917 	ldw	r2,-28(fp)
 800fa50:	10800017 	ldw	r2,0(r2)
 800fa54:	10800104 	addi	r2,r2,4
 800fa58:	1007883a 	mov	r3,r2
 800fa5c:	e0bff917 	ldw	r2,-28(fp)
 800fa60:	10800817 	ldw	r2,32(r2)
 800fa64:	10810014 	ori	r2,r2,1024
 800fa68:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800fa6c:	e0bff917 	ldw	r2,-28(fp)
 800fa70:	10000915 	stw	zero,36(r2)
 800fa74:	00000a06 	br	800faa0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800fa78:	e0bff917 	ldw	r2,-28(fp)
 800fa7c:	10c00917 	ldw	r3,36(r2)
 800fa80:	00a00034 	movhi	r2,32768
 800fa84:	10bfff04 	addi	r2,r2,-4
 800fa88:	10c00536 	bltu	r2,r3,800faa0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800fa8c:	e0bff917 	ldw	r2,-28(fp)
 800fa90:	10800917 	ldw	r2,36(r2)
 800fa94:	10c00044 	addi	r3,r2,1
 800fa98:	e0bff917 	ldw	r2,-28(fp)
 800fa9c:	10c00915 	stw	r3,36(r2)
 800faa0:	00820074 	movhi	r2,2049
 800faa4:	1094f504 	addi	r2,r2,21460
 800faa8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800faac:	e037883a 	mov	sp,fp
 800fab0:	df000017 	ldw	fp,0(sp)
 800fab4:	dec00104 	addi	sp,sp,4
 800fab8:	f800283a 	ret

0800fabc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800fabc:	defffd04 	addi	sp,sp,-12
 800fac0:	df000215 	stw	fp,8(sp)
 800fac4:	df000204 	addi	fp,sp,8
 800fac8:	e13ffe15 	stw	r4,-8(fp)
 800facc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fad0:	00000506 	br	800fae8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800fad4:	e0bfff17 	ldw	r2,-4(fp)
 800fad8:	1090000c 	andi	r2,r2,16384
 800fadc:	10000226 	beq	r2,zero,800fae8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800fae0:	00bffd44 	movi	r2,-11
 800fae4:	00000b06 	br	800fb14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fae8:	e0bffe17 	ldw	r2,-8(fp)
 800faec:	10c00d17 	ldw	r3,52(r2)
 800faf0:	e0bffe17 	ldw	r2,-8(fp)
 800faf4:	10800c17 	ldw	r2,48(r2)
 800faf8:	18800526 	beq	r3,r2,800fb10 <altera_avalon_jtag_uart_close+0x54>
 800fafc:	e0bffe17 	ldw	r2,-8(fp)
 800fb00:	10c00917 	ldw	r3,36(r2)
 800fb04:	e0bffe17 	ldw	r2,-8(fp)
 800fb08:	10800117 	ldw	r2,4(r2)
 800fb0c:	18bff136 	bltu	r3,r2,800fad4 <__alt_data_end+0xfc00fad4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800fb10:	0005883a 	mov	r2,zero
}
 800fb14:	e037883a 	mov	sp,fp
 800fb18:	df000017 	ldw	fp,0(sp)
 800fb1c:	dec00104 	addi	sp,sp,4
 800fb20:	f800283a 	ret

0800fb24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800fb24:	defffa04 	addi	sp,sp,-24
 800fb28:	df000515 	stw	fp,20(sp)
 800fb2c:	df000504 	addi	fp,sp,20
 800fb30:	e13ffd15 	stw	r4,-12(fp)
 800fb34:	e17ffe15 	stw	r5,-8(fp)
 800fb38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800fb3c:	00bff9c4 	movi	r2,-25
 800fb40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800fb44:	e0bffe17 	ldw	r2,-8(fp)
 800fb48:	10da8060 	cmpeqi	r3,r2,27137
 800fb4c:	1800031e 	bne	r3,zero,800fb5c <altera_avalon_jtag_uart_ioctl+0x38>
 800fb50:	109a80a0 	cmpeqi	r2,r2,27138
 800fb54:	1000191e 	bne	r2,zero,800fbbc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800fb58:	00002806 	br	800fbfc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800fb5c:	e0bffd17 	ldw	r2,-12(fp)
 800fb60:	10c00117 	ldw	r3,4(r2)
 800fb64:	00a00034 	movhi	r2,32768
 800fb68:	10bfffc4 	addi	r2,r2,-1
 800fb6c:	18801226 	beq	r3,r2,800fbb8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800fb70:	e0bfff17 	ldw	r2,-4(fp)
 800fb74:	10800017 	ldw	r2,0(r2)
 800fb78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800fb7c:	e0bffc17 	ldw	r2,-16(fp)
 800fb80:	10800090 	cmplti	r2,r2,2
 800fb84:	1000061e 	bne	r2,zero,800fba0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800fb88:	e0fffc17 	ldw	r3,-16(fp)
 800fb8c:	00a00034 	movhi	r2,32768
 800fb90:	10bfffc4 	addi	r2,r2,-1
 800fb94:	18800226 	beq	r3,r2,800fba0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800fb98:	e0bffc17 	ldw	r2,-16(fp)
 800fb9c:	00000206 	br	800fba8 <altera_avalon_jtag_uart_ioctl+0x84>
 800fba0:	00a00034 	movhi	r2,32768
 800fba4:	10bfff84 	addi	r2,r2,-2
 800fba8:	e0fffd17 	ldw	r3,-12(fp)
 800fbac:	18800115 	stw	r2,4(r3)
      rc = 0;
 800fbb0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fbb4:	00001106 	br	800fbfc <altera_avalon_jtag_uart_ioctl+0xd8>
 800fbb8:	00001006 	br	800fbfc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800fbbc:	e0bffd17 	ldw	r2,-12(fp)
 800fbc0:	10c00117 	ldw	r3,4(r2)
 800fbc4:	00a00034 	movhi	r2,32768
 800fbc8:	10bfffc4 	addi	r2,r2,-1
 800fbcc:	18800a26 	beq	r3,r2,800fbf8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800fbd0:	e0bffd17 	ldw	r2,-12(fp)
 800fbd4:	10c00917 	ldw	r3,36(r2)
 800fbd8:	e0bffd17 	ldw	r2,-12(fp)
 800fbdc:	10800117 	ldw	r2,4(r2)
 800fbe0:	1885803a 	cmpltu	r2,r3,r2
 800fbe4:	10c03fcc 	andi	r3,r2,255
 800fbe8:	e0bfff17 	ldw	r2,-4(fp)
 800fbec:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800fbf0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fbf4:	00000006 	br	800fbf8 <altera_avalon_jtag_uart_ioctl+0xd4>
 800fbf8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800fbfc:	e0bffb17 	ldw	r2,-20(fp)
}
 800fc00:	e037883a 	mov	sp,fp
 800fc04:	df000017 	ldw	fp,0(sp)
 800fc08:	dec00104 	addi	sp,sp,4
 800fc0c:	f800283a 	ret

0800fc10 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800fc10:	defff304 	addi	sp,sp,-52
 800fc14:	dfc00c15 	stw	ra,48(sp)
 800fc18:	df000b15 	stw	fp,44(sp)
 800fc1c:	df000b04 	addi	fp,sp,44
 800fc20:	e13ffc15 	stw	r4,-16(fp)
 800fc24:	e17ffd15 	stw	r5,-12(fp)
 800fc28:	e1bffe15 	stw	r6,-8(fp)
 800fc2c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800fc30:	e0bffd17 	ldw	r2,-12(fp)
 800fc34:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fc38:	00004906 	br	800fd60 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800fc3c:	e0bffc17 	ldw	r2,-16(fp)
 800fc40:	10800a17 	ldw	r2,40(r2)
 800fc44:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800fc48:	e0bffc17 	ldw	r2,-16(fp)
 800fc4c:	10800b17 	ldw	r2,44(r2)
 800fc50:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800fc54:	e0fff717 	ldw	r3,-36(fp)
 800fc58:	e0bff817 	ldw	r2,-32(fp)
 800fc5c:	18800536 	bltu	r3,r2,800fc74 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800fc60:	e0fff717 	ldw	r3,-36(fp)
 800fc64:	e0bff817 	ldw	r2,-32(fp)
 800fc68:	1885c83a 	sub	r2,r3,r2
 800fc6c:	e0bff615 	stw	r2,-40(fp)
 800fc70:	00000406 	br	800fc84 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800fc74:	00c20004 	movi	r3,2048
 800fc78:	e0bff817 	ldw	r2,-32(fp)
 800fc7c:	1885c83a 	sub	r2,r3,r2
 800fc80:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fc84:	e0bff617 	ldw	r2,-40(fp)
 800fc88:	1000011e 	bne	r2,zero,800fc90 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800fc8c:	00001d06 	br	800fd04 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800fc90:	e0fffe17 	ldw	r3,-8(fp)
 800fc94:	e0bff617 	ldw	r2,-40(fp)
 800fc98:	1880022e 	bgeu	r3,r2,800fca4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800fc9c:	e0bffe17 	ldw	r2,-8(fp)
 800fca0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800fca4:	e0bff817 	ldw	r2,-32(fp)
 800fca8:	10800e04 	addi	r2,r2,56
 800fcac:	e0fffc17 	ldw	r3,-16(fp)
 800fcb0:	1885883a 	add	r2,r3,r2
 800fcb4:	e13ff517 	ldw	r4,-44(fp)
 800fcb8:	100b883a 	mov	r5,r2
 800fcbc:	e1bff617 	ldw	r6,-40(fp)
 800fcc0:	8007a740 	call	8007a74 <memcpy>
      ptr   += n;
 800fcc4:	e0fff517 	ldw	r3,-44(fp)
 800fcc8:	e0bff617 	ldw	r2,-40(fp)
 800fccc:	1885883a 	add	r2,r3,r2
 800fcd0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800fcd4:	e0fffe17 	ldw	r3,-8(fp)
 800fcd8:	e0bff617 	ldw	r2,-40(fp)
 800fcdc:	1885c83a 	sub	r2,r3,r2
 800fce0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fce4:	e0fff817 	ldw	r3,-32(fp)
 800fce8:	e0bff617 	ldw	r2,-40(fp)
 800fcec:	1885883a 	add	r2,r3,r2
 800fcf0:	10c1ffcc 	andi	r3,r2,2047
 800fcf4:	e0bffc17 	ldw	r2,-16(fp)
 800fcf8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800fcfc:	e0bffe17 	ldw	r2,-8(fp)
 800fd00:	00bfce16 	blt	zero,r2,800fc3c <__alt_data_end+0xfc00fc3c>

    /* If we read any data then return it */
    if (ptr != buffer)
 800fd04:	e0fff517 	ldw	r3,-44(fp)
 800fd08:	e0bffd17 	ldw	r2,-12(fp)
 800fd0c:	18800126 	beq	r3,r2,800fd14 <altera_avalon_jtag_uart_read+0x104>
      break;
 800fd10:	00001506 	br	800fd68 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800fd14:	e0bfff17 	ldw	r2,-4(fp)
 800fd18:	1090000c 	andi	r2,r2,16384
 800fd1c:	10000126 	beq	r2,zero,800fd24 <altera_avalon_jtag_uart_read+0x114>
      break;
 800fd20:	00001106 	br	800fd68 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800fd24:	0001883a 	nop
 800fd28:	e0bffc17 	ldw	r2,-16(fp)
 800fd2c:	10c00a17 	ldw	r3,40(r2)
 800fd30:	e0bff717 	ldw	r2,-36(fp)
 800fd34:	1880051e 	bne	r3,r2,800fd4c <altera_avalon_jtag_uart_read+0x13c>
 800fd38:	e0bffc17 	ldw	r2,-16(fp)
 800fd3c:	10c00917 	ldw	r3,36(r2)
 800fd40:	e0bffc17 	ldw	r2,-16(fp)
 800fd44:	10800117 	ldw	r2,4(r2)
 800fd48:	18bff736 	bltu	r3,r2,800fd28 <__alt_data_end+0xfc00fd28>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800fd4c:	e0bffc17 	ldw	r2,-16(fp)
 800fd50:	10c00a17 	ldw	r3,40(r2)
 800fd54:	e0bff717 	ldw	r2,-36(fp)
 800fd58:	1880011e 	bne	r3,r2,800fd60 <altera_avalon_jtag_uart_read+0x150>
      break;
 800fd5c:	00000206 	br	800fd68 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fd60:	e0bffe17 	ldw	r2,-8(fp)
 800fd64:	00bfb516 	blt	zero,r2,800fc3c <__alt_data_end+0xfc00fc3c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800fd68:	e0fff517 	ldw	r3,-44(fp)
 800fd6c:	e0bffd17 	ldw	r2,-12(fp)
 800fd70:	18801826 	beq	r3,r2,800fdd4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fd74:	0005303a 	rdctl	r2,status
 800fd78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fd7c:	e0fffa17 	ldw	r3,-24(fp)
 800fd80:	00bfff84 	movi	r2,-2
 800fd84:	1884703a 	and	r2,r3,r2
 800fd88:	1001703a 	wrctl	status,r2
  
  return context;
 800fd8c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800fd90:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fd94:	e0bffc17 	ldw	r2,-16(fp)
 800fd98:	10800817 	ldw	r2,32(r2)
 800fd9c:	10c00054 	ori	r3,r2,1
 800fda0:	e0bffc17 	ldw	r2,-16(fp)
 800fda4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fda8:	e0bffc17 	ldw	r2,-16(fp)
 800fdac:	10800017 	ldw	r2,0(r2)
 800fdb0:	10800104 	addi	r2,r2,4
 800fdb4:	1007883a 	mov	r3,r2
 800fdb8:	e0bffc17 	ldw	r2,-16(fp)
 800fdbc:	10800817 	ldw	r2,32(r2)
 800fdc0:	18800035 	stwio	r2,0(r3)
 800fdc4:	e0bff917 	ldw	r2,-28(fp)
 800fdc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fdcc:	e0bffb17 	ldw	r2,-20(fp)
 800fdd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800fdd4:	e0fff517 	ldw	r3,-44(fp)
 800fdd8:	e0bffd17 	ldw	r2,-12(fp)
 800fddc:	18800426 	beq	r3,r2,800fdf0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800fde0:	e0fff517 	ldw	r3,-44(fp)
 800fde4:	e0bffd17 	ldw	r2,-12(fp)
 800fde8:	1885c83a 	sub	r2,r3,r2
 800fdec:	00000606 	br	800fe08 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800fdf0:	e0bfff17 	ldw	r2,-4(fp)
 800fdf4:	1090000c 	andi	r2,r2,16384
 800fdf8:	10000226 	beq	r2,zero,800fe04 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800fdfc:	00bffd44 	movi	r2,-11
 800fe00:	00000106 	br	800fe08 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800fe04:	00bffec4 	movi	r2,-5
}
 800fe08:	e037883a 	mov	sp,fp
 800fe0c:	dfc00117 	ldw	ra,4(sp)
 800fe10:	df000017 	ldw	fp,0(sp)
 800fe14:	dec00204 	addi	sp,sp,8
 800fe18:	f800283a 	ret

0800fe1c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800fe1c:	defff304 	addi	sp,sp,-52
 800fe20:	dfc00c15 	stw	ra,48(sp)
 800fe24:	df000b15 	stw	fp,44(sp)
 800fe28:	df000b04 	addi	fp,sp,44
 800fe2c:	e13ffc15 	stw	r4,-16(fp)
 800fe30:	e17ffd15 	stw	r5,-12(fp)
 800fe34:	e1bffe15 	stw	r6,-8(fp)
 800fe38:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800fe3c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800fe40:	e0bffd17 	ldw	r2,-12(fp)
 800fe44:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fe48:	00003806 	br	800ff2c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800fe4c:	e0bffc17 	ldw	r2,-16(fp)
 800fe50:	10800c17 	ldw	r2,48(r2)
 800fe54:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800fe58:	e0bffc17 	ldw	r2,-16(fp)
 800fe5c:	10800d17 	ldw	r2,52(r2)
 800fe60:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800fe64:	e0fff817 	ldw	r3,-32(fp)
 800fe68:	e0bff517 	ldw	r2,-44(fp)
 800fe6c:	1880062e 	bgeu	r3,r2,800fe88 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800fe70:	e0fff517 	ldw	r3,-44(fp)
 800fe74:	e0bff817 	ldw	r2,-32(fp)
 800fe78:	1885c83a 	sub	r2,r3,r2
 800fe7c:	10bfffc4 	addi	r2,r2,-1
 800fe80:	e0bff615 	stw	r2,-40(fp)
 800fe84:	00000b06 	br	800feb4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800fe88:	e0bff517 	ldw	r2,-44(fp)
 800fe8c:	10000526 	beq	r2,zero,800fea4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800fe90:	00c20004 	movi	r3,2048
 800fe94:	e0bff817 	ldw	r2,-32(fp)
 800fe98:	1885c83a 	sub	r2,r3,r2
 800fe9c:	e0bff615 	stw	r2,-40(fp)
 800fea0:	00000406 	br	800feb4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800fea4:	00c1ffc4 	movi	r3,2047
 800fea8:	e0bff817 	ldw	r2,-32(fp)
 800feac:	1885c83a 	sub	r2,r3,r2
 800feb0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800feb4:	e0bff617 	ldw	r2,-40(fp)
 800feb8:	1000011e 	bne	r2,zero,800fec0 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800febc:	00001d06 	br	800ff34 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800fec0:	e0fffe17 	ldw	r3,-8(fp)
 800fec4:	e0bff617 	ldw	r2,-40(fp)
 800fec8:	1880022e 	bgeu	r3,r2,800fed4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800fecc:	e0bffe17 	ldw	r2,-8(fp)
 800fed0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800fed4:	e0bff817 	ldw	r2,-32(fp)
 800fed8:	10820e04 	addi	r2,r2,2104
 800fedc:	e0fffc17 	ldw	r3,-16(fp)
 800fee0:	1885883a 	add	r2,r3,r2
 800fee4:	1009883a 	mov	r4,r2
 800fee8:	e17ffd17 	ldw	r5,-12(fp)
 800feec:	e1bff617 	ldw	r6,-40(fp)
 800fef0:	8007a740 	call	8007a74 <memcpy>
      ptr   += n;
 800fef4:	e0fffd17 	ldw	r3,-12(fp)
 800fef8:	e0bff617 	ldw	r2,-40(fp)
 800fefc:	1885883a 	add	r2,r3,r2
 800ff00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800ff04:	e0fffe17 	ldw	r3,-8(fp)
 800ff08:	e0bff617 	ldw	r2,-40(fp)
 800ff0c:	1885c83a 	sub	r2,r3,r2
 800ff10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ff14:	e0fff817 	ldw	r3,-32(fp)
 800ff18:	e0bff617 	ldw	r2,-40(fp)
 800ff1c:	1885883a 	add	r2,r3,r2
 800ff20:	10c1ffcc 	andi	r3,r2,2047
 800ff24:	e0bffc17 	ldw	r2,-16(fp)
 800ff28:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800ff2c:	e0bffe17 	ldw	r2,-8(fp)
 800ff30:	00bfc616 	blt	zero,r2,800fe4c <__alt_data_end+0xfc00fe4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ff34:	0005303a 	rdctl	r2,status
 800ff38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ff3c:	e0fffa17 	ldw	r3,-24(fp)
 800ff40:	00bfff84 	movi	r2,-2
 800ff44:	1884703a 	and	r2,r3,r2
 800ff48:	1001703a 	wrctl	status,r2
  
  return context;
 800ff4c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800ff50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800ff54:	e0bffc17 	ldw	r2,-16(fp)
 800ff58:	10800817 	ldw	r2,32(r2)
 800ff5c:	10c00094 	ori	r3,r2,2
 800ff60:	e0bffc17 	ldw	r2,-16(fp)
 800ff64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ff68:	e0bffc17 	ldw	r2,-16(fp)
 800ff6c:	10800017 	ldw	r2,0(r2)
 800ff70:	10800104 	addi	r2,r2,4
 800ff74:	1007883a 	mov	r3,r2
 800ff78:	e0bffc17 	ldw	r2,-16(fp)
 800ff7c:	10800817 	ldw	r2,32(r2)
 800ff80:	18800035 	stwio	r2,0(r3)
 800ff84:	e0bff917 	ldw	r2,-28(fp)
 800ff88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ff8c:	e0bffb17 	ldw	r2,-20(fp)
 800ff90:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800ff94:	e0bffe17 	ldw	r2,-8(fp)
 800ff98:	0080120e 	bge	zero,r2,800ffe4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800ff9c:	e0bfff17 	ldw	r2,-4(fp)
 800ffa0:	1090000c 	andi	r2,r2,16384
 800ffa4:	10000126 	beq	r2,zero,800ffac <altera_avalon_jtag_uart_write+0x190>
        break;
 800ffa8:	00001006 	br	800ffec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800ffac:	0001883a 	nop
 800ffb0:	e0bffc17 	ldw	r2,-16(fp)
 800ffb4:	10c00d17 	ldw	r3,52(r2)
 800ffb8:	e0bff517 	ldw	r2,-44(fp)
 800ffbc:	1880051e 	bne	r3,r2,800ffd4 <altera_avalon_jtag_uart_write+0x1b8>
 800ffc0:	e0bffc17 	ldw	r2,-16(fp)
 800ffc4:	10c00917 	ldw	r3,36(r2)
 800ffc8:	e0bffc17 	ldw	r2,-16(fp)
 800ffcc:	10800117 	ldw	r2,4(r2)
 800ffd0:	18bff736 	bltu	r3,r2,800ffb0 <__alt_data_end+0xfc00ffb0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800ffd4:	e0bffc17 	ldw	r2,-16(fp)
 800ffd8:	10800917 	ldw	r2,36(r2)
 800ffdc:	10000126 	beq	r2,zero,800ffe4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800ffe0:	00000206 	br	800ffec <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800ffe4:	e0bffe17 	ldw	r2,-8(fp)
 800ffe8:	00bf9716 	blt	zero,r2,800fe48 <__alt_data_end+0xfc00fe48>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800ffec:	e0fffd17 	ldw	r3,-12(fp)
 800fff0:	e0bff717 	ldw	r2,-36(fp)
 800fff4:	18800426 	beq	r3,r2,8010008 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800fff8:	e0fffd17 	ldw	r3,-12(fp)
 800fffc:	e0bff717 	ldw	r2,-36(fp)
 8010000:	1885c83a 	sub	r2,r3,r2
 8010004:	00000606 	br	8010020 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8010008:	e0bfff17 	ldw	r2,-4(fp)
 801000c:	1090000c 	andi	r2,r2,16384
 8010010:	10000226 	beq	r2,zero,801001c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8010014:	00bffd44 	movi	r2,-11
 8010018:	00000106 	br	8010020 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801001c:	00bffec4 	movi	r2,-5
}
 8010020:	e037883a 	mov	sp,fp
 8010024:	dfc00117 	ldw	ra,4(sp)
 8010028:	df000017 	ldw	fp,0(sp)
 801002c:	dec00204 	addi	sp,sp,8
 8010030:	f800283a 	ret

08010034 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010034:	defff504 	addi	sp,sp,-44
 8010038:	df000a15 	stw	fp,40(sp)
 801003c:	df000a04 	addi	fp,sp,40
 8010040:	e13ffc15 	stw	r4,-16(fp)
 8010044:	e17ffd15 	stw	r5,-12(fp)
 8010048:	e1bffe15 	stw	r6,-8(fp)
 801004c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8010050:	e03ff615 	stw	zero,-40(fp)
 8010054:	00820074 	movhi	r2,2049
 8010058:	1094f504 	addi	r2,r2,21460
 801005c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8010060:	10003f26 	beq	r2,zero,8010160 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8010064:	e0bffc17 	ldw	r2,-16(fp)
 8010068:	10003b26 	beq	r2,zero,8010158 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 801006c:	e0bffc17 	ldw	r2,-16(fp)
 8010070:	e0fffe17 	ldw	r3,-8(fp)
 8010074:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8010078:	e0bffc17 	ldw	r2,-16(fp)
 801007c:	e0ffff17 	ldw	r3,-4(fp)
 8010080:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010084:	0005303a 	rdctl	r2,status
 8010088:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801008c:	e0fff817 	ldw	r3,-32(fp)
 8010090:	00bfff84 	movi	r2,-2
 8010094:	1884703a 	and	r2,r3,r2
 8010098:	1001703a 	wrctl	status,r2
  
  return context;
 801009c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 80100a0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80100a4:	00820074 	movhi	r2,2049
 80100a8:	1094f604 	addi	r2,r2,21464
 80100ac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 80100b0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80100b4:	e0fffd17 	ldw	r3,-12(fp)
 80100b8:	e0bff617 	ldw	r2,-40(fp)
 80100bc:	1885883a 	add	r2,r3,r2
 80100c0:	10c00044 	addi	r3,r2,1
 80100c4:	e0bffc17 	ldw	r2,-16(fp)
 80100c8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80100cc:	e0bffc17 	ldw	r2,-16(fp)
 80100d0:	10c00217 	ldw	r3,8(r2)
 80100d4:	e0bff617 	ldw	r2,-40(fp)
 80100d8:	1880042e 	bgeu	r3,r2,80100ec <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 80100dc:	e0bffc17 	ldw	r2,-16(fp)
 80100e0:	00c00044 	movi	r3,1
 80100e4:	10c00405 	stb	r3,16(r2)
 80100e8:	00000206 	br	80100f4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 80100ec:	e0bffc17 	ldw	r2,-16(fp)
 80100f0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80100f4:	e0fffc17 	ldw	r3,-16(fp)
 80100f8:	00820074 	movhi	r2,2049
 80100fc:	108e2c04 	addi	r2,r2,14512
 8010100:	e0bff915 	stw	r2,-28(fp)
 8010104:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010108:	e0bffa17 	ldw	r2,-24(fp)
 801010c:	e0fff917 	ldw	r3,-28(fp)
 8010110:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010114:	e0bff917 	ldw	r2,-28(fp)
 8010118:	10c00017 	ldw	r3,0(r2)
 801011c:	e0bffa17 	ldw	r2,-24(fp)
 8010120:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010124:	e0bff917 	ldw	r2,-28(fp)
 8010128:	10800017 	ldw	r2,0(r2)
 801012c:	e0fffa17 	ldw	r3,-24(fp)
 8010130:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010134:	e0bff917 	ldw	r2,-28(fp)
 8010138:	e0fffa17 	ldw	r3,-24(fp)
 801013c:	10c00015 	stw	r3,0(r2)
 8010140:	e0bff717 	ldw	r2,-36(fp)
 8010144:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010148:	e0bffb17 	ldw	r2,-20(fp)
 801014c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8010150:	0005883a 	mov	r2,zero
 8010154:	00000306 	br	8010164 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8010158:	00bffa84 	movi	r2,-22
 801015c:	00000106 	br	8010164 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8010160:	00bfde84 	movi	r2,-134
  }
}
 8010164:	e037883a 	mov	sp,fp
 8010168:	df000017 	ldw	fp,0(sp)
 801016c:	dec00104 	addi	sp,sp,4
 8010170:	f800283a 	ret

08010174 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8010174:	defffa04 	addi	sp,sp,-24
 8010178:	dfc00515 	stw	ra,20(sp)
 801017c:	df000415 	stw	fp,16(sp)
 8010180:	df000404 	addi	fp,sp,16
 8010184:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8010188:	00800244 	movi	r2,9
 801018c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8010190:	e13ffd17 	ldw	r4,-12(fp)
 8010194:	014003f4 	movhi	r5,15
 8010198:	29509004 	addi	r5,r5,16960
 801019c:	800c2ec0 	call	800c2ec <__mulsi3>
 80101a0:	0100bef4 	movhi	r4,763
 80101a4:	213c2004 	addi	r4,r4,-3968
 80101a8:	100b883a 	mov	r5,r2
 80101ac:	800c2dc0 	call	800c2dc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80101b0:	01200034 	movhi	r4,32768
 80101b4:	213fffc4 	addi	r4,r4,-1
 80101b8:	100b883a 	mov	r5,r2
 80101bc:	800c2dc0 	call	800c2dc <__udivsi3>
 80101c0:	e13fff17 	ldw	r4,-4(fp)
 80101c4:	100b883a 	mov	r5,r2
 80101c8:	800c2dc0 	call	800c2dc <__udivsi3>
 80101cc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 80101d0:	e0bffe17 	ldw	r2,-8(fp)
 80101d4:	10002a26 	beq	r2,zero,8010280 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 80101d8:	e03ffc15 	stw	zero,-16(fp)
 80101dc:	00001706 	br	801023c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 80101e0:	00a00034 	movhi	r2,32768
 80101e4:	10bfffc4 	addi	r2,r2,-1
 80101e8:	10bfffc4 	addi	r2,r2,-1
 80101ec:	103ffe1e 	bne	r2,zero,80101e8 <__alt_data_end+0xfc0101e8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 80101f0:	e13ffd17 	ldw	r4,-12(fp)
 80101f4:	014003f4 	movhi	r5,15
 80101f8:	29509004 	addi	r5,r5,16960
 80101fc:	800c2ec0 	call	800c2ec <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8010200:	0100bef4 	movhi	r4,763
 8010204:	213c2004 	addi	r4,r4,-3968
 8010208:	100b883a 	mov	r5,r2
 801020c:	800c2dc0 	call	800c2dc <__udivsi3>
 8010210:	01200034 	movhi	r4,32768
 8010214:	213fffc4 	addi	r4,r4,-1
 8010218:	100b883a 	mov	r5,r2
 801021c:	800c2dc0 	call	800c2dc <__udivsi3>
 8010220:	1007883a 	mov	r3,r2
 8010224:	e0bfff17 	ldw	r2,-4(fp)
 8010228:	10c5c83a 	sub	r2,r2,r3
 801022c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8010230:	e0bffc17 	ldw	r2,-16(fp)
 8010234:	10800044 	addi	r2,r2,1
 8010238:	e0bffc15 	stw	r2,-16(fp)
 801023c:	e0fffc17 	ldw	r3,-16(fp)
 8010240:	e0bffe17 	ldw	r2,-8(fp)
 8010244:	18bfe616 	blt	r3,r2,80101e0 <__alt_data_end+0xfc0101e0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010248:	e13ffd17 	ldw	r4,-12(fp)
 801024c:	014003f4 	movhi	r5,15
 8010250:	29509004 	addi	r5,r5,16960
 8010254:	800c2ec0 	call	800c2ec <__mulsi3>
 8010258:	0100bef4 	movhi	r4,763
 801025c:	213c2004 	addi	r4,r4,-3968
 8010260:	100b883a 	mov	r5,r2
 8010264:	800c2dc0 	call	800c2dc <__udivsi3>
 8010268:	1009883a 	mov	r4,r2
 801026c:	e17fff17 	ldw	r5,-4(fp)
 8010270:	800c2ec0 	call	800c2ec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010274:	10bfffc4 	addi	r2,r2,-1
 8010278:	103ffe1e 	bne	r2,zero,8010274 <__alt_data_end+0xfc010274>
 801027c:	00000d06 	br	80102b4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010280:	e13ffd17 	ldw	r4,-12(fp)
 8010284:	014003f4 	movhi	r5,15
 8010288:	29509004 	addi	r5,r5,16960
 801028c:	800c2ec0 	call	800c2ec <__mulsi3>
 8010290:	0100bef4 	movhi	r4,763
 8010294:	213c2004 	addi	r4,r4,-3968
 8010298:	100b883a 	mov	r5,r2
 801029c:	800c2dc0 	call	800c2dc <__udivsi3>
 80102a0:	1009883a 	mov	r4,r2
 80102a4:	e17fff17 	ldw	r5,-4(fp)
 80102a8:	800c2ec0 	call	800c2ec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80102ac:	10bfffc4 	addi	r2,r2,-1
 80102b0:	00bffe16 	blt	zero,r2,80102ac <__alt_data_end+0xfc0102ac>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80102b4:	0005883a 	mov	r2,zero
}
 80102b8:	e037883a 	mov	sp,fp
 80102bc:	dfc00117 	ldw	ra,4(sp)
 80102c0:	df000017 	ldw	fp,0(sp)
 80102c4:	dec00204 	addi	sp,sp,8
 80102c8:	f800283a 	ret

080102cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80102cc:	deffff04 	addi	sp,sp,-4
 80102d0:	df000015 	stw	fp,0(sp)
 80102d4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80102d8:	e037883a 	mov	sp,fp
 80102dc:	df000017 	ldw	fp,0(sp)
 80102e0:	dec00104 	addi	sp,sp,4
 80102e4:	f800283a 	ret

080102e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80102e8:	defffe04 	addi	sp,sp,-8
 80102ec:	dfc00115 	stw	ra,4(sp)
 80102f0:	df000015 	stw	fp,0(sp)
 80102f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80102f8:	00820074 	movhi	r2,2049
 80102fc:	108e2904 	addi	r2,r2,14500
 8010300:	10800017 	ldw	r2,0(r2)
 8010304:	10000526 	beq	r2,zero,801031c <alt_get_errno+0x34>
 8010308:	00820074 	movhi	r2,2049
 801030c:	108e2904 	addi	r2,r2,14500
 8010310:	10800017 	ldw	r2,0(r2)
 8010314:	103ee83a 	callr	r2
 8010318:	00000206 	br	8010324 <alt_get_errno+0x3c>
 801031c:	00820074 	movhi	r2,2049
 8010320:	1094f004 	addi	r2,r2,21440
}
 8010324:	e037883a 	mov	sp,fp
 8010328:	dfc00117 	ldw	ra,4(sp)
 801032c:	df000017 	ldw	fp,0(sp)
 8010330:	dec00204 	addi	sp,sp,8
 8010334:	f800283a 	ret

08010338 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010338:	defffa04 	addi	sp,sp,-24
 801033c:	dfc00515 	stw	ra,20(sp)
 8010340:	df000415 	stw	fp,16(sp)
 8010344:	df000404 	addi	fp,sp,16
 8010348:	e13ffe15 	stw	r4,-8(fp)
 801034c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8010350:	e0bffe17 	ldw	r2,-8(fp)
 8010354:	10000326 	beq	r2,zero,8010364 <alt_dev_llist_insert+0x2c>
 8010358:	e0bffe17 	ldw	r2,-8(fp)
 801035c:	10800217 	ldw	r2,8(r2)
 8010360:	1000061e 	bne	r2,zero,801037c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8010364:	80102e80 	call	80102e8 <alt_get_errno>
 8010368:	1007883a 	mov	r3,r2
 801036c:	00800584 	movi	r2,22
 8010370:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8010374:	00bffa84 	movi	r2,-22
 8010378:	00001306 	br	80103c8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 801037c:	e0bffe17 	ldw	r2,-8(fp)
 8010380:	e0ffff17 	ldw	r3,-4(fp)
 8010384:	e0fffc15 	stw	r3,-16(fp)
 8010388:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801038c:	e0bffd17 	ldw	r2,-12(fp)
 8010390:	e0fffc17 	ldw	r3,-16(fp)
 8010394:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010398:	e0bffc17 	ldw	r2,-16(fp)
 801039c:	10c00017 	ldw	r3,0(r2)
 80103a0:	e0bffd17 	ldw	r2,-12(fp)
 80103a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80103a8:	e0bffc17 	ldw	r2,-16(fp)
 80103ac:	10800017 	ldw	r2,0(r2)
 80103b0:	e0fffd17 	ldw	r3,-12(fp)
 80103b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80103b8:	e0bffc17 	ldw	r2,-16(fp)
 80103bc:	e0fffd17 	ldw	r3,-12(fp)
 80103c0:	10c00015 	stw	r3,0(r2)

  return 0;  
 80103c4:	0005883a 	mov	r2,zero
}
 80103c8:	e037883a 	mov	sp,fp
 80103cc:	dfc00117 	ldw	ra,4(sp)
 80103d0:	df000017 	ldw	fp,0(sp)
 80103d4:	dec00204 	addi	sp,sp,8
 80103d8:	f800283a 	ret

080103dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80103dc:	defffd04 	addi	sp,sp,-12
 80103e0:	dfc00215 	stw	ra,8(sp)
 80103e4:	df000115 	stw	fp,4(sp)
 80103e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80103ec:	00820074 	movhi	r2,2049
 80103f0:	1084d404 	addi	r2,r2,4944
 80103f4:	e0bfff15 	stw	r2,-4(fp)
 80103f8:	00000606 	br	8010414 <_do_ctors+0x38>
        (*ctor) (); 
 80103fc:	e0bfff17 	ldw	r2,-4(fp)
 8010400:	10800017 	ldw	r2,0(r2)
 8010404:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010408:	e0bfff17 	ldw	r2,-4(fp)
 801040c:	10bfff04 	addi	r2,r2,-4
 8010410:	e0bfff15 	stw	r2,-4(fp)
 8010414:	e0ffff17 	ldw	r3,-4(fp)
 8010418:	00820074 	movhi	r2,2049
 801041c:	1084d504 	addi	r2,r2,4948
 8010420:	18bff62e 	bgeu	r3,r2,80103fc <__alt_data_end+0xfc0103fc>
        (*ctor) (); 
}
 8010424:	e037883a 	mov	sp,fp
 8010428:	dfc00117 	ldw	ra,4(sp)
 801042c:	df000017 	ldw	fp,0(sp)
 8010430:	dec00204 	addi	sp,sp,8
 8010434:	f800283a 	ret

08010438 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010438:	defffd04 	addi	sp,sp,-12
 801043c:	dfc00215 	stw	ra,8(sp)
 8010440:	df000115 	stw	fp,4(sp)
 8010444:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010448:	00820074 	movhi	r2,2049
 801044c:	1084d404 	addi	r2,r2,4944
 8010450:	e0bfff15 	stw	r2,-4(fp)
 8010454:	00000606 	br	8010470 <_do_dtors+0x38>
        (*dtor) (); 
 8010458:	e0bfff17 	ldw	r2,-4(fp)
 801045c:	10800017 	ldw	r2,0(r2)
 8010460:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010464:	e0bfff17 	ldw	r2,-4(fp)
 8010468:	10bfff04 	addi	r2,r2,-4
 801046c:	e0bfff15 	stw	r2,-4(fp)
 8010470:	e0ffff17 	ldw	r3,-4(fp)
 8010474:	00820074 	movhi	r2,2049
 8010478:	1084d504 	addi	r2,r2,4948
 801047c:	18bff62e 	bgeu	r3,r2,8010458 <__alt_data_end+0xfc010458>
        (*dtor) (); 
}
 8010480:	e037883a 	mov	sp,fp
 8010484:	dfc00117 	ldw	ra,4(sp)
 8010488:	df000017 	ldw	fp,0(sp)
 801048c:	dec00204 	addi	sp,sp,8
 8010490:	f800283a 	ret

08010494 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8010494:	deffff04 	addi	sp,sp,-4
 8010498:	df000015 	stw	fp,0(sp)
 801049c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80104a0:	e037883a 	mov	sp,fp
 80104a4:	df000017 	ldw	fp,0(sp)
 80104a8:	dec00104 	addi	sp,sp,4
 80104ac:	f800283a 	ret

080104b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80104b0:	defff904 	addi	sp,sp,-28
 80104b4:	dfc00615 	stw	ra,24(sp)
 80104b8:	df000515 	stw	fp,20(sp)
 80104bc:	df000504 	addi	fp,sp,20
 80104c0:	e13ffc15 	stw	r4,-16(fp)
 80104c4:	e17ffd15 	stw	r5,-12(fp)
 80104c8:	e1bffe15 	stw	r6,-8(fp)
 80104cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80104d0:	e0800217 	ldw	r2,8(fp)
 80104d4:	d8800015 	stw	r2,0(sp)
 80104d8:	e13ffc17 	ldw	r4,-16(fp)
 80104dc:	e17ffd17 	ldw	r5,-12(fp)
 80104e0:	e1bffe17 	ldw	r6,-8(fp)
 80104e4:	e1ffff17 	ldw	r7,-4(fp)
 80104e8:	80106900 	call	8010690 <alt_iic_isr_register>
}  
 80104ec:	e037883a 	mov	sp,fp
 80104f0:	dfc00117 	ldw	ra,4(sp)
 80104f4:	df000017 	ldw	fp,0(sp)
 80104f8:	dec00204 	addi	sp,sp,8
 80104fc:	f800283a 	ret

08010500 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8010500:	defff904 	addi	sp,sp,-28
 8010504:	df000615 	stw	fp,24(sp)
 8010508:	df000604 	addi	fp,sp,24
 801050c:	e13ffe15 	stw	r4,-8(fp)
 8010510:	e17fff15 	stw	r5,-4(fp)
 8010514:	e0bfff17 	ldw	r2,-4(fp)
 8010518:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801051c:	0005303a 	rdctl	r2,status
 8010520:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010524:	e0fffb17 	ldw	r3,-20(fp)
 8010528:	00bfff84 	movi	r2,-2
 801052c:	1884703a 	and	r2,r3,r2
 8010530:	1001703a 	wrctl	status,r2
  
  return context;
 8010534:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010538:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 801053c:	e0bffa17 	ldw	r2,-24(fp)
 8010540:	00c00044 	movi	r3,1
 8010544:	1884983a 	sll	r2,r3,r2
 8010548:	1007883a 	mov	r3,r2
 801054c:	00820074 	movhi	r2,2049
 8010550:	1094f404 	addi	r2,r2,21456
 8010554:	10800017 	ldw	r2,0(r2)
 8010558:	1886b03a 	or	r3,r3,r2
 801055c:	00820074 	movhi	r2,2049
 8010560:	1094f404 	addi	r2,r2,21456
 8010564:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010568:	00820074 	movhi	r2,2049
 801056c:	1094f404 	addi	r2,r2,21456
 8010570:	10800017 	ldw	r2,0(r2)
 8010574:	100170fa 	wrctl	ienable,r2
 8010578:	e0bffc17 	ldw	r2,-16(fp)
 801057c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010580:	e0bffd17 	ldw	r2,-12(fp)
 8010584:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010588:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801058c:	0001883a 	nop
}
 8010590:	e037883a 	mov	sp,fp
 8010594:	df000017 	ldw	fp,0(sp)
 8010598:	dec00104 	addi	sp,sp,4
 801059c:	f800283a 	ret

080105a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80105a0:	defff904 	addi	sp,sp,-28
 80105a4:	df000615 	stw	fp,24(sp)
 80105a8:	df000604 	addi	fp,sp,24
 80105ac:	e13ffe15 	stw	r4,-8(fp)
 80105b0:	e17fff15 	stw	r5,-4(fp)
 80105b4:	e0bfff17 	ldw	r2,-4(fp)
 80105b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80105bc:	0005303a 	rdctl	r2,status
 80105c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80105c4:	e0fffb17 	ldw	r3,-20(fp)
 80105c8:	00bfff84 	movi	r2,-2
 80105cc:	1884703a 	and	r2,r3,r2
 80105d0:	1001703a 	wrctl	status,r2
  
  return context;
 80105d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80105d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80105dc:	e0bffa17 	ldw	r2,-24(fp)
 80105e0:	00c00044 	movi	r3,1
 80105e4:	1884983a 	sll	r2,r3,r2
 80105e8:	0084303a 	nor	r2,zero,r2
 80105ec:	1007883a 	mov	r3,r2
 80105f0:	00820074 	movhi	r2,2049
 80105f4:	1094f404 	addi	r2,r2,21456
 80105f8:	10800017 	ldw	r2,0(r2)
 80105fc:	1886703a 	and	r3,r3,r2
 8010600:	00820074 	movhi	r2,2049
 8010604:	1094f404 	addi	r2,r2,21456
 8010608:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801060c:	00820074 	movhi	r2,2049
 8010610:	1094f404 	addi	r2,r2,21456
 8010614:	10800017 	ldw	r2,0(r2)
 8010618:	100170fa 	wrctl	ienable,r2
 801061c:	e0bffc17 	ldw	r2,-16(fp)
 8010620:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010624:	e0bffd17 	ldw	r2,-12(fp)
 8010628:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801062c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8010630:	0001883a 	nop
}
 8010634:	e037883a 	mov	sp,fp
 8010638:	df000017 	ldw	fp,0(sp)
 801063c:	dec00104 	addi	sp,sp,4
 8010640:	f800283a 	ret

08010644 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010644:	defffc04 	addi	sp,sp,-16
 8010648:	df000315 	stw	fp,12(sp)
 801064c:	df000304 	addi	fp,sp,12
 8010650:	e13ffe15 	stw	r4,-8(fp)
 8010654:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010658:	000530fa 	rdctl	r2,ienable
 801065c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8010660:	e0bfff17 	ldw	r2,-4(fp)
 8010664:	00c00044 	movi	r3,1
 8010668:	1884983a 	sll	r2,r3,r2
 801066c:	1007883a 	mov	r3,r2
 8010670:	e0bffd17 	ldw	r2,-12(fp)
 8010674:	1884703a 	and	r2,r3,r2
 8010678:	1004c03a 	cmpne	r2,r2,zero
 801067c:	10803fcc 	andi	r2,r2,255
}
 8010680:	e037883a 	mov	sp,fp
 8010684:	df000017 	ldw	fp,0(sp)
 8010688:	dec00104 	addi	sp,sp,4
 801068c:	f800283a 	ret

08010690 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010690:	defff504 	addi	sp,sp,-44
 8010694:	dfc00a15 	stw	ra,40(sp)
 8010698:	df000915 	stw	fp,36(sp)
 801069c:	df000904 	addi	fp,sp,36
 80106a0:	e13ffc15 	stw	r4,-16(fp)
 80106a4:	e17ffd15 	stw	r5,-12(fp)
 80106a8:	e1bffe15 	stw	r6,-8(fp)
 80106ac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80106b0:	00bffa84 	movi	r2,-22
 80106b4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80106b8:	e0bffd17 	ldw	r2,-12(fp)
 80106bc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80106c0:	e0bff817 	ldw	r2,-32(fp)
 80106c4:	10800808 	cmpgei	r2,r2,32
 80106c8:	1000271e 	bne	r2,zero,8010768 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80106cc:	0005303a 	rdctl	r2,status
 80106d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80106d4:	e0fffa17 	ldw	r3,-24(fp)
 80106d8:	00bfff84 	movi	r2,-2
 80106dc:	1884703a 	and	r2,r3,r2
 80106e0:	1001703a 	wrctl	status,r2
  
  return context;
 80106e4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80106e8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 80106ec:	00820074 	movhi	r2,2049
 80106f0:	10950104 	addi	r2,r2,21508
 80106f4:	e0fff817 	ldw	r3,-32(fp)
 80106f8:	180690fa 	slli	r3,r3,3
 80106fc:	10c5883a 	add	r2,r2,r3
 8010700:	e0fffe17 	ldw	r3,-8(fp)
 8010704:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010708:	00820074 	movhi	r2,2049
 801070c:	10950104 	addi	r2,r2,21508
 8010710:	e0fff817 	ldw	r3,-32(fp)
 8010714:	180690fa 	slli	r3,r3,3
 8010718:	10c5883a 	add	r2,r2,r3
 801071c:	10800104 	addi	r2,r2,4
 8010720:	e0ffff17 	ldw	r3,-4(fp)
 8010724:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010728:	e0bffe17 	ldw	r2,-8(fp)
 801072c:	10000526 	beq	r2,zero,8010744 <alt_iic_isr_register+0xb4>
 8010730:	e0bff817 	ldw	r2,-32(fp)
 8010734:	e13ffc17 	ldw	r4,-16(fp)
 8010738:	100b883a 	mov	r5,r2
 801073c:	80105000 	call	8010500 <alt_ic_irq_enable>
 8010740:	00000406 	br	8010754 <alt_iic_isr_register+0xc4>
 8010744:	e0bff817 	ldw	r2,-32(fp)
 8010748:	e13ffc17 	ldw	r4,-16(fp)
 801074c:	100b883a 	mov	r5,r2
 8010750:	80105a00 	call	80105a0 <alt_ic_irq_disable>
 8010754:	e0bff715 	stw	r2,-36(fp)
 8010758:	e0bff917 	ldw	r2,-28(fp)
 801075c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010760:	e0bffb17 	ldw	r2,-20(fp)
 8010764:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010768:	e0bff717 	ldw	r2,-36(fp)
}
 801076c:	e037883a 	mov	sp,fp
 8010770:	dfc00117 	ldw	ra,4(sp)
 8010774:	df000017 	ldw	fp,0(sp)
 8010778:	dec00204 	addi	sp,sp,8
 801077c:	f800283a 	ret

08010780 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8010780:	defff804 	addi	sp,sp,-32
 8010784:	dfc00715 	stw	ra,28(sp)
 8010788:	df000615 	stw	fp,24(sp)
 801078c:	dc000515 	stw	r16,20(sp)
 8010790:	df000604 	addi	fp,sp,24
 8010794:	e13ffb15 	stw	r4,-20(fp)
 8010798:	e17ffc15 	stw	r5,-16(fp)
 801079c:	e1bffd15 	stw	r6,-12(fp)
 80107a0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80107a4:	e13ffc17 	ldw	r4,-16(fp)
 80107a8:	e17ffd17 	ldw	r5,-12(fp)
 80107ac:	e1bffe17 	ldw	r6,-8(fp)
 80107b0:	8010a1c0 	call	8010a1c <open>
 80107b4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80107b8:	e0bffa17 	ldw	r2,-24(fp)
 80107bc:	10002216 	blt	r2,zero,8010848 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80107c0:	04020074 	movhi	r16,2049
 80107c4:	8409a604 	addi	r16,r16,9880
 80107c8:	e0bffa17 	ldw	r2,-24(fp)
 80107cc:	1009883a 	mov	r4,r2
 80107d0:	01400304 	movi	r5,12
 80107d4:	800c2ec0 	call	800c2ec <__mulsi3>
 80107d8:	8085883a 	add	r2,r16,r2
 80107dc:	10c00017 	ldw	r3,0(r2)
 80107e0:	e0bffb17 	ldw	r2,-20(fp)
 80107e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80107e8:	04020074 	movhi	r16,2049
 80107ec:	8409a604 	addi	r16,r16,9880
 80107f0:	e0bffa17 	ldw	r2,-24(fp)
 80107f4:	1009883a 	mov	r4,r2
 80107f8:	01400304 	movi	r5,12
 80107fc:	800c2ec0 	call	800c2ec <__mulsi3>
 8010800:	8085883a 	add	r2,r16,r2
 8010804:	10800104 	addi	r2,r2,4
 8010808:	10c00017 	ldw	r3,0(r2)
 801080c:	e0bffb17 	ldw	r2,-20(fp)
 8010810:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010814:	04020074 	movhi	r16,2049
 8010818:	8409a604 	addi	r16,r16,9880
 801081c:	e0bffa17 	ldw	r2,-24(fp)
 8010820:	1009883a 	mov	r4,r2
 8010824:	01400304 	movi	r5,12
 8010828:	800c2ec0 	call	800c2ec <__mulsi3>
 801082c:	8085883a 	add	r2,r16,r2
 8010830:	10800204 	addi	r2,r2,8
 8010834:	10c00017 	ldw	r3,0(r2)
 8010838:	e0bffb17 	ldw	r2,-20(fp)
 801083c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8010840:	e13ffa17 	ldw	r4,-24(fp)
 8010844:	800f2840 	call	800f284 <alt_release_fd>
  }
} 
 8010848:	e6ffff04 	addi	sp,fp,-4
 801084c:	dfc00217 	ldw	ra,8(sp)
 8010850:	df000117 	ldw	fp,4(sp)
 8010854:	dc000017 	ldw	r16,0(sp)
 8010858:	dec00304 	addi	sp,sp,12
 801085c:	f800283a 	ret

08010860 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8010860:	defffb04 	addi	sp,sp,-20
 8010864:	dfc00415 	stw	ra,16(sp)
 8010868:	df000315 	stw	fp,12(sp)
 801086c:	df000304 	addi	fp,sp,12
 8010870:	e13ffd15 	stw	r4,-12(fp)
 8010874:	e17ffe15 	stw	r5,-8(fp)
 8010878:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801087c:	01020074 	movhi	r4,2049
 8010880:	2109a904 	addi	r4,r4,9892
 8010884:	e17ffd17 	ldw	r5,-12(fp)
 8010888:	01800044 	movi	r6,1
 801088c:	01c07fc4 	movi	r7,511
 8010890:	80107800 	call	8010780 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8010894:	01020074 	movhi	r4,2049
 8010898:	2109a604 	addi	r4,r4,9880
 801089c:	e17ffe17 	ldw	r5,-8(fp)
 80108a0:	000d883a 	mov	r6,zero
 80108a4:	01c07fc4 	movi	r7,511
 80108a8:	80107800 	call	8010780 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80108ac:	01020074 	movhi	r4,2049
 80108b0:	2109ac04 	addi	r4,r4,9904
 80108b4:	e17fff17 	ldw	r5,-4(fp)
 80108b8:	01800044 	movi	r6,1
 80108bc:	01c07fc4 	movi	r7,511
 80108c0:	80107800 	call	8010780 <alt_open_fd>
}  
 80108c4:	e037883a 	mov	sp,fp
 80108c8:	dfc00117 	ldw	ra,4(sp)
 80108cc:	df000017 	ldw	fp,0(sp)
 80108d0:	dec00204 	addi	sp,sp,8
 80108d4:	f800283a 	ret

080108d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80108d8:	defffe04 	addi	sp,sp,-8
 80108dc:	dfc00115 	stw	ra,4(sp)
 80108e0:	df000015 	stw	fp,0(sp)
 80108e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80108e8:	00820074 	movhi	r2,2049
 80108ec:	108e2904 	addi	r2,r2,14500
 80108f0:	10800017 	ldw	r2,0(r2)
 80108f4:	10000526 	beq	r2,zero,801090c <alt_get_errno+0x34>
 80108f8:	00820074 	movhi	r2,2049
 80108fc:	108e2904 	addi	r2,r2,14500
 8010900:	10800017 	ldw	r2,0(r2)
 8010904:	103ee83a 	callr	r2
 8010908:	00000206 	br	8010914 <alt_get_errno+0x3c>
 801090c:	00820074 	movhi	r2,2049
 8010910:	1094f004 	addi	r2,r2,21440
}
 8010914:	e037883a 	mov	sp,fp
 8010918:	dfc00117 	ldw	ra,4(sp)
 801091c:	df000017 	ldw	fp,0(sp)
 8010920:	dec00204 	addi	sp,sp,8
 8010924:	f800283a 	ret

08010928 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8010928:	defffb04 	addi	sp,sp,-20
 801092c:	dfc00415 	stw	ra,16(sp)
 8010930:	df000315 	stw	fp,12(sp)
 8010934:	dc000215 	stw	r16,8(sp)
 8010938:	df000304 	addi	fp,sp,12
 801093c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8010940:	e0bffe17 	ldw	r2,-8(fp)
 8010944:	10800217 	ldw	r2,8(r2)
 8010948:	10d00034 	orhi	r3,r2,16384
 801094c:	e0bffe17 	ldw	r2,-8(fp)
 8010950:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010954:	e03ffd15 	stw	zero,-12(fp)
 8010958:	00002306 	br	80109e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801095c:	04020074 	movhi	r16,2049
 8010960:	8409a604 	addi	r16,r16,9880
 8010964:	e0bffd17 	ldw	r2,-12(fp)
 8010968:	1009883a 	mov	r4,r2
 801096c:	01400304 	movi	r5,12
 8010970:	800c2ec0 	call	800c2ec <__mulsi3>
 8010974:	8085883a 	add	r2,r16,r2
 8010978:	10c00017 	ldw	r3,0(r2)
 801097c:	e0bffe17 	ldw	r2,-8(fp)
 8010980:	10800017 	ldw	r2,0(r2)
 8010984:	1880151e 	bne	r3,r2,80109dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010988:	04020074 	movhi	r16,2049
 801098c:	8409a604 	addi	r16,r16,9880
 8010990:	e0bffd17 	ldw	r2,-12(fp)
 8010994:	1009883a 	mov	r4,r2
 8010998:	01400304 	movi	r5,12
 801099c:	800c2ec0 	call	800c2ec <__mulsi3>
 80109a0:	8085883a 	add	r2,r16,r2
 80109a4:	10800204 	addi	r2,r2,8
 80109a8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80109ac:	10000b0e 	bge	r2,zero,80109dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80109b0:	e13ffd17 	ldw	r4,-12(fp)
 80109b4:	01400304 	movi	r5,12
 80109b8:	800c2ec0 	call	800c2ec <__mulsi3>
 80109bc:	1007883a 	mov	r3,r2
 80109c0:	00820074 	movhi	r2,2049
 80109c4:	1089a604 	addi	r2,r2,9880
 80109c8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80109cc:	e0bffe17 	ldw	r2,-8(fp)
 80109d0:	18800226 	beq	r3,r2,80109dc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80109d4:	00bffcc4 	movi	r2,-13
 80109d8:	00000a06 	br	8010a04 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80109dc:	e0bffd17 	ldw	r2,-12(fp)
 80109e0:	10800044 	addi	r2,r2,1
 80109e4:	e0bffd15 	stw	r2,-12(fp)
 80109e8:	00820074 	movhi	r2,2049
 80109ec:	108e2804 	addi	r2,r2,14496
 80109f0:	10800017 	ldw	r2,0(r2)
 80109f4:	1007883a 	mov	r3,r2
 80109f8:	e0bffd17 	ldw	r2,-12(fp)
 80109fc:	18bfd72e 	bgeu	r3,r2,801095c <__alt_data_end+0xfc01095c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8010a00:	0005883a 	mov	r2,zero
}
 8010a04:	e6ffff04 	addi	sp,fp,-4
 8010a08:	dfc00217 	ldw	ra,8(sp)
 8010a0c:	df000117 	ldw	fp,4(sp)
 8010a10:	dc000017 	ldw	r16,0(sp)
 8010a14:	dec00304 	addi	sp,sp,12
 8010a18:	f800283a 	ret

08010a1c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8010a1c:	defff604 	addi	sp,sp,-40
 8010a20:	dfc00915 	stw	ra,36(sp)
 8010a24:	df000815 	stw	fp,32(sp)
 8010a28:	df000804 	addi	fp,sp,32
 8010a2c:	e13ffd15 	stw	r4,-12(fp)
 8010a30:	e17ffe15 	stw	r5,-8(fp)
 8010a34:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8010a38:	00bfffc4 	movi	r2,-1
 8010a3c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8010a40:	00bffb44 	movi	r2,-19
 8010a44:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8010a48:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8010a4c:	e13ffd17 	ldw	r4,-12(fp)
 8010a50:	01420074 	movhi	r5,2049
 8010a54:	294e2604 	addi	r5,r5,14488
 8010a58:	8010d380 	call	8010d38 <alt_find_dev>
 8010a5c:	e0bff815 	stw	r2,-32(fp)
 8010a60:	e0bff817 	ldw	r2,-32(fp)
 8010a64:	1000051e 	bne	r2,zero,8010a7c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8010a68:	e13ffd17 	ldw	r4,-12(fp)
 8010a6c:	8010dc80 	call	8010dc8 <alt_find_file>
 8010a70:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8010a74:	00800044 	movi	r2,1
 8010a78:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8010a7c:	e0bff817 	ldw	r2,-32(fp)
 8010a80:	10002b26 	beq	r2,zero,8010b30 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8010a84:	e13ff817 	ldw	r4,-32(fp)
 8010a88:	8010edc0 	call	8010edc <alt_get_fd>
 8010a8c:	e0bff915 	stw	r2,-28(fp)
 8010a90:	e0bff917 	ldw	r2,-28(fp)
 8010a94:	1000030e 	bge	r2,zero,8010aa4 <open+0x88>
    {
      status = index;
 8010a98:	e0bff917 	ldw	r2,-28(fp)
 8010a9c:	e0bffa15 	stw	r2,-24(fp)
 8010aa0:	00002506 	br	8010b38 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8010aa4:	e13ff917 	ldw	r4,-28(fp)
 8010aa8:	01400304 	movi	r5,12
 8010aac:	800c2ec0 	call	800c2ec <__mulsi3>
 8010ab0:	1007883a 	mov	r3,r2
 8010ab4:	00820074 	movhi	r2,2049
 8010ab8:	1089a604 	addi	r2,r2,9880
 8010abc:	1885883a 	add	r2,r3,r2
 8010ac0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8010ac4:	e0fffe17 	ldw	r3,-8(fp)
 8010ac8:	00900034 	movhi	r2,16384
 8010acc:	10bfffc4 	addi	r2,r2,-1
 8010ad0:	1886703a 	and	r3,r3,r2
 8010ad4:	e0bffc17 	ldw	r2,-16(fp)
 8010ad8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8010adc:	e0bffb17 	ldw	r2,-20(fp)
 8010ae0:	1000051e 	bne	r2,zero,8010af8 <open+0xdc>
 8010ae4:	e13ffc17 	ldw	r4,-16(fp)
 8010ae8:	80109280 	call	8010928 <alt_file_locked>
 8010aec:	e0bffa15 	stw	r2,-24(fp)
 8010af0:	e0bffa17 	ldw	r2,-24(fp)
 8010af4:	10001016 	blt	r2,zero,8010b38 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8010af8:	e0bff817 	ldw	r2,-32(fp)
 8010afc:	10800317 	ldw	r2,12(r2)
 8010b00:	10000826 	beq	r2,zero,8010b24 <open+0x108>
 8010b04:	e0bff817 	ldw	r2,-32(fp)
 8010b08:	10800317 	ldw	r2,12(r2)
 8010b0c:	e13ffc17 	ldw	r4,-16(fp)
 8010b10:	e17ffd17 	ldw	r5,-12(fp)
 8010b14:	e1bffe17 	ldw	r6,-8(fp)
 8010b18:	e1ffff17 	ldw	r7,-4(fp)
 8010b1c:	103ee83a 	callr	r2
 8010b20:	00000106 	br	8010b28 <open+0x10c>
 8010b24:	0005883a 	mov	r2,zero
 8010b28:	e0bffa15 	stw	r2,-24(fp)
 8010b2c:	00000206 	br	8010b38 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8010b30:	00bffb44 	movi	r2,-19
 8010b34:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8010b38:	e0bffa17 	ldw	r2,-24(fp)
 8010b3c:	1000090e 	bge	r2,zero,8010b64 <open+0x148>
  {
    alt_release_fd (index);  
 8010b40:	e13ff917 	ldw	r4,-28(fp)
 8010b44:	800f2840 	call	800f284 <alt_release_fd>
    ALT_ERRNO = -status;
 8010b48:	80108d80 	call	80108d8 <alt_get_errno>
 8010b4c:	1007883a 	mov	r3,r2
 8010b50:	e0bffa17 	ldw	r2,-24(fp)
 8010b54:	0085c83a 	sub	r2,zero,r2
 8010b58:	18800015 	stw	r2,0(r3)
    return -1;
 8010b5c:	00bfffc4 	movi	r2,-1
 8010b60:	00000106 	br	8010b68 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8010b64:	e0bff917 	ldw	r2,-28(fp)
}
 8010b68:	e037883a 	mov	sp,fp
 8010b6c:	dfc00117 	ldw	ra,4(sp)
 8010b70:	df000017 	ldw	fp,0(sp)
 8010b74:	dec00204 	addi	sp,sp,8
 8010b78:	f800283a 	ret

08010b7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010b7c:	defffa04 	addi	sp,sp,-24
 8010b80:	df000515 	stw	fp,20(sp)
 8010b84:	df000504 	addi	fp,sp,20
 8010b88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010b8c:	0005303a 	rdctl	r2,status
 8010b90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010b94:	e0fffc17 	ldw	r3,-16(fp)
 8010b98:	00bfff84 	movi	r2,-2
 8010b9c:	1884703a 	and	r2,r3,r2
 8010ba0:	1001703a 	wrctl	status,r2
  
  return context;
 8010ba4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010ba8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8010bac:	e0bfff17 	ldw	r2,-4(fp)
 8010bb0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010bb4:	e0bffd17 	ldw	r2,-12(fp)
 8010bb8:	10800017 	ldw	r2,0(r2)
 8010bbc:	e0fffd17 	ldw	r3,-12(fp)
 8010bc0:	18c00117 	ldw	r3,4(r3)
 8010bc4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010bc8:	e0bffd17 	ldw	r2,-12(fp)
 8010bcc:	10800117 	ldw	r2,4(r2)
 8010bd0:	e0fffd17 	ldw	r3,-12(fp)
 8010bd4:	18c00017 	ldw	r3,0(r3)
 8010bd8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010bdc:	e0bffd17 	ldw	r2,-12(fp)
 8010be0:	e0fffd17 	ldw	r3,-12(fp)
 8010be4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010be8:	e0bffd17 	ldw	r2,-12(fp)
 8010bec:	e0fffd17 	ldw	r3,-12(fp)
 8010bf0:	10c00015 	stw	r3,0(r2)
 8010bf4:	e0bffb17 	ldw	r2,-20(fp)
 8010bf8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010bfc:	e0bffe17 	ldw	r2,-8(fp)
 8010c00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010c04:	e037883a 	mov	sp,fp
 8010c08:	df000017 	ldw	fp,0(sp)
 8010c0c:	dec00104 	addi	sp,sp,4
 8010c10:	f800283a 	ret

08010c14 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010c14:	defffb04 	addi	sp,sp,-20
 8010c18:	dfc00415 	stw	ra,16(sp)
 8010c1c:	df000315 	stw	fp,12(sp)
 8010c20:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010c24:	d0a00e17 	ldw	r2,-32712(gp)
 8010c28:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010c2c:	d0a6d817 	ldw	r2,-25760(gp)
 8010c30:	10800044 	addi	r2,r2,1
 8010c34:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010c38:	00002e06 	br	8010cf4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010c3c:	e0bffd17 	ldw	r2,-12(fp)
 8010c40:	10800017 	ldw	r2,0(r2)
 8010c44:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010c48:	e0bffd17 	ldw	r2,-12(fp)
 8010c4c:	10800403 	ldbu	r2,16(r2)
 8010c50:	10803fcc 	andi	r2,r2,255
 8010c54:	10000426 	beq	r2,zero,8010c68 <alt_tick+0x54>
 8010c58:	d0a6d817 	ldw	r2,-25760(gp)
 8010c5c:	1000021e 	bne	r2,zero,8010c68 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010c60:	e0bffd17 	ldw	r2,-12(fp)
 8010c64:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010c68:	e0bffd17 	ldw	r2,-12(fp)
 8010c6c:	10800217 	ldw	r2,8(r2)
 8010c70:	d0e6d817 	ldw	r3,-25760(gp)
 8010c74:	18801d36 	bltu	r3,r2,8010cec <alt_tick+0xd8>
 8010c78:	e0bffd17 	ldw	r2,-12(fp)
 8010c7c:	10800403 	ldbu	r2,16(r2)
 8010c80:	10803fcc 	andi	r2,r2,255
 8010c84:	1000191e 	bne	r2,zero,8010cec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010c88:	e0bffd17 	ldw	r2,-12(fp)
 8010c8c:	10800317 	ldw	r2,12(r2)
 8010c90:	e0fffd17 	ldw	r3,-12(fp)
 8010c94:	18c00517 	ldw	r3,20(r3)
 8010c98:	1809883a 	mov	r4,r3
 8010c9c:	103ee83a 	callr	r2
 8010ca0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010ca4:	e0bfff17 	ldw	r2,-4(fp)
 8010ca8:	1000031e 	bne	r2,zero,8010cb8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010cac:	e13ffd17 	ldw	r4,-12(fp)
 8010cb0:	8010b7c0 	call	8010b7c <alt_alarm_stop>
 8010cb4:	00000d06 	br	8010cec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010cb8:	e0bffd17 	ldw	r2,-12(fp)
 8010cbc:	10c00217 	ldw	r3,8(r2)
 8010cc0:	e0bfff17 	ldw	r2,-4(fp)
 8010cc4:	1887883a 	add	r3,r3,r2
 8010cc8:	e0bffd17 	ldw	r2,-12(fp)
 8010ccc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010cd0:	e0bffd17 	ldw	r2,-12(fp)
 8010cd4:	10c00217 	ldw	r3,8(r2)
 8010cd8:	d0a6d817 	ldw	r2,-25760(gp)
 8010cdc:	1880032e 	bgeu	r3,r2,8010cec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010ce0:	e0bffd17 	ldw	r2,-12(fp)
 8010ce4:	00c00044 	movi	r3,1
 8010ce8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010cec:	e0bffe17 	ldw	r2,-8(fp)
 8010cf0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010cf4:	e0fffd17 	ldw	r3,-12(fp)
 8010cf8:	d0a00e04 	addi	r2,gp,-32712
 8010cfc:	18bfcf1e 	bne	r3,r2,8010c3c <__alt_data_end+0xfc010c3c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010d00:	0001883a 	nop
}
 8010d04:	e037883a 	mov	sp,fp
 8010d08:	dfc00117 	ldw	ra,4(sp)
 8010d0c:	df000017 	ldw	fp,0(sp)
 8010d10:	dec00204 	addi	sp,sp,8
 8010d14:	f800283a 	ret

08010d18 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8010d18:	deffff04 	addi	sp,sp,-4
 8010d1c:	df000015 	stw	fp,0(sp)
 8010d20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8010d24:	000170fa 	wrctl	ienable,zero
}
 8010d28:	e037883a 	mov	sp,fp
 8010d2c:	df000017 	ldw	fp,0(sp)
 8010d30:	dec00104 	addi	sp,sp,4
 8010d34:	f800283a 	ret

08010d38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010d38:	defffa04 	addi	sp,sp,-24
 8010d3c:	dfc00515 	stw	ra,20(sp)
 8010d40:	df000415 	stw	fp,16(sp)
 8010d44:	df000404 	addi	fp,sp,16
 8010d48:	e13ffe15 	stw	r4,-8(fp)
 8010d4c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010d50:	e0bfff17 	ldw	r2,-4(fp)
 8010d54:	10800017 	ldw	r2,0(r2)
 8010d58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010d5c:	e13ffe17 	ldw	r4,-8(fp)
 8010d60:	80022e00 	call	80022e0 <strlen>
 8010d64:	10800044 	addi	r2,r2,1
 8010d68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010d6c:	00000d06 	br	8010da4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010d70:	e0bffc17 	ldw	r2,-16(fp)
 8010d74:	10c00217 	ldw	r3,8(r2)
 8010d78:	e0bffd17 	ldw	r2,-12(fp)
 8010d7c:	1809883a 	mov	r4,r3
 8010d80:	e17ffe17 	ldw	r5,-8(fp)
 8010d84:	100d883a 	mov	r6,r2
 8010d88:	8010ffc0 	call	8010ffc <memcmp>
 8010d8c:	1000021e 	bne	r2,zero,8010d98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010d90:	e0bffc17 	ldw	r2,-16(fp)
 8010d94:	00000706 	br	8010db4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010d98:	e0bffc17 	ldw	r2,-16(fp)
 8010d9c:	10800017 	ldw	r2,0(r2)
 8010da0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010da4:	e0fffc17 	ldw	r3,-16(fp)
 8010da8:	e0bfff17 	ldw	r2,-4(fp)
 8010dac:	18bff01e 	bne	r3,r2,8010d70 <__alt_data_end+0xfc010d70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010db0:	0005883a 	mov	r2,zero
}
 8010db4:	e037883a 	mov	sp,fp
 8010db8:	dfc00117 	ldw	ra,4(sp)
 8010dbc:	df000017 	ldw	fp,0(sp)
 8010dc0:	dec00204 	addi	sp,sp,8
 8010dc4:	f800283a 	ret

08010dc8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8010dc8:	defffb04 	addi	sp,sp,-20
 8010dcc:	dfc00415 	stw	ra,16(sp)
 8010dd0:	df000315 	stw	fp,12(sp)
 8010dd4:	df000304 	addi	fp,sp,12
 8010dd8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8010ddc:	00820074 	movhi	r2,2049
 8010de0:	108e2404 	addi	r2,r2,14480
 8010de4:	10800017 	ldw	r2,0(r2)
 8010de8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010dec:	00003106 	br	8010eb4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8010df0:	e0bffd17 	ldw	r2,-12(fp)
 8010df4:	10800217 	ldw	r2,8(r2)
 8010df8:	1009883a 	mov	r4,r2
 8010dfc:	80022e00 	call	80022e0 <strlen>
 8010e00:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8010e04:	e0bffd17 	ldw	r2,-12(fp)
 8010e08:	10c00217 	ldw	r3,8(r2)
 8010e0c:	e0bffe17 	ldw	r2,-8(fp)
 8010e10:	10bfffc4 	addi	r2,r2,-1
 8010e14:	1885883a 	add	r2,r3,r2
 8010e18:	10800003 	ldbu	r2,0(r2)
 8010e1c:	10803fcc 	andi	r2,r2,255
 8010e20:	1080201c 	xori	r2,r2,128
 8010e24:	10bfe004 	addi	r2,r2,-128
 8010e28:	10800bd8 	cmpnei	r2,r2,47
 8010e2c:	1000031e 	bne	r2,zero,8010e3c <alt_find_file+0x74>
    {
      len -= 1;
 8010e30:	e0bffe17 	ldw	r2,-8(fp)
 8010e34:	10bfffc4 	addi	r2,r2,-1
 8010e38:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010e3c:	e0bffe17 	ldw	r2,-8(fp)
 8010e40:	e0ffff17 	ldw	r3,-4(fp)
 8010e44:	1885883a 	add	r2,r3,r2
 8010e48:	10800003 	ldbu	r2,0(r2)
 8010e4c:	10803fcc 	andi	r2,r2,255
 8010e50:	1080201c 	xori	r2,r2,128
 8010e54:	10bfe004 	addi	r2,r2,-128
 8010e58:	10800be0 	cmpeqi	r2,r2,47
 8010e5c:	1000081e 	bne	r2,zero,8010e80 <alt_find_file+0xb8>
 8010e60:	e0bffe17 	ldw	r2,-8(fp)
 8010e64:	e0ffff17 	ldw	r3,-4(fp)
 8010e68:	1885883a 	add	r2,r3,r2
 8010e6c:	10800003 	ldbu	r2,0(r2)
 8010e70:	10803fcc 	andi	r2,r2,255
 8010e74:	1080201c 	xori	r2,r2,128
 8010e78:	10bfe004 	addi	r2,r2,-128
 8010e7c:	10000a1e 	bne	r2,zero,8010ea8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8010e80:	e0bffd17 	ldw	r2,-12(fp)
 8010e84:	10c00217 	ldw	r3,8(r2)
 8010e88:	e0bffe17 	ldw	r2,-8(fp)
 8010e8c:	1809883a 	mov	r4,r3
 8010e90:	e17fff17 	ldw	r5,-4(fp)
 8010e94:	100d883a 	mov	r6,r2
 8010e98:	8010ffc0 	call	8010ffc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010e9c:	1000021e 	bne	r2,zero,8010ea8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010ea0:	e0bffd17 	ldw	r2,-12(fp)
 8010ea4:	00000806 	br	8010ec8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8010ea8:	e0bffd17 	ldw	r2,-12(fp)
 8010eac:	10800017 	ldw	r2,0(r2)
 8010eb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010eb4:	e0fffd17 	ldw	r3,-12(fp)
 8010eb8:	00820074 	movhi	r2,2049
 8010ebc:	108e2404 	addi	r2,r2,14480
 8010ec0:	18bfcb1e 	bne	r3,r2,8010df0 <__alt_data_end+0xfc010df0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8010ec4:	0005883a 	mov	r2,zero
}
 8010ec8:	e037883a 	mov	sp,fp
 8010ecc:	dfc00117 	ldw	ra,4(sp)
 8010ed0:	df000017 	ldw	fp,0(sp)
 8010ed4:	dec00204 	addi	sp,sp,8
 8010ed8:	f800283a 	ret

08010edc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8010edc:	defffa04 	addi	sp,sp,-24
 8010ee0:	dfc00515 	stw	ra,20(sp)
 8010ee4:	df000415 	stw	fp,16(sp)
 8010ee8:	dc000315 	stw	r16,12(sp)
 8010eec:	df000404 	addi	fp,sp,16
 8010ef0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8010ef4:	00bffa04 	movi	r2,-24
 8010ef8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010efc:	e03ffc15 	stw	zero,-16(fp)
 8010f00:	00002106 	br	8010f88 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8010f04:	04020074 	movhi	r16,2049
 8010f08:	8409a604 	addi	r16,r16,9880
 8010f0c:	e0bffc17 	ldw	r2,-16(fp)
 8010f10:	1009883a 	mov	r4,r2
 8010f14:	01400304 	movi	r5,12
 8010f18:	800c2ec0 	call	800c2ec <__mulsi3>
 8010f1c:	8085883a 	add	r2,r16,r2
 8010f20:	10800017 	ldw	r2,0(r2)
 8010f24:	1000151e 	bne	r2,zero,8010f7c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8010f28:	04020074 	movhi	r16,2049
 8010f2c:	8409a604 	addi	r16,r16,9880
 8010f30:	e0bffc17 	ldw	r2,-16(fp)
 8010f34:	1009883a 	mov	r4,r2
 8010f38:	01400304 	movi	r5,12
 8010f3c:	800c2ec0 	call	800c2ec <__mulsi3>
 8010f40:	8085883a 	add	r2,r16,r2
 8010f44:	e0fffe17 	ldw	r3,-8(fp)
 8010f48:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8010f4c:	00820074 	movhi	r2,2049
 8010f50:	108e2804 	addi	r2,r2,14496
 8010f54:	10c00017 	ldw	r3,0(r2)
 8010f58:	e0bffc17 	ldw	r2,-16(fp)
 8010f5c:	1880040e 	bge	r3,r2,8010f70 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8010f60:	00820074 	movhi	r2,2049
 8010f64:	108e2804 	addi	r2,r2,14496
 8010f68:	e0fffc17 	ldw	r3,-16(fp)
 8010f6c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8010f70:	e0bffc17 	ldw	r2,-16(fp)
 8010f74:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8010f78:	00000606 	br	8010f94 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010f7c:	e0bffc17 	ldw	r2,-16(fp)
 8010f80:	10800044 	addi	r2,r2,1
 8010f84:	e0bffc15 	stw	r2,-16(fp)
 8010f88:	e0bffc17 	ldw	r2,-16(fp)
 8010f8c:	10800810 	cmplti	r2,r2,32
 8010f90:	103fdc1e 	bne	r2,zero,8010f04 <__alt_data_end+0xfc010f04>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8010f94:	e0bffd17 	ldw	r2,-12(fp)
}
 8010f98:	e6ffff04 	addi	sp,fp,-4
 8010f9c:	dfc00217 	ldw	ra,8(sp)
 8010fa0:	df000117 	ldw	fp,4(sp)
 8010fa4:	dc000017 	ldw	r16,0(sp)
 8010fa8:	dec00304 	addi	sp,sp,12
 8010fac:	f800283a 	ret

08010fb0 <atexit>:
 8010fb0:	200b883a 	mov	r5,r4
 8010fb4:	000d883a 	mov	r6,zero
 8010fb8:	0009883a 	mov	r4,zero
 8010fbc:	000f883a 	mov	r7,zero
 8010fc0:	80110781 	jmpi	8011078 <__register_exitproc>

08010fc4 <exit>:
 8010fc4:	defffe04 	addi	sp,sp,-8
 8010fc8:	000b883a 	mov	r5,zero
 8010fcc:	dc000015 	stw	r16,0(sp)
 8010fd0:	dfc00115 	stw	ra,4(sp)
 8010fd4:	2021883a 	mov	r16,r4
 8010fd8:	801118c0 	call	801118c <__call_exitprocs>
 8010fdc:	00820074 	movhi	r2,2049
 8010fe0:	108e1e04 	addi	r2,r2,14456
 8010fe4:	11000017 	ldw	r4,0(r2)
 8010fe8:	20800f17 	ldw	r2,60(r4)
 8010fec:	10000126 	beq	r2,zero,8010ff4 <exit+0x30>
 8010ff0:	103ee83a 	callr	r2
 8010ff4:	8009883a 	mov	r4,r16
 8010ff8:	80113200 	call	8011320 <_exit>

08010ffc <memcmp>:
 8010ffc:	01c000c4 	movi	r7,3
 8011000:	3980192e 	bgeu	r7,r6,8011068 <memcmp+0x6c>
 8011004:	2144b03a 	or	r2,r4,r5
 8011008:	11c4703a 	and	r2,r2,r7
 801100c:	10000f26 	beq	r2,zero,801104c <memcmp+0x50>
 8011010:	20800003 	ldbu	r2,0(r4)
 8011014:	28c00003 	ldbu	r3,0(r5)
 8011018:	10c0151e 	bne	r2,r3,8011070 <memcmp+0x74>
 801101c:	31bfff84 	addi	r6,r6,-2
 8011020:	01ffffc4 	movi	r7,-1
 8011024:	00000406 	br	8011038 <memcmp+0x3c>
 8011028:	20800003 	ldbu	r2,0(r4)
 801102c:	28c00003 	ldbu	r3,0(r5)
 8011030:	31bfffc4 	addi	r6,r6,-1
 8011034:	10c00e1e 	bne	r2,r3,8011070 <memcmp+0x74>
 8011038:	21000044 	addi	r4,r4,1
 801103c:	29400044 	addi	r5,r5,1
 8011040:	31fff91e 	bne	r6,r7,8011028 <__alt_data_end+0xfc011028>
 8011044:	0005883a 	mov	r2,zero
 8011048:	f800283a 	ret
 801104c:	20c00017 	ldw	r3,0(r4)
 8011050:	28800017 	ldw	r2,0(r5)
 8011054:	1880041e 	bne	r3,r2,8011068 <memcmp+0x6c>
 8011058:	31bfff04 	addi	r6,r6,-4
 801105c:	21000104 	addi	r4,r4,4
 8011060:	29400104 	addi	r5,r5,4
 8011064:	39bff936 	bltu	r7,r6,801104c <__alt_data_end+0xfc01104c>
 8011068:	303fe91e 	bne	r6,zero,8011010 <__alt_data_end+0xfc011010>
 801106c:	003ff506 	br	8011044 <__alt_data_end+0xfc011044>
 8011070:	10c5c83a 	sub	r2,r2,r3
 8011074:	f800283a 	ret

08011078 <__register_exitproc>:
 8011078:	00820074 	movhi	r2,2049
 801107c:	defffa04 	addi	sp,sp,-24
 8011080:	108e1e04 	addi	r2,r2,14456
 8011084:	dc000315 	stw	r16,12(sp)
 8011088:	14000017 	ldw	r16,0(r2)
 801108c:	dc400415 	stw	r17,16(sp)
 8011090:	dfc00515 	stw	ra,20(sp)
 8011094:	80805217 	ldw	r2,328(r16)
 8011098:	2023883a 	mov	r17,r4
 801109c:	10003626 	beq	r2,zero,8011178 <__register_exitproc+0x100>
 80110a0:	10c00117 	ldw	r3,4(r2)
 80110a4:	010007c4 	movi	r4,31
 80110a8:	20c00e16 	blt	r4,r3,80110e4 <__register_exitproc+0x6c>
 80110ac:	1a400044 	addi	r9,r3,1
 80110b0:	8800211e 	bne	r17,zero,8011138 <__register_exitproc+0xc0>
 80110b4:	18c00084 	addi	r3,r3,2
 80110b8:	18c7883a 	add	r3,r3,r3
 80110bc:	18c7883a 	add	r3,r3,r3
 80110c0:	12400115 	stw	r9,4(r2)
 80110c4:	10c7883a 	add	r3,r2,r3
 80110c8:	19400015 	stw	r5,0(r3)
 80110cc:	0005883a 	mov	r2,zero
 80110d0:	dfc00517 	ldw	ra,20(sp)
 80110d4:	dc400417 	ldw	r17,16(sp)
 80110d8:	dc000317 	ldw	r16,12(sp)
 80110dc:	dec00604 	addi	sp,sp,24
 80110e0:	f800283a 	ret
 80110e4:	00800034 	movhi	r2,0
 80110e8:	10800004 	addi	r2,r2,0
 80110ec:	10002526 	beq	r2,zero,8011184 <__register_exitproc+0x10c>
 80110f0:	01006404 	movi	r4,400
 80110f4:	d9400015 	stw	r5,0(sp)
 80110f8:	d9800115 	stw	r6,4(sp)
 80110fc:	d9c00215 	stw	r7,8(sp)
 8011100:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011104:	d9400017 	ldw	r5,0(sp)
 8011108:	d9800117 	ldw	r6,4(sp)
 801110c:	d9c00217 	ldw	r7,8(sp)
 8011110:	10001c26 	beq	r2,zero,8011184 <__register_exitproc+0x10c>
 8011114:	80c05217 	ldw	r3,328(r16)
 8011118:	10000115 	stw	zero,4(r2)
 801111c:	02400044 	movi	r9,1
 8011120:	10c00015 	stw	r3,0(r2)
 8011124:	80805215 	stw	r2,328(r16)
 8011128:	10006215 	stw	zero,392(r2)
 801112c:	10006315 	stw	zero,396(r2)
 8011130:	0007883a 	mov	r3,zero
 8011134:	883fdf26 	beq	r17,zero,80110b4 <__alt_data_end+0xfc0110b4>
 8011138:	18d1883a 	add	r8,r3,r3
 801113c:	4211883a 	add	r8,r8,r8
 8011140:	1211883a 	add	r8,r2,r8
 8011144:	41802215 	stw	r6,136(r8)
 8011148:	01000044 	movi	r4,1
 801114c:	11806217 	ldw	r6,392(r2)
 8011150:	20c8983a 	sll	r4,r4,r3
 8011154:	310cb03a 	or	r6,r6,r4
 8011158:	11806215 	stw	r6,392(r2)
 801115c:	41c04215 	stw	r7,264(r8)
 8011160:	01800084 	movi	r6,2
 8011164:	89bfd31e 	bne	r17,r6,80110b4 <__alt_data_end+0xfc0110b4>
 8011168:	11806317 	ldw	r6,396(r2)
 801116c:	3108b03a 	or	r4,r6,r4
 8011170:	11006315 	stw	r4,396(r2)
 8011174:	003fcf06 	br	80110b4 <__alt_data_end+0xfc0110b4>
 8011178:	80805304 	addi	r2,r16,332
 801117c:	80805215 	stw	r2,328(r16)
 8011180:	003fc706 	br	80110a0 <__alt_data_end+0xfc0110a0>
 8011184:	00bfffc4 	movi	r2,-1
 8011188:	003fd106 	br	80110d0 <__alt_data_end+0xfc0110d0>

0801118c <__call_exitprocs>:
 801118c:	00820074 	movhi	r2,2049
 8011190:	108e1e04 	addi	r2,r2,14456
 8011194:	10800017 	ldw	r2,0(r2)
 8011198:	defff404 	addi	sp,sp,-48
 801119c:	dd800815 	stw	r22,32(sp)
 80111a0:	d8800015 	stw	r2,0(sp)
 80111a4:	10805204 	addi	r2,r2,328
 80111a8:	dd000615 	stw	r20,24(sp)
 80111ac:	dc800415 	stw	r18,16(sp)
 80111b0:	dfc00b15 	stw	ra,44(sp)
 80111b4:	df000a15 	stw	fp,40(sp)
 80111b8:	ddc00915 	stw	r23,36(sp)
 80111bc:	dd400715 	stw	r21,28(sp)
 80111c0:	dcc00515 	stw	r19,20(sp)
 80111c4:	dc400315 	stw	r17,12(sp)
 80111c8:	dc000215 	stw	r16,8(sp)
 80111cc:	2025883a 	mov	r18,r4
 80111d0:	2829883a 	mov	r20,r5
 80111d4:	d8800115 	stw	r2,4(sp)
 80111d8:	05bfffc4 	movi	r22,-1
 80111dc:	d8800017 	ldw	r2,0(sp)
 80111e0:	14c05217 	ldw	r19,328(r2)
 80111e4:	98001d26 	beq	r19,zero,801125c <__call_exitprocs+0xd0>
 80111e8:	dd400117 	ldw	r21,4(sp)
 80111ec:	98800117 	ldw	r2,4(r19)
 80111f0:	173fffc4 	addi	fp,r2,-1
 80111f4:	e0000d16 	blt	fp,zero,801122c <__call_exitprocs+0xa0>
 80111f8:	14000044 	addi	r16,r2,1
 80111fc:	8421883a 	add	r16,r16,r16
 8011200:	8421883a 	add	r16,r16,r16
 8011204:	84402004 	addi	r17,r16,128
 8011208:	9c63883a 	add	r17,r19,r17
 801120c:	9c21883a 	add	r16,r19,r16
 8011210:	a0001e26 	beq	r20,zero,801128c <__call_exitprocs+0x100>
 8011214:	80804017 	ldw	r2,256(r16)
 8011218:	15001c26 	beq	r2,r20,801128c <__call_exitprocs+0x100>
 801121c:	e73fffc4 	addi	fp,fp,-1
 8011220:	843fff04 	addi	r16,r16,-4
 8011224:	8c7fff04 	addi	r17,r17,-4
 8011228:	e5bff91e 	bne	fp,r22,8011210 <__alt_data_end+0xfc011210>
 801122c:	00800034 	movhi	r2,0
 8011230:	10800004 	addi	r2,r2,0
 8011234:	10000926 	beq	r2,zero,801125c <__call_exitprocs+0xd0>
 8011238:	98800117 	ldw	r2,4(r19)
 801123c:	1000311e 	bne	r2,zero,8011304 <__call_exitprocs+0x178>
 8011240:	98800017 	ldw	r2,0(r19)
 8011244:	10003426 	beq	r2,zero,8011318 <__call_exitprocs+0x18c>
 8011248:	9809883a 	mov	r4,r19
 801124c:	a8800015 	stw	r2,0(r21)
 8011250:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011254:	acc00017 	ldw	r19,0(r21)
 8011258:	983fe41e 	bne	r19,zero,80111ec <__alt_data_end+0xfc0111ec>
 801125c:	dfc00b17 	ldw	ra,44(sp)
 8011260:	df000a17 	ldw	fp,40(sp)
 8011264:	ddc00917 	ldw	r23,36(sp)
 8011268:	dd800817 	ldw	r22,32(sp)
 801126c:	dd400717 	ldw	r21,28(sp)
 8011270:	dd000617 	ldw	r20,24(sp)
 8011274:	dcc00517 	ldw	r19,20(sp)
 8011278:	dc800417 	ldw	r18,16(sp)
 801127c:	dc400317 	ldw	r17,12(sp)
 8011280:	dc000217 	ldw	r16,8(sp)
 8011284:	dec00c04 	addi	sp,sp,48
 8011288:	f800283a 	ret
 801128c:	98800117 	ldw	r2,4(r19)
 8011290:	80c00017 	ldw	r3,0(r16)
 8011294:	10bfffc4 	addi	r2,r2,-1
 8011298:	17001526 	beq	r2,fp,80112f0 <__call_exitprocs+0x164>
 801129c:	80000015 	stw	zero,0(r16)
 80112a0:	183fde26 	beq	r3,zero,801121c <__alt_data_end+0xfc01121c>
 80112a4:	00800044 	movi	r2,1
 80112a8:	1708983a 	sll	r4,r2,fp
 80112ac:	98806217 	ldw	r2,392(r19)
 80112b0:	9dc00117 	ldw	r23,4(r19)
 80112b4:	2084703a 	and	r2,r4,r2
 80112b8:	1000061e 	bne	r2,zero,80112d4 <__call_exitprocs+0x148>
 80112bc:	183ee83a 	callr	r3
 80112c0:	98800117 	ldw	r2,4(r19)
 80112c4:	15ffc51e 	bne	r2,r23,80111dc <__alt_data_end+0xfc0111dc>
 80112c8:	a8800017 	ldw	r2,0(r21)
 80112cc:	14ffd326 	beq	r2,r19,801121c <__alt_data_end+0xfc01121c>
 80112d0:	003fc206 	br	80111dc <__alt_data_end+0xfc0111dc>
 80112d4:	98806317 	ldw	r2,396(r19)
 80112d8:	2084703a 	and	r2,r4,r2
 80112dc:	1000061e 	bne	r2,zero,80112f8 <__call_exitprocs+0x16c>
 80112e0:	89400017 	ldw	r5,0(r17)
 80112e4:	9009883a 	mov	r4,r18
 80112e8:	183ee83a 	callr	r3
 80112ec:	003ff406 	br	80112c0 <__alt_data_end+0xfc0112c0>
 80112f0:	9f000115 	stw	fp,4(r19)
 80112f4:	003fea06 	br	80112a0 <__alt_data_end+0xfc0112a0>
 80112f8:	89000017 	ldw	r4,0(r17)
 80112fc:	183ee83a 	callr	r3
 8011300:	003fef06 	br	80112c0 <__alt_data_end+0xfc0112c0>
 8011304:	98800017 	ldw	r2,0(r19)
 8011308:	982b883a 	mov	r21,r19
 801130c:	1027883a 	mov	r19,r2
 8011310:	983fb61e 	bne	r19,zero,80111ec <__alt_data_end+0xfc0111ec>
 8011314:	003fd106 	br	801125c <__alt_data_end+0xfc01125c>
 8011318:	0005883a 	mov	r2,zero
 801131c:	003ffa06 	br	8011308 <__alt_data_end+0xfc011308>

08011320 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8011320:	defffd04 	addi	sp,sp,-12
 8011324:	df000215 	stw	fp,8(sp)
 8011328:	df000204 	addi	fp,sp,8
 801132c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8011330:	0001883a 	nop
 8011334:	e0bfff17 	ldw	r2,-4(fp)
 8011338:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 801133c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8011340:	10000226 	beq	r2,zero,801134c <_exit+0x2c>
    ALT_SIM_FAIL();
 8011344:	002af070 	cmpltui	zero,zero,43969
 8011348:	00000106 	br	8011350 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 801134c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8011350:	003fff06 	br	8011350 <__alt_data_end+0xfc011350>
